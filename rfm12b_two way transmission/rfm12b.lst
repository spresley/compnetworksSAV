
rfm12b.elf：     文件格式 elf32-avr

节：
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  000017c8  0000185c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  008001e0  008001e0  0000193c  2**0
                  ALLOC
  3 .stab         000039f0  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002e69  00000000  00000000  0000532c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008195  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__ctors_end>
       4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       c:	0c 94 95 02 	jmp	0x52a	; 0x52a <__vector_3>
      10:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      14:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      18:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      1c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      20:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      24:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      28:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      30:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      34:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      40:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      48:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      4c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      50:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      54:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      58:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      5c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      60:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      64:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      68:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      6c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      70:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      74:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      78:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>

0000007c <__trampolines_end>:
      7c:	d6 80       	ldd	r13, Z+6	; 0x06
      7e:	01 82       	std	Z+1, r0	; 0x01
      80:	f4 a4       	ldd	r15, Z+44	; 0x2c
      82:	02 c6       	rjmp	.+3076   	; 0xc88 <_ZN3tft9setOrientEh+0x20>
      84:	2d 94 ab c2 	jmp	0xb8556	; 0xb8556 <__data_load_end+0xb6cae>
      88:	81 ca       	rjmp	.-2814   	; 0xfffff58c <__eeprom_end+0xff7ef58c>
      8a:	f7 c4       	rjmp	.+2542   	; 0xa7a <_ZN3tft5frameEjjjjhj+0x86>
      8c:	70 98       	cbi	0x0e, 0	; 14
      8e:	00 c8       	rjmp	.-4096   	; 0xfffff090 <__eeprom_end+0xff7ef090>
      90:	00 e0       	ldi	r16, 0x00	; 0
      92:	81 82       	std	Z+1, r8	; 0x01

00000094 <ascii_6x8>:
      94:	02 00 00 00 00 00 00 01 22 20 20 20 00 00 20 01     ........"   .. .
      a4:	52 50 50 00 00 00 00 01 52 50 f8 50 f8 50 50 01     RPP.....RP.P.PP.
      b4:	22 78 a0 70 28 f0 20 01 c2 c8 10 20 40 98 18 01     "x.p(. .... @...
      c4:	62 90 a0 40 a8 90 68 01 62 20 40 00 00 00 00 01     b..@..h.b @.....
      d4:	12 20 40 40 40 20 10 01 42 20 10 10 10 20 40 01     . @@@ ..B ... @.
      e4:	02 20 a8 70 a8 20 00 01 02 20 20 f8 20 20 00 01     . .p. ...  .  ..
      f4:	02 00 00 00 00 60 20 41 02 00 00 f8 00 00 00 01     .....` A........
     104:	02 00 00 00 00 60 60 01 02 08 10 20 40 80 00 01     .....``.... @...
     114:	72 88 98 a8 c8 88 70 01 22 60 20 20 20 20 70 01     r.....p."`    p.
     124:	72 88 08 10 20 40 f8 01 fa 10 20 10 08 88 70 01     r... @.... ...p.
     134:	12 30 50 90 f8 10 10 01 fa 80 f0 08 08 88 70 01     .0P...........p.
     144:	32 40 80 f0 88 88 70 01 fa 08 10 20 40 40 40 01     2@....p.... @@@.
     154:	72 88 88 70 88 88 70 01 72 88 88 78 08 10 60 01     r..p..p.r..x..`.
     164:	02 60 60 00 60 60 00 01 02 60 60 00 60 20 40 01     .``.``...``.` @.
     174:	12 20 40 80 40 20 10 01 02 00 f8 00 f8 00 00 01     . @.@ ..........
     184:	42 20 10 08 10 20 40 01 72 88 08 10 20 00 20 01     B ... @.r... . .
     194:	72 88 08 68 a8 a8 70 01 72 88 88 88 f8 88 88 01     r..h..p.r.......
     1a4:	f2 88 88 f0 88 88 f0 01 72 88 80 80 80 88 70 01     ........r.....p.
     1b4:	e2 90 88 88 88 90 e0 01 fa 80 80 f0 80 80 f8 01     ................
     1c4:	fa 80 80 f0 80 80 80 01 72 88 80 b8 88 88 78 01     ........r.....x.
     1d4:	8a 88 88 f8 88 88 88 01 72 20 20 20 20 20 70 01     ........r     p.
     1e4:	3a 10 10 10 10 90 60 01 8a 90 a0 c0 a0 90 88 01     :.....`.........
     1f4:	82 80 80 80 80 80 f8 01 8a d8 a8 a8 88 88 88 01     ................
     204:	8a 88 c8 a8 98 88 88 01 72 88 88 88 88 88 70 01     ........r.....p.
     214:	f2 88 88 f0 80 80 80 01 72 88 88 88 a8 90 68 01     ........r.....h.
     224:	f2 88 88 f0 a0 90 88 01 7a 80 80 70 08 08 f0 01     ........z..p....
     234:	fa 20 20 20 20 20 20 01 8a 88 88 88 88 88 70 01     .      .......p.
     244:	8a 88 88 88 88 50 20 01 8a 88 88 a8 a8 a8 50 01     .....P .......P.
     254:	8a 88 50 20 50 88 88 01 8a 88 88 50 20 20 20 01     ..P P......P   .
     264:	fa 08 10 20 40 80 f8 01 72 40 40 40 40 40 70 01     ... @...r@@@@@p.
     274:	02 80 40 20 10 08 00 01 72 10 10 10 10 10 70 01     ..@ ....r.....p.
     284:	22 50 88 00 00 00 00 01 02 00 00 00 00 00 f8 01     "P..............
     294:	42 20 10 00 00 00 00 01 02 00 70 08 78 88 78 01     B ........p.x.x.
     2a4:	82 80 b0 c8 88 88 f0 01 02 00 70 80 80 88 70 01     ..........p...p.
     2b4:	0a 08 68 98 88 88 78 01 02 00 70 88 f8 80 70 01     ..h...x...p...p.
     2c4:	32 48 40 e0 40 40 40 01 02 78 88 88 78 08 70 01     2H@.@@@..x..x.p.
     2d4:	82 80 b0 c8 88 88 88 01 22 00 60 20 20 20 70 01     ........".`   p.
     2e4:	12 00 30 10 10 90 60 01 82 80 90 a0 c0 a0 90 01     ..0...`.........
     2f4:	62 20 20 20 20 20 70 01 02 00 d0 a8 a8 a8 a8 01     b     p.........
     304:	02 00 b0 c8 88 88 88 01 02 00 70 88 88 88 70 01     ..........p...p.
     314:	02 00 f0 88 f0 80 80 01 02 00 68 98 78 08 08 01     ..........h.x...
     324:	02 00 b0 c8 80 80 80 01 02 00 70 80 70 08 f0 01     ..........p.p...
     334:	42 40 e0 40 40 48 30 01 02 00 88 88 88 98 68 01     B@.@@H0.......h.
     344:	02 00 88 88 88 50 20 01 02 00 88 88 a8 a8 50 01     .....P .......P.
     354:	02 00 88 50 20 50 88 01 02 00 88 88 78 08 70 01     ...P P......x.p.
     364:	02 00 f8 10 20 40 f8 01 12 20 20 40 20 20 10 01     .... @...  @  ..
     374:	22 20 20 20 20 20 20 01 42 20 20 10 20 20 40 01     "      .B  .  @.
     384:	02 00 68 90 00 00 00 01 02 00 00 00 00 00 00 01     ..h.............
     394:	00 50 50 00 00 88 70 00 00 50 50 00 00 70 88 00     .PP...p..PP..p..
     3a4:	00 50 50 00 88 a8 50 00                             .PP...P.

000003ac <__ctors_end>:
     3ac:	11 24       	eor	r1, r1
     3ae:	1f be       	out	0x3f, r1	; 63
     3b0:	cf ef       	ldi	r28, 0xFF	; 255
     3b2:	d0 e1       	ldi	r29, 0x10	; 16
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	cd bf       	out	0x3d, r28	; 61

000003b8 <__do_copy_data>:
     3b8:	11 e0       	ldi	r17, 0x01	; 1
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	e8 ec       	ldi	r30, 0xC8	; 200
     3c0:	f7 e1       	ldi	r31, 0x17	; 23
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <__do_copy_data+0x10>
     3c4:	05 90       	lpm	r0, Z+
     3c6:	0d 92       	st	X+, r0
     3c8:	a0 3e       	cpi	r26, 0xE0	; 224
     3ca:	b1 07       	cpc	r27, r17
     3cc:	d9 f7       	brne	.-10     	; 0x3c4 <__do_copy_data+0xc>

000003ce <__do_clear_bss>:
     3ce:	22 e0       	ldi	r18, 0x02	; 2
     3d0:	a0 ee       	ldi	r26, 0xE0	; 224
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <.do_clear_bss_start>

000003d6 <.do_clear_bss_loop>:
     3d6:	1d 92       	st	X+, r1

000003d8 <.do_clear_bss_start>:
     3d8:	aa 3d       	cpi	r26, 0xDA	; 218
     3da:	b2 07       	cpc	r27, r18
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <.do_clear_bss_loop>
     3de:	0e 94 38 09 	call	0x1270	; 0x1270 <main>
     3e2:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_exit>

000003e6 <__bad_interrupt>:
     3e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003ea <_ZN3tftL5cleanEv>:
#endif

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
     3ea:	80 91 be 02 	lds	r24, 0x02BE
     3ee:	90 91 bf 02 	lds	r25, 0x02BF
     3f2:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN3tft4fillEj>
     3f6:	10 92 c9 02 	sts	0x02C9, r1
     3fa:	10 92 c8 02 	sts	0x02C8, r1
     3fe:	10 92 c7 02 	sts	0x02C7, r1
     402:	10 92 c6 02 	sts	0x02C6, r1
     406:	08 95       	ret

00000408 <_Z4initv>:

void init(void)
{
//	DDRB |= 0x80;			// LED
//	PORTB |= 0x80;
	tft::init();
     408:	0e 94 77 06 	call	0xcee	; 0xcee <_ZN3tft4initEv>
	tft::setOrient(tft::Landscape | tft::Flipped);
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN3tft9setOrientEh>
	tft::background = COLOUR_565_888(0xFFFFFF);
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	9f ef       	ldi	r25, 0xFF	; 255
     416:	90 93 bf 02 	sts	0x02BF, r25
     41a:	80 93 be 02 	sts	0x02BE, r24
	tft::foreground = 0x0000;
     41e:	10 92 c1 02 	sts	0x02C1, r1
     422:	10 92 c0 02 	sts	0x02C0, r1
	tft::clean();
     426:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
	stdout = tftout();
     42a:	0e 94 3a 08 	call	0x1074	; 0x1074 <_Z6tftoutv>
     42e:	90 93 d3 02 	sts	0x02D3, r25
     432:	80 93 d2 02 	sts	0x02D2, r24
}

static inline void tfthw::setBGLight(bool ctrl)
{
	if (ctrl)
		TFT_WCTRL |= TFT_BLC;
     436:	11 9a       	sbi	0x02, 1	; 2
     438:	08 95       	ret

0000043a <_Z8init_sysv>:
		}
}

void init_sys(void)
{
	init();
     43a:	0e 94 04 02 	call	0x408	; 0x408 <_Z4initv>
	tft::clean();
     43e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
	tft::zoom = 3;
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	80 93 cc 02 	sts	0x02CC, r24
	tft::background = COLOUR_565_888(0xFF0000);
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	98 ef       	ldi	r25, 0xF8	; 248
     44c:	90 93 bf 02 	sts	0x02BF, r25
     450:	80 93 be 02 	sts	0x02BE, r24
	tft::clean();
     454:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
	tft::foreground = COLOUR_565_888(0x00FF00);
     458:	80 ee       	ldi	r24, 0xE0	; 224
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	90 93 c1 02 	sts	0x02C1, r25
     460:	80 93 c0 02 	sts	0x02C0, r24
	puts(" *Welcome to use*");
     464:	89 e5       	ldi	r24, 0x59	; 89
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
	puts("");
     46c:	8a e7       	ldi	r24, 0x7A	; 122
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
	puts(" ***Group  O***");
     474:	8b e6       	ldi	r24, 0x6B	; 107
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
	puts(" **Smart Talk**");
     47c:	8b e7       	ldi	r24, 0x7B	; 123
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
	tft::zoom = 1;
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 cc 02 	sts	0x02CC, r24
	puts("supported by OOS(Oblivion OS) version 1.0.0");
     48a:	8b e8       	ldi	r24, 0x8B	; 139
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
	puts("press any key to continue....");
     492:	87 eb       	ldi	r24, 0xB7	; 183
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0c 94 6b 0a 	jmp	0x14d6	; 0x14d6 <puts>

0000049a <_ZL10rfm12_dataj>:


//non-inlined version of rfm12_data
//warning: without the attribute, gcc will inline this even if -Os is set
static void __attribute__ ((noinline)) rfm12_data(uint16_t d) {
	SS_ASSERT();
     49a:	2c 98       	cbi	0x05, 4	; 5
	#if !(RFM12_SPI_SOFTWARE)
		SPDR = d >> 8;
     49c:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     49e:	0d b4       	in	r0, 0x2d	; 45
     4a0:	07 fe       	sbrs	r0, 7
     4a2:	fd cf       	rjmp	.-6      	; 0x49e <_ZL10rfm12_dataj+0x4>

		SPDR = d & 0xff;
     4a4:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     4a6:	0d b4       	in	r0, 0x2d	; 45
     4a8:	07 fe       	sbrs	r0, 7
     4aa:	fd cf       	rjmp	.-6      	; 0x4a6 <_ZL10rfm12_dataj+0xc>
	#else
		spi_data(d >> 8);
		spi_data(d & 0xff);
	#endif
	SS_RELEASE();
     4ac:	2c 9a       	sbi	0x05, 4	; 5
     4ae:	08 95       	ret

000004b0 <_ZL10rfm12_readj>:

//non-inlined version of rfm12_read
//warning: without the attribute, gcc will inline this even if -Os is set
static uint16_t __attribute__ ((noinline)) rfm12_read(uint16_t c) {
	uint16_t retval;
	SS_ASSERT();
     4b0:	2c 98       	cbi	0x05, 4	; 5

	#if !(RFM12_SPI_SOFTWARE)
		SPDR = c >> 8;
     4b2:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     4b4:	0d b4       	in	r0, 0x2d	; 45
     4b6:	07 fe       	sbrs	r0, 7
     4b8:	fd cf       	rjmp	.-6      	; 0x4b4 <_ZL10rfm12_readj+0x4>
		retval = SPDR << 8;
     4ba:	2e b5       	in	r18, 0x2e	; 46
     4bc:	30 e0       	ldi	r19, 0x00	; 0
     4be:	32 2f       	mov	r19, r18
     4c0:	22 27       	eor	r18, r18
		SPDR = c & 0xff;
     4c2:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     4c4:	0d b4       	in	r0, 0x2d	; 45
     4c6:	07 fe       	sbrs	r0, 7
     4c8:	fd cf       	rjmp	.-6      	; 0x4c4 <_ZL10rfm12_readj+0x14>
		retval |= SPDR;
     4ca:	8e b5       	in	r24, 0x2e	; 46
	#else
		retval = spi_data(c >> 8);
		retval <<= 8;
		retval |= spi_data(c & 0xff);
	#endif
	SS_RELEASE();
     4cc:	2c 9a       	sbi	0x05, 4	; 5
	return retval;
}
     4ce:	a9 01       	movw	r20, r18
     4d0:	48 2b       	or	r20, r24
     4d2:	ca 01       	movw	r24, r20
     4d4:	08 95       	ret

000004d6 <_Z15rfm12_data_safej>:
#endif

#if RFM12_LIVECTRL_HOST
	void rfm12_data_safe(uint16_t d) {
		//disable the interrupt (as we're working directly with the transceiver now)
		RFM12_INT_OFF();
     4d6:	ea 98       	cbi	0x1d, 2	; 29
		rfm12_data(d);
     4d8:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
		RFM12_INT_ON();
     4dc:	ea 9a       	sbi	0x1d, 2	; 29
     4de:	08 95       	ret

000004e0 <rfm12_livectrl>:
	}


	void rfm12_livectrl(uint8_t cmd, uint16_t value) {
		uint16_t tmp = 0;
		livectrl_cmd_t  *livectrl_cmd = &livectrl_cmds[cmd];
     4e0:	98 e0       	ldi	r25, 0x08	; 8
     4e2:	89 9f       	mul	r24, r25
     4e4:	f0 01       	movw	r30, r0
     4e6:	11 24       	eor	r1, r1
     4e8:	ef 5f       	subi	r30, 0xFF	; 255
     4ea:	fe 4f       	sbci	r31, 0xFE	; 254

		livectrl_cmd->current_value = value; //update current value
     4ec:	77 83       	std	Z+7, r23	; 0x07
     4ee:	66 83       	std	Z+6, r22	; 0x06
		//but it makes sense never the less:
		//the current_value only saves the bits for this one setting (for menu,saving,loding settings)
		//while the shadow register keeps track of ALL bits the rfm12 has in that register.
		//the shadow will also be used from rfm12_tick or maybe the interrupt

		if (livectrl_cmd->shadow_register) {
     4f0:	a4 81       	ldd	r26, Z+4	; 0x04
     4f2:	b5 81       	ldd	r27, Z+5	; 0x05
     4f4:	82 81       	ldd	r24, Z+2	; 0x02
     4f6:	93 81       	ldd	r25, Z+3	; 0x03
     4f8:	10 97       	sbiw	r26, 0x00	; 0
     4fa:	49 f0       	breq	.+18     	; 0x50e <rfm12_livectrl+0x2e>
			tmp = *livectrl_cmd->shadow_register;         //load shadow value if any
     4fc:	4d 91       	ld	r20, X+
     4fe:	5c 91       	ld	r21, X
     500:	11 97       	sbiw	r26, 0x01	; 1
			tmp &= ~livectrl_cmd->rfm12_hw_parameter_mask;//clear parameter bits
     502:	9c 01       	movw	r18, r24
     504:	20 95       	com	r18
     506:	30 95       	com	r19
     508:	24 23       	and	r18, r20
     50a:	35 23       	and	r19, r21
     50c:	02 c0       	rjmp	.+4      	; 0x512 <rfm12_livectrl+0x32>
		RFM12_INT_ON();
	}


	void rfm12_livectrl(uint8_t cmd, uint16_t value) {
		uint16_t tmp = 0;
     50e:	20 e0       	ldi	r18, 0x00	; 0
     510:	30 e0       	ldi	r19, 0x00	; 0

		if (livectrl_cmd->shadow_register) {
			tmp = *livectrl_cmd->shadow_register;         //load shadow value if any
			tmp &= ~livectrl_cmd->rfm12_hw_parameter_mask;//clear parameter bits
		}
		tmp |= livectrl_cmd->rfm12_hw_command | (livectrl_cmd->rfm12_hw_parameter_mask & value);
     512:	86 23       	and	r24, r22
     514:	97 23       	and	r25, r23
     516:	40 81       	ld	r20, Z
     518:	51 81       	ldd	r21, Z+1	; 0x01
     51a:	84 2b       	or	r24, r20
     51c:	95 2b       	or	r25, r21
     51e:	82 2b       	or	r24, r18
     520:	93 2b       	or	r25, r19

		*livectrl_cmd->shadow_register = tmp;
     522:	8d 93       	st	X+, r24
     524:	9c 93       	st	X, r25

		rfm12_data_safe(tmp);
     526:	0c 94 6b 02 	jmp	0x4d6	; 0x4d6 <_Z15rfm12_data_safej>

0000052a <__vector_3>:
#if (RFM12_USE_POLLING)
void rfm12_poll(void)
#else
ISR(RFM12_INT_VECT, ISR_NOBLOCK)
#endif
{
     52a:	78 94       	sei
     52c:	1f 92       	push	r1
     52e:	0f 92       	push	r0
     530:	0f b6       	in	r0, 0x3f	; 63
     532:	0f 92       	push	r0
     534:	11 24       	eor	r1, r1
     536:	ff 92       	push	r15
     538:	0f 93       	push	r16
     53a:	1f 93       	push	r17
     53c:	2f 93       	push	r18
     53e:	3f 93       	push	r19
     540:	4f 93       	push	r20
     542:	5f 93       	push	r21
     544:	6f 93       	push	r22
     546:	7f 93       	push	r23
     548:	8f 93       	push	r24
     54a:	9f 93       	push	r25
     54c:	af 93       	push	r26
     54e:	bf 93       	push	r27
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	ef 93       	push	r30
     556:	ff 93       	push	r31
	RFM12_INT_OFF();
     558:	ea 98       	cbi	0x1d, 2	; 29
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	do {
		//clear AVR int flag
#ifdef __PLATFORM_AVR__
		RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
     55a:	04 e0       	ldi	r16, 0x04	; 4
						#if RFM12_UART_DEBUG >= 2
							uart_putc('D');
						#endif

						//indicate that the buffer is ready to be used
						rf_rx_buffers[ctrl.buffer_in_num].status = STATUS_COMPLETE;
     55c:	d2 e2       	ldi	r29, 0x22	; 34
     55e:	22 e0       	ldi	r18, 0x02	; 2
     560:	f2 2e       	mov	r15, r18
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;

						//init the bytecounter - remember, we will read the length byte, so this must be 1
						ctrl.bytecount = 1;
     562:	11 e0       	ldi	r17, 0x01	; 1
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	do {
		//clear AVR int flag
#ifdef __PLATFORM_AVR__
		RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
     564:	0c bb       	out	0x1c, r16	; 28
/* @description reads the upper 8 bits of the status
 * register (the interrupt flags)
 */
static uint8_t rfm12_read_int_flags_inline(void) {
	#if !(RFM12_SPI_SOFTWARE)
		SS_ASSERT();
     566:	2c 98       	cbi	0x05, 4	; 5
		SPDR = 0;
     568:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
     56a:	0d b4       	in	r0, 0x2d	; 45
     56c:	07 fe       	sbrs	r0, 7
     56e:	fd cf       	rjmp	.-6      	; 0x56a <__vector_3+0x40>
		SS_RELEASE();
     570:	2c 9a       	sbi	0x05, 4	; 5
				rfm12_data(ctrl.pwrmgt_shadow);
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if the fifo interrupt occurred
		if (status & (RFM12_STATUS_FFIT>>8)) {
     572:	0e b4       	in	r0, 0x2e	; 46
     574:	07 fe       	sbrs	r0, 7
     576:	79 c0       	rjmp	.+242    	; 0x66a <__vector_3+0x140>
			//yes
			recheck_interrupt = 1;
			//see what we have to do (start rx, rx or tx)
			switch (ctrl.rfm12_state) {
     578:	c0 91 48 02 	lds	r28, 0x0248
     57c:	c1 30       	cpi	r28, 0x01	; 1
     57e:	f9 f0       	breq	.+62     	; 0x5be <__vector_3+0x94>
     580:	20 f0       	brcs	.+8      	; 0x58a <__vector_3+0x60>
     582:	c2 30       	cpi	r28, 0x02	; 2
     584:	09 f4       	brne	.+2      	; 0x588 <__vector_3+0x5e>
     586:	4b c0       	rjmp	.+150    	; 0x61e <__vector_3+0xf4>
     588:	65 c0       	rjmp	.+202    	; 0x654 <__vector_3+0x12a>
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;

						//init the bytecounter - remember, we will read the length byte, so this must be 1
						ctrl.bytecount = 1;
     58a:	10 93 4b 02 	sts	0x024B, r17

						//read the length byte,  and write it to the checksum
						//remember, the first byte is the length byte
						data = rfm12_read(RFM12_CMD_READ);
     58e:	80 e0       	ldi	r24, 0x00	; 0
     590:	90 eb       	ldi	r25, 0xB0	; 176
     592:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZL10rfm12_readj>
						checksum = data;
     596:	80 93 bd 02 	sts	0x02BD, r24

						//add the packet overhead and store it into a working variable
						ctrl.num_bytes = data + PACKET_OVERHEAD;
     59a:	93 e0       	ldi	r25, 0x03	; 3
     59c:	98 0f       	add	r25, r24
     59e:	90 93 4a 02 	sts	0x024A, r25
							uart_putc(data);
						#endif

						//see whether our buffer is free
						//FIXME: put this into global statekeeping struct, the free state can be set by the function which pulls the packet, i guess
						if (rf_rx_buffers[ctrl.buffer_in_num].status == STATUS_FREE) {
     5a2:	e0 91 4c 02 	lds	r30, 0x024C
     5a6:	de 9f       	mul	r29, r30
     5a8:	f0 01       	movw	r30, r0
     5aa:	11 24       	eor	r1, r1
     5ac:	ea 5a       	subi	r30, 0xAA	; 170
     5ae:	fd 4f       	sbci	r31, 0xFD	; 253
     5b0:	90 81       	ld	r25, Z
     5b2:	91 11       	cpse	r25, r1
     5b4:	4f c0       	rjmp	.+158    	; 0x654 <__vector_3+0x12a>
							//the current receive buffer is empty, so we start receiving
							ctrl.rfm12_state = STATE_RX_ACTIVE;
     5b6:	10 93 48 02 	sts	0x0248, r17

							//store the received length into the packet buffer
							//this length field will be used by application reading the
							//buffer.
							rf_rx_buffers[ctrl.buffer_in_num].len = data;
     5ba:	81 83       	std	Z+1, r24	; 0x01

							//end the interrupt without resetting the fifo
							goto no_fifo_reset;
     5bc:	d3 cf       	rjmp	.-90     	; 0x564 <__vector_3+0x3a>
				case STATE_RX_ACTIVE: {
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;
						//read a byte
						data = rfm12_read(RFM12_CMD_READ);
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	90 eb       	ldi	r25, 0xB0	; 176
     5c2:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZL10rfm12_readj>

						//check if transmission is complete
						if (ctrl.bytecount < ctrl.num_bytes) {
     5c6:	90 91 4b 02 	lds	r25, 0x024B
     5ca:	20 91 4a 02 	lds	r18, 0x024A
     5ce:	92 17       	cp	r25, r18
     5d0:	d0 f4       	brcc	.+52     	; 0x606 <__vector_3+0xdc>
								uart_putc(data);
							#endif

							//xor the remaining bytes onto the checksum
							//note: only the header will be effectively checked
							checksum ^= data;
     5d2:	20 91 bd 02 	lds	r18, 0x02BD
     5d6:	28 27       	eor	r18, r24
     5d8:	20 93 bd 02 	sts	0x02BD, r18

							//put next byte into buffer, if there is enough space
							if (ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3)) {
     5dc:	91 32       	cpi	r25, 0x21	; 33
     5de:	20 f0       	brcs	.+8      	; 0x5e8 <__vector_3+0xbe>
								break;
							}
#endif

							//increment bytecount
							ctrl.bytecount++;
     5e0:	9f 5f       	subi	r25, 0xFF	; 255
     5e2:	90 93 4b 02 	sts	0x024B, r25

							//end the interrupt without resetting the fifo
							goto no_fifo_reset;
     5e6:	be cf       	rjmp	.-132    	; 0x564 <__vector_3+0x3a>
							checksum ^= data;

							//put next byte into buffer, if there is enough space
							if (ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3)) {
								//hackhack: begin writing to struct at offsetof len
								(& rf_rx_buffers[ctrl.buffer_in_num].len)[ctrl.bytecount] = data;
     5e8:	e0 91 4c 02 	lds	r30, 0x024C
     5ec:	de 9f       	mul	r29, r30
     5ee:	f0 01       	movw	r30, r0
     5f0:	11 24       	eor	r1, r1
     5f2:	e9 5a       	subi	r30, 0xA9	; 169
     5f4:	fd 4f       	sbci	r31, 0xFD	; 253
     5f6:	e9 0f       	add	r30, r25
     5f8:	f1 1d       	adc	r31, r1
     5fa:	80 83       	st	Z, r24
							}
#ifndef DISABLE_CHECKSUMM
							//check header against checksum
							if (ctrl.bytecount == 2 && checksum != 0xff) {
     5fc:	92 30       	cpi	r25, 0x02	; 2
     5fe:	81 f7       	brne	.-32     	; 0x5e0 <__vector_3+0xb6>
     600:	2f 3f       	cpi	r18, 0xFF	; 255
     602:	41 f5       	brne	.+80     	; 0x654 <__vector_3+0x12a>
     604:	ed cf       	rjmp	.-38     	; 0x5e0 <__vector_3+0xb6>
						#if RFM12_UART_DEBUG >= 2
							uart_putc('D');
						#endif

						//indicate that the buffer is ready to be used
						rf_rx_buffers[ctrl.buffer_in_num].status = STATUS_COMPLETE;
     606:	80 91 4c 02 	lds	r24, 0x024C
     60a:	d8 9f       	mul	r29, r24
     60c:	f0 01       	movw	r30, r0
     60e:	11 24       	eor	r1, r1
     610:	ea 5a       	subi	r30, 0xAA	; 170
     612:	fd 4f       	sbci	r31, 0xFD	; 253
     614:	f0 82       	st	Z, r15
								rfm12_rx_callback_func (ctrl.rf_buffer_in->len, ctrl.rf_buffer_in.buffer);
							}
						#endif

						//switch to other buffer
						ctrl.buffer_in_num ^= 1;
     616:	c8 27       	eor	r28, r24
     618:	c0 93 4c 02 	sts	0x024C, r28

						#if RFM12_USE_RX_CALLBACK
							rfm12_rx_clear(); /* clear immediately since the data has been processed by the callback func */
						#endif
					#endif /* !(RFM12_TRANSMIT_ONLY) */
					} break;
     61c:	1b c0       	rjmp	.+54     	; 0x654 <__vector_3+0x12a>
					//debug
					#if RFM12_UART_DEBUG >= 2
						uart_putc('T');
					#endif

					if (ctrl.bytecount < ctrl.num_bytes) {
     61e:	e0 91 4b 02 	lds	r30, 0x024B
     622:	80 91 4a 02 	lds	r24, 0x024A
     626:	e8 17       	cp	r30, r24
     628:	58 f4       	brcc	.+22     	; 0x640 <__vector_3+0x116>
						//load the next byte from our buffer struct.
						rfm12_data( RFM12_CMD_TX | rf_tx_buffer.sync[ctrl.bytecount++]);
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	8e 0f       	add	r24, r30
     62e:	80 93 4b 02 	sts	0x024B, r24
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	e6 56       	subi	r30, 0x66	; 102
     636:	fd 4f       	sbci	r31, 0xFD	; 253
     638:	80 81       	ld	r24, Z
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	98 6b       	ori	r25, 0xB8	; 184
     63e:	12 c0       	rjmp	.+36     	; 0x664 <__vector_3+0x13a>
					#ifdef TX_LEAVE_HOOK
						TX_LEAVE_HOOK;
					#endif

					//flag the buffer as free again
					ctrl.txstate = STATUS_FREE;
     640:	10 92 49 02 	sts	0x0249, r1
					#if RFM12_PWRMGT_SHADOW
						ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ET); /* disable transmitter */
						ctrl.pwrmgt_shadow |= (PWRMGT_RECEIVE);   /* activate predefined receive mode */
						rfm12_data(ctrl.pwrmgt_shadow);
					#else /* no RFM12_PWRMGT_SHADOW */
						rfm12_data( PWRMGT_RECEIVE );
     644:	81 e8       	ldi	r24, 0x81	; 129
     646:	92 e8       	ldi	r25, 0x82	; 130
     648:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
					#ifdef RX_ENTER_HOOK
						RX_ENTER_HOOK;
					#endif

					//load a dummy byte to clear int status
					rfm12_data( RFM12_CMD_TX | 0xaa);
     64c:	8a ea       	ldi	r24, 0xAA	; 170
     64e:	98 eb       	ldi	r25, 0xB8	; 184
     650:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
							break;
					#endif
			}//end of switch

			//set the state machine to idle
			ctrl.rfm12_state = STATE_RX_IDLE;
     654:	10 92 48 02 	sts	0x0248, r1
			//reset the receiver fifo, if receive mode is not disabled (default)
			#if !(RFM12_TRANSMIT_ONLY)
				#if RFM12_UART_DEBUG >= 2
					uart_putc('F');
				#endif
				rfm12_data( RFM12_CMD_FIFORESET | CLEAR_FIFO_INLINE);
     658:	81 e8       	ldi	r24, 0x81	; 129
     65a:	9a ec       	ldi	r25, 0xCA	; 202
     65c:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
				rfm12_data( RFM12_CMD_FIFORESET | ACCEPT_DATA_INLINE);
     660:	83 e8       	ldi	r24, 0x83	; 131
     662:	9a ec       	ldi	r25, 0xCA	; 202
     664:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
     668:	7d cf       	rjmp	.-262    	; 0x564 <__vector_3+0x3a>
	#if RFM12_UART_DEBUG >= 2
		uart_putc('E');
	#endif

	//turn the int back on
	RFM12_INT_ON();
     66a:	ea 9a       	sbi	0x1d, 2	; 29
}
     66c:	ff 91       	pop	r31
     66e:	ef 91       	pop	r30
     670:	df 91       	pop	r29
     672:	cf 91       	pop	r28
     674:	bf 91       	pop	r27
     676:	af 91       	pop	r26
     678:	9f 91       	pop	r25
     67a:	8f 91       	pop	r24
     67c:	7f 91       	pop	r23
     67e:	6f 91       	pop	r22
     680:	5f 91       	pop	r21
     682:	4f 91       	pop	r20
     684:	3f 91       	pop	r19
     686:	2f 91       	pop	r18
     688:	1f 91       	pop	r17
     68a:	0f 91       	pop	r16
     68c:	ff 90       	pop	r15
     68e:	0f 90       	pop	r0
     690:	0f be       	out	0x3f, r0	; 63
     692:	0f 90       	pop	r0
     694:	1f 90       	pop	r1
     696:	18 95       	reti

00000698 <rfm12_tick>:
			puts ("\r\n");
			oldstate = state;
		}
	#endif
	//don't disturb RFM12 if transmitting or receiving
	if (ctrl.rfm12_state != STATE_RX_IDLE) {
     698:	80 91 48 02 	lds	r24, 0x0248
     69c:	81 11       	cpse	r24, r1
     69e:	32 c0       	rjmp	.+100    	; 0x704 <rfm12_tick+0x6c>
	#if !(RFM12_NOCOLLISIONDETECTION)
		//disable the interrupt (as we're working directly with the transceiver now)
		//hint: we could be losing an interrupt here, because we read the status register.
		//this applys for the Wakeup timer, as it's flag is reset by reading.
		//printf("t");
		RFM12_INT_OFF();
     6a0:	ea 98       	cbi	0x1d, 2	; 29
		status = rfm12_read(RFM12_CMD_STATUS);
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZL10rfm12_readj>
		RFM12_INT_ON();
     6aa:	ea 9a       	sbi	0x1d, 2	; 29
				RFM12_INT_ON();
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if we see a carrier
		if (status & RFM12_STATUS_RSSI) {
     6ac:	90 ff       	sbrs	r25, 0
     6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <rfm12_tick+0x1c>
			//yes: reset free counter and return
			//puts("yes");
		//	printf("%u\n", status & RFM12_STATUS_RSSI);
			channel_free_count = CHANNEL_FREE_TIME;
     6b0:	88 ec       	ldi	r24, 0xC8	; 200
     6b2:	05 c0       	rjmp	.+10     	; 0x6be <rfm12_tick+0x26>
			return;
		}
		//no

		//is the channel free long enough ?
		if (channel_free_count != 0) {
     6b4:	80 91 00 01 	lds	r24, 0x0100
     6b8:	88 23       	and	r24, r24
     6ba:	21 f0       	breq	.+8      	; 0x6c4 <rfm12_tick+0x2c>
			//no:
			channel_free_count--; // decrement counter
     6bc:	81 50       	subi	r24, 0x01	; 1
     6be:	80 93 00 01 	sts	0x0100, r24
			return;
     6c2:	08 95       	ret
	//	puts("trans");
		//yes: we can begin transmitting
	#endif
	//puts("trans");
	//do we have something to transmit?
	if (ctrl.txstate == STATUS_OCCUPIED) { //yes: start transmitting
     6c4:	80 91 49 02 	lds	r24, 0x0249
     6c8:	81 30       	cpi	r24, 0x01	; 1
     6ca:	e1 f4       	brne	.+56     	; 0x704 <rfm12_tick+0x6c>
		//we won't loose interrupts, as the AVR caches them in the int flag.
		//we could disturb an ongoing reception,
		//if it has just started some cpu cycles ago
		//(as the check for this case is some lines (cpu cycles) above)
		//anyhow, we MUST transmit at some point...
		RFM12_INT_OFF();
     6cc:	ea 98       	cbi	0x1d, 2	; 29

		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ER); /* disable receiver */
			rfm12_data(ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT ); /* disable receiver */
     6ce:	81 e0       	ldi	r24, 0x01	; 1
     6d0:	92 e8       	ldi	r25, 0x82	; 130
     6d2:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
			RX_LEAVE_HOOK;
		#endif

		//calculate number of bytes to be sent by ISR
		//2 sync bytes + len byte + type byte + checksum + message length + 1 dummy byte
		ctrl.num_bytes = rf_tx_buffer.len + 6;
     6d6:	80 91 9c 02 	lds	r24, 0x029C
     6da:	8a 5f       	subi	r24, 0xFA	; 250
     6dc:	80 93 4a 02 	sts	0x024A, r24

		//reset byte sent counter
		ctrl.bytecount = 0;
     6e0:	10 92 4b 02 	sts	0x024B, r1

		//set mode for interrupt handler
		ctrl.rfm12_state = STATE_TX;
     6e4:	82 e0       	ldi	r24, 0x02	; 2
     6e6:	80 93 48 02 	sts	0x0248, r24
		#endif

		//fill 2byte 0xAA preamble into data register
		//the preamble helps the receivers AFC circuit to lock onto the exact frequency
		//(hint: the tx FIFO [if el is enabled] is two staged, so we can safely write 2 bytes before starting)
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
     6ea:	8a ea       	ldi	r24, 0xAA	; 170
     6ec:	98 eb       	ldi	r25, 0xB8	; 184
     6ee:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
     6f2:	8a ea       	ldi	r24, 0xAA	; 170
     6f4:	98 eb       	ldi	r25, 0xB8	; 184
     6f6:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
		//set ET in power register to enable transmission (hint: TX starts now)
		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow |= RFM12_PWRMGT_ET;
			rfm12_data (ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT | RFM12_PWRMGT_ET);
     6fa:	81 e2       	ldi	r24, 0x21	; 33
     6fc:	92 e8       	ldi	r25, 0x82	; 130
     6fe:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
		#endif

		//enable the interrupt to continue the transmission
		RFM12_INT_ON();
     702:	ea 9a       	sbi	0x1d, 2	; 29
     704:	08 95       	ret

00000706 <rfm12_start_tx>:
#else
uint8_t
#endif
rfm12_start_tx(uint8_t type, uint8_t length) {
	//exit if the buffer isn't free
	if (ctrl.txstate != STATUS_FREE)
     706:	90 91 49 02 	lds	r25, 0x0249
     70a:	91 11       	cpse	r25, r1
     70c:	0d c0       	rjmp	.+26     	; 0x728 <rfm12_start_tx+0x22>
		return TXRETURN(RFM12_TX_OCCUPIED);

	//write airlab header to buffer
	rf_tx_buffer.len = length;
     70e:	60 93 9c 02 	sts	0x029C, r22
	rf_tx_buffer.type = type;
     712:	80 93 9d 02 	sts	0x029D, r24
	rf_tx_buffer.checksum = length ^ type ^ 0xff;
     716:	86 27       	eor	r24, r22
     718:	80 95       	com	r24
     71a:	80 93 9e 02 	sts	0x029E, r24

	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	80 93 49 02 	sts	0x0249, r24

	return TXRETURN(RFM12_TX_ENQUEUED);
     724:	80 e8       	ldi	r24, 0x80	; 128
     726:	08 95       	ret
uint8_t
#endif
rfm12_start_tx(uint8_t type, uint8_t length) {
	//exit if the buffer isn't free
	if (ctrl.txstate != STATUS_FREE)
		return TXRETURN(RFM12_TX_OCCUPIED);
     728:	83 e0       	ldi	r24, 0x03	; 3

	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;

	return TXRETURN(RFM12_TX_ENQUEUED);
}
     72a:	08 95       	ret

0000072c <rfm12_tx>:
	#if (RFM12_NORETURNS)
	void
	#else
	uint8_t
	#endif
	rfm12_tx(uint8_t len, uint8_t type, uint8_t *data) {
     72c:	cf 93       	push	r28
     72e:	df 93       	push	r29
     730:	c8 2f       	mov	r28, r24
     732:	d6 2f       	mov	r29, r22
     734:	ba 01       	movw	r22, r20
			uart_putstr ("sending packet\r\n");
		#endif
	//	printf("send");
	//	printf("%u", len);
	//	printf("%u", RFM12_TX_BUFFER_SIZE);
		if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);
     736:	8f 31       	cpi	r24, 0x1F	; 31
     738:	80 f4       	brcc	.+32     	; 0x75a <rfm12_tx+0x2e>

		//exit if the buffer isn't free
		if (ctrl.txstate != STATUS_FREE)
     73a:	80 91 49 02 	lds	r24, 0x0249
     73e:	81 11       	cpse	r24, r1
     740:	0e c0       	rjmp	.+28     	; 0x75e <rfm12_tx+0x32>
			return TXRETURN(RFM12_TX_OCCUPIED);

		memcpy(rf_tx_buffer.buffer, data, len);
     742:	4c 2f       	mov	r20, r28
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	8f e9       	ldi	r24, 0x9F	; 159
     748:	92 e0       	ldi	r25, 0x02	; 2
     74a:	0e 94 e5 09 	call	0x13ca	; 0x13ca <memcpy>

		#if (!(RFM12_NORETURNS))
		return rfm12_start_tx(type, len);
     74e:	6c 2f       	mov	r22, r28
     750:	8d 2f       	mov	r24, r29
		#else
		rfm12_start_tx(type, len);
		#endif
	}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
			return TXRETURN(RFM12_TX_OCCUPIED);

		memcpy(rf_tx_buffer.buffer, data, len);

		#if (!(RFM12_NORETURNS))
		return rfm12_start_tx(type, len);
     756:	0c 94 83 03 	jmp	0x706	; 0x706 <rfm12_start_tx>
			uart_putstr ("sending packet\r\n");
		#endif
	//	printf("send");
	//	printf("%u", len);
	//	printf("%u", RFM12_TX_BUFFER_SIZE);
		if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);
     75a:	82 e0       	ldi	r24, 0x02	; 2
     75c:	01 c0       	rjmp	.+2      	; 0x760 <rfm12_tx+0x34>

		//exit if the buffer isn't free
		if (ctrl.txstate != STATUS_FREE)
			return TXRETURN(RFM12_TX_OCCUPIED);
     75e:	83 e0       	ldi	r24, 0x03	; 3
		#if (!(RFM12_NORETURNS))
		return rfm12_start_tx(type, len);
		#else
		rfm12_start_tx(type, len);
		#endif
	}
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	08 95       	ret

00000766 <rfm12_rx_clear>:
	* \see rfm12_rx_status(), rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer() and rf_rx_buffers
	*/
	//warning: without the attribute, gcc will inline this even if -Os is set
	void __attribute__((noinline)) rfm12_rx_clear(void) {
			//mark the current buffer as empty
			rf_rx_buffers[ctrl.buffer_out_num].status = STATUS_FREE;
     766:	ad e4       	ldi	r26, 0x4D	; 77
     768:	b2 e0       	ldi	r27, 0x02	; 2
     76a:	9c 91       	ld	r25, X
     76c:	82 e2       	ldi	r24, 0x22	; 34
     76e:	98 9f       	mul	r25, r24
     770:	f0 01       	movw	r30, r0
     772:	11 24       	eor	r1, r1
     774:	ea 5a       	subi	r30, 0xAA	; 170
     776:	fd 4f       	sbci	r31, 0xFD	; 253
     778:	10 82       	st	Z, r1

			//switch to the other buffer
			ctrl.buffer_out_num ^= 1;
     77a:	81 e0       	ldi	r24, 0x01	; 1
     77c:	89 27       	eor	r24, r25
     77e:	8c 93       	st	X, r24
     780:	08 95       	ret

00000782 <rfm12_init>:
* puts the module into receive mode before returning.
*
* \note Please note that the transmit power and receive amplification values are currently hard coded.
* Have a look into rfm12_hw.h for possible settings.
*/
void rfm12_init(void) {
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
	//initialize spi
#ifdef __PLATFORM_AVR__
	SS_RELEASE();
     786:	2c 9a       	sbi	0x05, 4	; 5
	DDR_SS |= (1<<BIT_SS);
     788:	24 9a       	sbi	0x04, 4	; 4
		return d;
	#endif
}

static void spi_init(void) {
	DDR_MOSI |= (_BV(BIT_MOSI));
     78a:	25 9a       	sbi	0x04, 5	; 4
	DDR_SCK  |= (_BV(BIT_SCK));
     78c:	27 9a       	sbi	0x04, 7	; 4
	#if !(RFM12_SPI_SOFTWARE)
		PORT_SPI |= (_BV(BIT_SPI_SS));
     78e:	2c 9a       	sbi	0x05, 4	; 5
		DDR_SPI  |= (_BV(BIT_SPI_SS));
     790:	24 9a       	sbi	0x04, 4	; 4
	#endif

	DDR_MISO &= ~(_BV(BIT_MISO));
     792:	26 98       	cbi	0x04, 6	; 4

	#if !(RFM12_SPI_SOFTWARE)
		SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0); //SPI Master, clk/16
     794:	81 e5       	ldi	r24, 0x51	; 81
     796:	8c bd       	out	0x2c, r24	; 44
	#endif

	//store the syncronization pattern to the transmission buffer
	//the sync pattern is used by the receiver to distinguish noise from real transmissions
	//the sync pattern is hardcoded into the receiver
	rf_tx_buffer.sync[0] = SYNC_MSB;
     798:	8d e2       	ldi	r24, 0x2D	; 45
     79a:	80 93 9a 02 	sts	0x029A, r24
	rf_tx_buffer.sync[1] = SYNC_LSB;
     79e:	84 ed       	ldi	r24, 0xD4	; 212
     7a0:	80 93 9b 02 	sts	0x029B, r24

	//if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		//init buffer pointers
		ctrl.buffer_in_num = 0;
     7a4:	10 92 4c 02 	sts	0x024C, r1
		ctrl.buffer_out_num = 0;
     7a8:	10 92 4d 02 	sts	0x024D, r1
	#endif


	#if RFM12_LIVECTRL
		//init shadow registers with values about to be written to rfm12
		ctrl.rxctrl_shadow = RFM12_CMD_RXCTRL_DEFAULT;
     7ac:	8d e2       	ldi	r24, 0x2D	; 45
     7ae:	94 e9       	ldi	r25, 0x94	; 148
     7b0:	90 93 4f 02 	sts	0x024F, r25
     7b4:	80 93 4e 02 	sts	0x024E, r24
		ctrl.afc_shadow = RFM12_CMD_AFC_DEFAULT;
     7b8:	87 ef       	ldi	r24, 0xF7	; 247
     7ba:	94 ec       	ldi	r25, 0xC4	; 196
     7bc:	90 93 51 02 	sts	0x0251, r25
     7c0:	80 93 50 02 	sts	0x0250, r24
		ctrl.txconf_shadow = RFM12_CMD_TXCONF_DEFAULT;
     7c4:	80 e7       	ldi	r24, 0x70	; 112
     7c6:	98 e9       	ldi	r25, 0x98	; 152
     7c8:	90 93 53 02 	sts	0x0253, r25
     7cc:	80 93 52 02 	sts	0x0252, r24
		ctrl.cfg_shadow =    RFM12_CMD_CFG_DEFAULT;
     7d0:	86 ed       	ldi	r24, 0xD6	; 214
     7d2:	90 e8       	ldi	r25, 0x80	; 128
     7d4:	90 93 55 02 	sts	0x0255, r25
     7d8:	80 93 54 02 	sts	0x0254, r24
     7dc:	cc e7       	ldi	r28, 0x7C	; 124
     7de:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t x;

	#ifdef __PLATFORM_AVR__

		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
			rfm12_data(pgm_read_word(&init_cmds[x]));
     7e0:	fe 01       	movw	r30, r28
     7e2:	85 91       	lpm	r24, Z+
     7e4:	94 91       	lpm	r25, Z
     7e6:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
     7ea:	22 96       	adiw	r28, 0x02	; 2
	//write all the initialisation values to rfm12
	uint8_t x;

	#ifdef __PLATFORM_AVR__

		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	c4 39       	cpi	r28, 0x94	; 148
     7f0:	d8 07       	cpc	r29, r24
     7f2:	b1 f7       	brne	.-20     	; 0x7e0 <rfm12_init+0x5e>
		adc_init();
	#endif

	//setup interrupt for falling edge trigger
#ifdef __PLATFORM_AVR__
	RFM12_INT_SETUP();
     7f4:	80 91 69 00 	lds	r24, 0x0069
     7f8:	80 62       	ori	r24, 0x20	; 32
     7fa:	80 93 69 00 	sts	0x0069, r24
#endif

	//clear int flag
	rfm12_read(RFM12_CMD_STATUS);
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	0e 94 58 02 	call	0x4b0	; 0x4b0 <_ZL10rfm12_readj>

#ifdef __PLATFORM_AVR__
	RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
     806:	84 e0       	ldi	r24, 0x04	; 4
     808:	8c bb       	out	0x1c, r24	; 28
#endif

	//init receiver fifo, we now begin receiving.
	rfm12_data(CLEAR_FIFO);
     80a:	81 e8       	ldi	r24, 0x81	; 129
     80c:	9a ec       	ldi	r25, 0xCA	; 202
     80e:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>
	rfm12_data(ACCEPT_DATA);
     812:	83 e8       	ldi	r24, 0x83	; 131
     814:	9a ec       	ldi	r25, 0xCA	; 202
     816:	0e 94 4d 02 	call	0x49a	; 0x49a <_ZL10rfm12_dataj>

	//activate the interrupt
	RFM12_INT_ON();
     81a:	ea 9a       	sbi	0x1d, 2	; 29
}
     81c:	df 91       	pop	r29
     81e:	cf 91       	pop	r28
     820:	08 95       	ret

00000822 <_ZN5tfthwL3cmdEh>:
	data(orient);
}

static inline void tfthw::cmd(uint8_t dat)
{
	TFT_WCTRL &= ~TFT_RS;
     822:	14 98       	cbi	0x02, 4	; 2
	TFT_WDATA = dat;
     824:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
     826:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
     828:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RS;
     82a:	14 9a       	sbi	0x02, 4	; 2
     82c:	08 95       	ret

0000082e <_ZN5tfthwL8memWriteEv>:
	static inline void setBGLight(bool ctrl);
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
     82e:	8c e2       	ldi	r24, 0x2C	; 44
     830:	0c 94 11 04 	jmp	0x822	; 0x822 <_ZN5tfthwL3cmdEh>

00000834 <_ZN5tfthwL4dataEh>:
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
     834:	88 b9       	out	0x08, r24	; 8
	TFT_WCTRL &= ~TFT_WR;
     836:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
     838:	13 9a       	sbi	0x02, 3	; 2
     83a:	08 95       	ret

0000083c <_ZN5tfthwL7write16Ej>:
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
	static inline void write16(const uint16_t c) {write(c >> 8); write(c & 0xff);}
     83c:	cf 93       	push	r28
     83e:	c8 2f       	mov	r28, r24
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
     840:	89 2f       	mov	r24, r25
     842:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
     846:	8c 2f       	mov	r24, r28
	static inline void write16(const uint16_t c) {write(c >> 8); write(c & 0xff);}
     848:	cf 91       	pop	r28
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
     84a:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN5tfthwL4dataEh>

0000084e <_ZN5tfthwL4areaEjjjj>:
	memWrite();
	write16(c);
}

inline void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	6c 01       	movw	r12, r24
     860:	7b 01       	movw	r14, r22
     862:	ea 01       	movw	r28, r20
     864:	89 01       	movw	r16, r18
	using namespace tfthw;
	setColumn(x, x + w - 1);
     866:	21 97       	sbiw	r28, 0x01	; 1
     868:	c8 0f       	add	r28, r24
     86a:	d9 1f       	adc	r29, r25
}
#endif

static inline void tfthw::setColumn(const uint16_t start, const uint16_t end)
{
	cmd(0x2a);	// Set column address
     86c:	8a e2       	ldi	r24, 0x2A	; 42
     86e:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	write16(start);
     872:	c6 01       	movw	r24, r12
     874:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
	write16(end);
     878:	ce 01       	movw	r24, r28
     87a:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
	setPage(y, y + h - 1);
     87e:	01 50       	subi	r16, 0x01	; 1
     880:	11 09       	sbc	r17, r1
     882:	0e 0d       	add	r16, r14
     884:	1f 1d       	adc	r17, r15
}

static inline void tfthw::setPage(const uint16_t start, const uint16_t end)
{
	cmd(0x2b);	// Set page(row) address
     886:	8b e2       	ldi	r24, 0x2B	; 43
     888:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	write16(start);
     88c:	c7 01       	movw	r24, r14
     88e:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
	write16(end);
     892:	c8 01       	movw	r24, r16
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>

000008a8 <_ZN3tftL5pointEjjj>:
		next();
	}
}

inline void tft::point(uint16_t x, uint16_t y, uint16_t c)
{
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	ea 01       	movw	r28, r20
	using namespace tfthw;
	if (x >= width || y >= height)
     8ae:	20 91 c4 02 	lds	r18, 0x02C4
     8b2:	30 91 c5 02 	lds	r19, 0x02C5
     8b6:	82 17       	cp	r24, r18
     8b8:	93 07       	cpc	r25, r19
     8ba:	a0 f4       	brcc	.+40     	; 0x8e4 <_ZN3tftL5pointEjjj+0x3c>
     8bc:	20 91 c2 02 	lds	r18, 0x02C2
     8c0:	30 91 c3 02 	lds	r19, 0x02C3
     8c4:	62 17       	cp	r22, r18
     8c6:	73 07       	cpc	r23, r19
     8c8:	68 f4       	brcc	.+26     	; 0x8e4 <_ZN3tftL5pointEjjj+0x3c>
		return;
	area(x, y, 1, 1);
     8ca:	21 e0       	ldi	r18, 0x01	; 1
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	41 e0       	ldi	r20, 0x01	; 1
     8d0:	50 e0       	ldi	r21, 0x00	; 0
     8d2:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
	memWrite();
     8d6:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
	write16(c);
     8da:	ce 01       	movw	r24, r28
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
	using namespace tfthw;
	if (x >= width || y >= height)
		return;
	area(x, y, 1, 1);
	memWrite();
	write16(c);
     8e0:	0c 94 1e 04 	jmp	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
}
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <_ZN3tft7setFontEhh>:
	b = tmp;
}

bool tft::setFont(uint8_t w, uint8_t h)
{
	if (font->width == w && font->height == h)
     8ea:	e0 91 49 01 	lds	r30, 0x0149
     8ee:	f0 91 4a 01 	lds	r31, 0x014A
     8f2:	90 81       	ld	r25, Z
     8f4:	98 13       	cpse	r25, r24
     8f6:	03 c0       	rjmp	.+6      	; 0x8fe <_ZN3tft7setFontEhh+0x14>
     8f8:	91 81       	ldd	r25, Z+1	; 0x01
     8fa:	96 17       	cp	r25, r22
     8fc:	a9 f0       	breq	.+42     	; 0x928 <_ZN3tft7setFontEhh+0x3e>
	a = b;
	b = tmp;
}

bool tft::setFont(uint8_t w, uint8_t h)
{
     8fe:	e1 e5       	ldi	r30, 0x51	; 81
     900:	f1 e0       	ldi	r31, 0x01	; 1
	if (font->width == w && font->height == h)
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
     902:	30 97       	sbiw	r30, 0x00	; 0
     904:	79 f0       	breq	.+30     	; 0x924 <_ZN3tft7setFontEhh+0x3a>
		if (ptr->width == w && ptr->height == h) {
     906:	90 81       	ld	r25, Z
     908:	98 13       	cpse	r25, r24
     90a:	08 c0       	rjmp	.+16     	; 0x91c <_ZN3tft7setFontEhh+0x32>
     90c:	91 81       	ldd	r25, Z+1	; 0x01
     90e:	96 13       	cpse	r25, r22
     910:	05 c0       	rjmp	.+10     	; 0x91c <_ZN3tft7setFontEhh+0x32>
			font = ptr;
     912:	f0 93 4a 01 	sts	0x014A, r31
     916:	e0 93 49 01 	sts	0x0149, r30
     91a:	06 c0       	rjmp	.+12     	; 0x928 <_ZN3tft7setFontEhh+0x3e>
			return true;
		} else
			ptr = ptr->next;
     91c:	06 80       	ldd	r0, Z+6	; 0x06
     91e:	f7 81       	ldd	r31, Z+7	; 0x07
     920:	e0 2d       	mov	r30, r0
     922:	ef cf       	rjmp	.-34     	; 0x902 <_ZN3tft7setFontEhh+0x18>
	return false;
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	08 95       	ret
}

bool tft::setFont(uint8_t w, uint8_t h)
{
	if (font->width == w && font->height == h)
		return true;
     928:	81 e0       	ldi	r24, 0x01	; 1
			font = ptr;
			return true;
		} else
			ptr = ptr->next;
	return false;
}
     92a:	08 95       	ret

0000092c <_ZN3tft9rectangleEjjjjj>:
					(y0 > y1 ? -1 : 1), c);
	}
}

void tft::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
{
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	0f 93       	push	r16
     936:	1f 93       	push	r17
     938:	cf 93       	push	r28
     93a:	df 93       	push	r29
     93c:	ea 01       	movw	r28, r20
     93e:	79 01       	movw	r14, r18
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     940:	1c 16       	cp	r1, r28
     942:	1d 06       	cpc	r1, r29
     944:	0c f0       	brlt	.+2      	; 0x948 <_ZN3tft9rectangleEjjjjj+0x1c>
     946:	4d c0       	rjmp	.+154    	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
     948:	12 16       	cp	r1, r18
     94a:	13 06       	cpc	r1, r19
     94c:	0c f0       	brlt	.+2      	; 0x950 <_ZN3tft9rectangleEjjjjj+0x24>
     94e:	49 c0       	rjmp	.+146    	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
		goto draw;
	}

disp:
#endif
	if ((int16_t)x < 0) {
     950:	97 ff       	sbrs	r25, 7
     952:	04 c0       	rjmp	.+8      	; 0x95c <_ZN3tft9rectangleEjjjjj+0x30>
		w -= -(int16_t)x;
     954:	c8 0f       	add	r28, r24
     956:	d9 1f       	adc	r29, r25
		x = 0;
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
	}
	if ((int16_t)y < 0) {
     95c:	77 ff       	sbrs	r23, 7
     95e:	04 c0       	rjmp	.+8      	; 0x968 <_ZN3tft9rectangleEjjjjj+0x3c>
		h -= -(int16_t)y;
     960:	e6 0e       	add	r14, r22
     962:	f7 1e       	adc	r15, r23
		y = 0;
     964:	60 e0       	ldi	r22, 0x00	; 0
     966:	70 e0       	ldi	r23, 0x00	; 0
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     968:	1c 16       	cp	r1, r28
     96a:	1d 06       	cpc	r1, r29
     96c:	d4 f5       	brge	.+116    	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
     96e:	1e 14       	cp	r1, r14
     970:	1f 04       	cpc	r1, r15
     972:	bc f5       	brge	.+110    	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
		return;
	if (x + w > width)
     974:	20 91 c4 02 	lds	r18, 0x02C4
     978:	30 91 c5 02 	lds	r19, 0x02C5
     97c:	ac 01       	movw	r20, r24
     97e:	4c 0f       	add	r20, r28
     980:	5d 1f       	adc	r21, r29
     982:	24 17       	cp	r18, r20
     984:	35 07       	cpc	r19, r21
     986:	18 f4       	brcc	.+6      	; 0x98e <_ZN3tft9rectangleEjjjjj+0x62>
		w = width - x;
     988:	e9 01       	movw	r28, r18
     98a:	c8 1b       	sub	r28, r24
     98c:	d9 0b       	sbc	r29, r25
	if (y + h > height)
     98e:	20 91 c2 02 	lds	r18, 0x02C2
     992:	30 91 c3 02 	lds	r19, 0x02C3
     996:	ab 01       	movw	r20, r22
     998:	4e 0d       	add	r20, r14
     99a:	5f 1d       	adc	r21, r15
     99c:	24 17       	cp	r18, r20
     99e:	35 07       	cpc	r19, r21
     9a0:	18 f4       	brcc	.+6      	; 0x9a8 <_ZN3tft9rectangleEjjjjj+0x7c>
		h = height - y;
     9a2:	79 01       	movw	r14, r18
     9a4:	e6 1a       	sub	r14, r22
     9a6:	f7 0a       	sbc	r15, r23
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     9a8:	1c 16       	cp	r1, r28
     9aa:	1d 06       	cpc	r1, r29
     9ac:	d4 f4       	brge	.+52     	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
     9ae:	1e 14       	cp	r1, r14
     9b0:	1f 04       	cpc	r1, r15
     9b2:	bc f4       	brge	.+46     	; 0x9e2 <_ZN3tft9rectangleEjjjjj+0xb6>
		return;

	tfthw::area(x, y, w, h);
     9b4:	97 01       	movw	r18, r14
     9b6:	ae 01       	movw	r20, r28
     9b8:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
     9bc:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
		w -= -(int16_t)x;
		x = 0;
	}
	if ((int16_t)y < 0) {
		h -= -(int16_t)y;
		y = 0;
     9c0:	c1 2c       	mov	r12, r1
     9c2:	d1 2c       	mov	r13, r1
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
     9c4:	c8 01       	movw	r24, r16
     9c6:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
     9ca:	8f ef       	ldi	r24, 0xFF	; 255
     9cc:	c8 1a       	sub	r12, r24
     9ce:	d8 0a       	sbc	r13, r24
     9d0:	cc 16       	cp	r12, r28
     9d2:	dd 06       	cpc	r13, r29
     9d4:	b9 f7       	brne	.-18     	; 0x9c4 <_ZN3tft9rectangleEjjjjj+0x98>
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	e8 1a       	sub	r14, r24
     9da:	f1 08       	sbc	r15, r1
	tfthw::area(x, y, w, h);
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
     9dc:	e1 14       	cp	r14, r1
     9de:	f1 04       	cpc	r15, r1
     9e0:	79 f7       	brne	.-34     	; 0x9c0 <_ZN3tft9rectangleEjjjjj+0x94>
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	df 90       	pop	r13
     9f0:	cf 90       	pop	r12
     9f2:	08 95       	ret

000009f4 <_ZN3tft5frameEjjjjhj>:
	}
}

void tft::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
{
     9f4:	2f 92       	push	r2
     9f6:	3f 92       	push	r3
     9f8:	4f 92       	push	r4
     9fa:	5f 92       	push	r5
     9fc:	6f 92       	push	r6
     9fe:	7f 92       	push	r7
     a00:	8f 92       	push	r8
     a02:	9f 92       	push	r9
     a04:	af 92       	push	r10
     a06:	bf 92       	push	r11
     a08:	cf 92       	push	r12
     a0a:	df 92       	push	r13
     a0c:	ef 92       	push	r14
     a0e:	ff 92       	push	r15
     a10:	0f 93       	push	r16
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	6c 01       	movw	r12, r24
     a1a:	5b 01       	movw	r10, r22
     a1c:	2a 01       	movw	r4, r20
     a1e:	19 01       	movw	r2, r18
	rectangle(x, y, w - s, s, c);
     a20:	c0 2f       	mov	r28, r16
     a22:	d0 e0       	ldi	r29, 0x00	; 0
     a24:	3a 01       	movw	r6, r20
     a26:	6c 1a       	sub	r6, r28
     a28:	7d 0a       	sbc	r7, r29
     a2a:	87 01       	movw	r16, r14
     a2c:	9e 01       	movw	r18, r28
     a2e:	a3 01       	movw	r20, r6
     a30:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3tft9rectangleEjjjjj>
	rectangle(x + w - s, y, s, h - s, c);
     a34:	41 01       	movw	r8, r2
     a36:	8c 1a       	sub	r8, r28
     a38:	9d 0a       	sbc	r9, r29
     a3a:	c2 01       	movw	r24, r4
     a3c:	8c 0d       	add	r24, r12
     a3e:	9d 1d       	adc	r25, r13
     a40:	94 01       	movw	r18, r8
     a42:	ae 01       	movw	r20, r28
     a44:	b5 01       	movw	r22, r10
     a46:	8c 1b       	sub	r24, r28
     a48:	9d 0b       	sbc	r25, r29
     a4a:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3tft9rectangleEjjjjj>
	rectangle(x, y + s, s, h - s, c);
     a4e:	be 01       	movw	r22, r28
     a50:	6a 0d       	add	r22, r10
     a52:	7b 1d       	adc	r23, r11
     a54:	94 01       	movw	r18, r8
     a56:	ae 01       	movw	r20, r28
     a58:	c6 01       	movw	r24, r12
     a5a:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3tft9rectangleEjjjjj>
	rectangle(x + s, y + h - s, w - s, s, c);
     a5e:	b5 01       	movw	r22, r10
     a60:	62 0d       	add	r22, r2
     a62:	73 1d       	adc	r23, r3
     a64:	6c 1b       	sub	r22, r28
     a66:	7d 0b       	sbc	r23, r29
     a68:	9e 01       	movw	r18, r28
     a6a:	a3 01       	movw	r20, r6
     a6c:	ce 01       	movw	r24, r28
     a6e:	8c 0d       	add	r24, r12
     a70:	9d 1d       	adc	r25, r13
     a72:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3tft9rectangleEjjjjj>
}
     a76:	df 91       	pop	r29
     a78:	cf 91       	pop	r28
     a7a:	1f 91       	pop	r17
     a7c:	0f 91       	pop	r16
     a7e:	ff 90       	pop	r15
     a80:	ef 90       	pop	r14
     a82:	df 90       	pop	r13
     a84:	cf 90       	pop	r12
     a86:	bf 90       	pop	r11
     a88:	af 90       	pop	r10
     a8a:	9f 90       	pop	r9
     a8c:	8f 90       	pop	r8
     a8e:	7f 90       	pop	r7
     a90:	6f 90       	pop	r6
     a92:	5f 90       	pop	r5
     a94:	4f 90       	pop	r4
     a96:	3f 90       	pop	r3
     a98:	2f 90       	pop	r2
     a9a:	08 95       	ret

00000a9c <_ZN3tft4lineEjjjjj>:

void tft::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
{
     a9c:	4f 92       	push	r4
     a9e:	5f 92       	push	r5
     aa0:	6f 92       	push	r6
     aa2:	7f 92       	push	r7
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	ff 92       	push	r15
     ab4:	0f 93       	push	r16
     ab6:	1f 93       	push	r17
     ab8:	cf 93       	push	r28
     aba:	df 93       	push	r29
     abc:	ec 01       	movw	r28, r24
     abe:	7b 01       	movw	r14, r22
     ac0:	6a 01       	movw	r12, r20
     ac2:	59 01       	movw	r10, r18
	if (x0 > width)
     ac4:	80 91 c4 02 	lds	r24, 0x02C4
     ac8:	90 91 c5 02 	lds	r25, 0x02C5
     acc:	8c 17       	cp	r24, r28
     ace:	9d 07       	cpc	r25, r29
     ad0:	10 f4       	brcc	.+4      	; 0xad6 <_ZN3tft4lineEjjjjj+0x3a>
		x0 = width - 1;
     ad2:	ec 01       	movw	r28, r24
     ad4:	21 97       	sbiw	r28, 0x01	; 1
	if (x1 > width)
     ad6:	8c 15       	cp	r24, r12
     ad8:	9d 05       	cpc	r25, r13
     ada:	20 f4       	brcc	.+8      	; 0xae4 <_ZN3tft4lineEjjjjj+0x48>
		x1 = width - 1;
     adc:	6c 01       	movw	r12, r24
     ade:	21 e0       	ldi	r18, 0x01	; 1
     ae0:	c2 1a       	sub	r12, r18
     ae2:	d1 08       	sbc	r13, r1
	if (y0 > height)
     ae4:	80 91 c2 02 	lds	r24, 0x02C2
     ae8:	90 91 c3 02 	lds	r25, 0x02C3
     aec:	8e 15       	cp	r24, r14
     aee:	9f 05       	cpc	r25, r15
     af0:	20 f4       	brcc	.+8      	; 0xafa <_ZN3tft4lineEjjjjj+0x5e>
		y0 = height - 1;
     af2:	7c 01       	movw	r14, r24
     af4:	21 e0       	ldi	r18, 0x01	; 1
     af6:	e2 1a       	sub	r14, r18
     af8:	f1 08       	sbc	r15, r1
	if (y1 > height)
     afa:	8a 15       	cp	r24, r10
     afc:	9b 05       	cpc	r25, r11
     afe:	20 f4       	brcc	.+8      	; 0xb08 <_ZN3tft4lineEjjjjj+0x6c>
		y1 = height - 1;
     b00:	5c 01       	movw	r10, r24
     b02:	21 e0       	ldi	r18, 0x01	; 1
     b04:	a2 1a       	sub	r10, r18
     b06:	b1 08       	sbc	r11, r1
	if (x0 == x1) {
     b08:	cc 15       	cp	r28, r12
     b0a:	dd 05       	cpc	r29, r13
     b0c:	81 f4       	brne	.+32     	; 0xb2e <_ZN3tft4lineEjjjjj+0x92>
		if (y0 > y1)
     b0e:	ae 14       	cp	r10, r14
     b10:	bf 04       	cpc	r11, r15
     b12:	28 f4       	brcc	.+10     	; 0xb1e <_ZN3tft4lineEjjjjj+0x82>
     b14:	9e 2d       	mov	r25, r14
     b16:	8f 2d       	mov	r24, r15
     b18:	75 01       	movw	r14, r10
     b1a:	a9 2e       	mov	r10, r25
     b1c:	b8 2e       	mov	r11, r24
			swap(y0, y1);
		rectangle(x0, y0, 1, y1 - y0 + 1, c);
     b1e:	95 01       	movw	r18, r10
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	2e 19       	sub	r18, r14
     b26:	3f 09       	sbc	r19, r15
     b28:	41 e0       	ldi	r20, 0x01	; 1
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	12 c0       	rjmp	.+36     	; 0xb52 <_ZN3tft4lineEjjjjj+0xb6>
		return;
	}
	if (y0 == y1) {
     b2e:	ea 14       	cp	r14, r10
     b30:	fb 04       	cpc	r15, r11
     b32:	a1 f4       	brne	.+40     	; 0xb5c <_ZN3tft4lineEjjjjj+0xc0>
		if (x0 > x1)
     b34:	cc 16       	cp	r12, r28
     b36:	dd 06       	cpc	r13, r29
     b38:	28 f4       	brcc	.+10     	; 0xb44 <_ZN3tft4lineEjjjjj+0xa8>
     b3a:	9c 2f       	mov	r25, r28
     b3c:	8d 2f       	mov	r24, r29
     b3e:	e6 01       	movw	r28, r12
     b40:	c9 2e       	mov	r12, r25
     b42:	d8 2e       	mov	r13, r24
			swap(x0, x1);
		rectangle(x0, y0, x1 - x0 + 1, 1, c);
     b44:	a6 01       	movw	r20, r12
     b46:	4f 5f       	subi	r20, 0xFF	; 255
     b48:	5f 4f       	sbci	r21, 0xFF	; 255
     b4a:	4c 1b       	sub	r20, r28
     b4c:	5d 0b       	sbc	r21, r29
     b4e:	21 e0       	ldi	r18, 0x01	; 1
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	b7 01       	movw	r22, r14
     b54:	ce 01       	movw	r24, r28
     b56:	0e 94 96 04 	call	0x92c	; 0x92c <_ZN3tft9rectangleEjjjjj>
		return;
     b5a:	75 c0       	rjmp	.+234    	; 0xc46 <_ZN3tft4lineEjjjjj+0x1aa>
	}
	uint16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
     b5c:	46 01       	movw	r8, r12
     b5e:	8c 1a       	sub	r8, r28
     b60:	9d 0a       	sbc	r9, r29
     b62:	97 fe       	sbrs	r9, 7
     b64:	03 c0       	rjmp	.+6      	; 0xb6c <_ZN3tft4lineEjjjjj+0xd0>
     b66:	91 94       	neg	r9
     b68:	81 94       	neg	r8
     b6a:	91 08       	sbc	r9, r1
     b6c:	35 01       	movw	r6, r10
     b6e:	6e 18       	sub	r6, r14
     b70:	7f 08       	sbc	r7, r15
     b72:	77 fe       	sbrs	r7, 7
     b74:	03 c0       	rjmp	.+6      	; 0xb7c <_ZN3tft4lineEjjjjj+0xe0>
     b76:	71 94       	neg	r7
     b78:	61 94       	neg	r6
     b7a:	71 08       	sbc	r7, r1
	if (dx < dy) {
     b7c:	86 14       	cp	r8, r6
     b7e:	97 04       	cpc	r9, r7
     b80:	90 f5       	brcc	.+100    	; 0xbe6 <_ZN3tft4lineEjjjjj+0x14a>
		if (y0 > y1) {
     b82:	ae 14       	cp	r10, r14
     b84:	bf 04       	cpc	r11, r15
     b86:	50 f4       	brcc	.+20     	; 0xb9c <_ZN3tft4lineEjjjjj+0x100>
     b88:	9e 2d       	mov	r25, r14
     b8a:	8f 2d       	mov	r24, r15
     b8c:	75 01       	movw	r14, r10
     b8e:	a9 2e       	mov	r10, r25
     b90:	b8 2e       	mov	r11, r24
     b92:	9c 2f       	mov	r25, r28
     b94:	8d 2f       	mov	r24, r29
     b96:	e6 01       	movw	r28, r12
     b98:	c9 2e       	mov	r12, r25
     b9a:	d8 2e       	mov	r13, r24
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
     b9c:	41 2c       	mov	r4, r1
     b9e:	51 2c       	mov	r5, r1
     ba0:	ae 14       	cp	r10, r14
     ba2:	bf 04       	cpc	r11, r15
     ba4:	08 f4       	brcc	.+2      	; 0xba8 <_ZN3tft4lineEjjjjj+0x10c>
     ba6:	4f c0       	rjmp	.+158    	; 0xc46 <_ZN3tft4lineEjjjjj+0x1aa>
			point(x0 + dx * (y - y0) / dy * \
     ba8:	c2 01       	movw	r24, r4
     baa:	b3 01       	movw	r22, r6
     bac:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>
     bb0:	cc 16       	cp	r12, r28
     bb2:	dd 06       	cpc	r13, r29
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <_ZN3tft4lineEjjjjj+0x120>
     bb6:	2f ef       	ldi	r18, 0xFF	; 255
     bb8:	3f ef       	ldi	r19, 0xFF	; 255
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <_ZN3tft4lineEjjjjj+0x124>
     bbc:	21 e0       	ldi	r18, 0x01	; 1
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	26 9f       	mul	r18, r22
     bc2:	c0 01       	movw	r24, r0
     bc4:	27 9f       	mul	r18, r23
     bc6:	90 0d       	add	r25, r0
     bc8:	36 9f       	mul	r19, r22
     bca:	90 0d       	add	r25, r0
     bcc:	11 24       	eor	r1, r1
					(x0 > x1 ? -1 : 1), y, c);
     bce:	a8 01       	movw	r20, r16
     bd0:	b7 01       	movw	r22, r14
     bd2:	8c 0f       	add	r24, r28
     bd4:	9d 1f       	adc	r25, r29
     bd6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN3tftL5pointEjjj>
	if (dx < dy) {
		if (y0 > y1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	e8 1a       	sub	r14, r24
     bde:	f8 0a       	sbc	r15, r24
     be0:	48 0c       	add	r4, r8
     be2:	59 1c       	adc	r5, r9
     be4:	dd cf       	rjmp	.-70     	; 0xba0 <_ZN3tft4lineEjjjjj+0x104>
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
	} else {
		if (x0 > x1) {
     be6:	cc 16       	cp	r12, r28
     be8:	dd 06       	cpc	r13, r29
     bea:	50 f4       	brcc	.+20     	; 0xc00 <_ZN3tft4lineEjjjjj+0x164>
     bec:	9e 2d       	mov	r25, r14
     bee:	8f 2d       	mov	r24, r15
     bf0:	75 01       	movw	r14, r10
     bf2:	a9 2e       	mov	r10, r25
     bf4:	b8 2e       	mov	r11, r24
     bf6:	9c 2f       	mov	r25, r28
     bf8:	8d 2f       	mov	r24, r29
     bfa:	e6 01       	movw	r28, r12
     bfc:	c9 2e       	mov	r12, r25
     bfe:	d8 2e       	mov	r13, r24
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
     c00:	41 2c       	mov	r4, r1
     c02:	51 2c       	mov	r5, r1
     c04:	cc 16       	cp	r12, r28
     c06:	dd 06       	cpc	r13, r29
     c08:	f0 f0       	brcs	.+60     	; 0xc46 <_ZN3tft4lineEjjjjj+0x1aa>
			point(x, y0 + dy * (x - x0) / dx * \
     c0a:	c2 01       	movw	r24, r4
     c0c:	b4 01       	movw	r22, r8
     c0e:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>
     c12:	ae 14       	cp	r10, r14
     c14:	bf 04       	cpc	r11, r15
     c16:	18 f4       	brcc	.+6      	; 0xc1e <_ZN3tft4lineEjjjjj+0x182>
     c18:	2f ef       	ldi	r18, 0xFF	; 255
     c1a:	3f ef       	ldi	r19, 0xFF	; 255
     c1c:	02 c0       	rjmp	.+4      	; 0xc22 <_ZN3tft4lineEjjjjj+0x186>
     c1e:	21 e0       	ldi	r18, 0x01	; 1
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	26 9f       	mul	r18, r22
     c24:	c0 01       	movw	r24, r0
     c26:	27 9f       	mul	r18, r23
     c28:	90 0d       	add	r25, r0
     c2a:	36 9f       	mul	r19, r22
     c2c:	90 0d       	add	r25, r0
     c2e:	11 24       	eor	r1, r1
					(y0 > y1 ? -1 : 1), c);
     c30:	8e 0d       	add	r24, r14
     c32:	9f 1d       	adc	r25, r15
     c34:	a8 01       	movw	r20, r16
     c36:	bc 01       	movw	r22, r24
     c38:	ce 01       	movw	r24, r28
     c3a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <_ZN3tftL5pointEjjj>
	} else {
		if (x0 > x1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
     c3e:	21 96       	adiw	r28, 0x01	; 1
     c40:	46 0c       	add	r4, r6
     c42:	57 1c       	adc	r5, r7
     c44:	df cf       	rjmp	.-66     	; 0xc04 <_ZN3tft4lineEjjjjj+0x168>
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}
     c46:	df 91       	pop	r29
     c48:	cf 91       	pop	r28
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	cf 90       	pop	r12
     c56:	bf 90       	pop	r11
     c58:	af 90       	pop	r10
     c5a:	9f 90       	pop	r9
     c5c:	8f 90       	pop	r8
     c5e:	7f 90       	pop	r7
     c60:	6f 90       	pop	r6
     c62:	5f 90       	pop	r5
     c64:	4f 90       	pop	r4
     c66:	08 95       	ret

00000c68 <_ZN3tft9setOrientEh>:
			tfthw::write16(c);
}

void tft::setOrient(uint8_t o)
{
	width = TFT_SIZE_WIDTH;
     c68:	20 e4       	ldi	r18, 0x40	; 64
     c6a:	31 e0       	ldi	r19, 0x01	; 1
     c6c:	30 93 c5 02 	sts	0x02C5, r19
     c70:	20 93 c4 02 	sts	0x02C4, r18
	height = TFT_SIZE_HEIGHT;
     c74:	40 ef       	ldi	r20, 0xF0	; 240
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	50 93 c3 02 	sts	0x02C3, r21
     c7c:	40 93 c2 02 	sts	0x02C2, r20
	if (o & Portrait)
     c80:	68 2f       	mov	r22, r24
     c82:	61 70       	andi	r22, 0x01	; 1
     c84:	80 ff       	sbrs	r24, 0
     c86:	08 c0       	rjmp	.+16     	; 0xc98 <_ZN3tft9setOrientEh+0x30>

template <typename Type>
inline void tft::swap(Type &a, Type &b)
{
	Type tmp = a;
	a = b;
     c88:	50 93 c5 02 	sts	0x02C5, r21
     c8c:	40 93 c4 02 	sts	0x02C4, r20
	b = tmp;
     c90:	30 93 c3 02 	sts	0x02C3, r19
     c94:	20 93 c2 02 	sts	0x02C2, r18
{
	width = TFT_SIZE_WIDTH;
	height = TFT_SIZE_HEIGHT;
	if (o & Portrait)
		swap(width, height);
	x = 0;
     c98:	10 92 c9 02 	sts	0x02C9, r1
     c9c:	10 92 c8 02 	sts	0x02C8, r1
	y = 0;
     ca0:	10 92 c7 02 	sts	0x02C7, r1
     ca4:	10 92 c6 02 	sts	0x02C6, r1
	orient = o;
     ca8:	80 93 cb 02 	sts	0x02CB, r24
{
	using namespace tft;
	static const uint8_t base = 0x08;
	static const uint8_t MY = 1U << 7, MX = 1U << 6, MV = 1U << 5;
	static uint8_t orient;
	orient = o & Portrait ?  base | MX : base | MV;
     cac:	66 23       	and	r22, r22
     cae:	11 f0       	breq	.+4      	; 0xcb4 <_ZN3tft9setOrientEh+0x4c>
     cb0:	28 e4       	ldi	r18, 0x48	; 72
     cb2:	01 c0       	rjmp	.+2      	; 0xcb6 <_ZN3tft9setOrientEh+0x4e>
     cb4:	28 e2       	ldi	r18, 0x28	; 40
	if (o & Flipped)
     cb6:	81 fd       	sbrc	r24, 1
     cb8:	03 c0       	rjmp	.+6      	; 0xcc0 <_ZN3tft9setOrientEh+0x58>
{
	using namespace tft;
	static const uint8_t base = 0x08;
	static const uint8_t MY = 1U << 7, MX = 1U << 6, MV = 1U << 5;
	static uint8_t orient;
	orient = o & Portrait ?  base | MX : base | MV;
     cba:	20 93 cf 02 	sts	0x02CF, r18
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <_ZN3tft9setOrientEh+0x60>
	if (o & Flipped)
		orient ^= MY | MX;
     cc0:	90 ec       	ldi	r25, 0xC0	; 192
     cc2:	92 27       	eor	r25, r18
     cc4:	90 93 cf 02 	sts	0x02CF, r25
	if (o & BMPMode)
     cc8:	82 ff       	sbrs	r24, 2
     cca:	0a c0       	rjmp	.+20     	; 0xce0 <_ZN3tft9setOrientEh+0x78>
		orient ^= o & Portrait ? MY : MX;
     ccc:	90 91 cf 02 	lds	r25, 0x02CF
     cd0:	66 23       	and	r22, r22
     cd2:	11 f0       	breq	.+4      	; 0xcd8 <_ZN3tft9setOrientEh+0x70>
     cd4:	80 e8       	ldi	r24, 0x80	; 128
     cd6:	01 c0       	rjmp	.+2      	; 0xcda <_ZN3tft9setOrientEh+0x72>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	89 27       	eor	r24, r25
     cdc:	80 93 cf 02 	sts	0x02CF, r24
	cmd(0x36);			// Memory Access Control
     ce0:	86 e3       	ldi	r24, 0x36	; 54
     ce2:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	data(orient);
     ce6:	80 91 cf 02 	lds	r24, 0x02CF
     cea:	0c 94 1a 04 	jmp	0x834	; 0x834 <_ZN5tfthwL4dataEh>

00000cee <_ZN3tft4initEv>:
			write16(background);
}
#endif

void tft::init()
{
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
static inline void tfthw::init()
{
	uint8_t c;
	uint16_t r;

	if (TFT_WCTRL == PORTC || TFT_WDATA == PORTC) {
     cf4:	92 b1       	in	r25, 0x02	; 2
     cf6:	88 b1       	in	r24, 0x08	; 8
     cf8:	98 17       	cp	r25, r24
     cfa:	09 f4       	brne	.+2      	; 0xcfe <_ZN3tft4initEv+0x10>
     cfc:	8c c0       	rjmp	.+280    	; 0xe16 <_ZN3tft4initEv+0x128>
     cfe:	98 b1       	in	r25, 0x08	; 8
     d00:	88 b1       	in	r24, 0x08	; 8
     d02:	98 17       	cp	r25, r24
     d04:	09 f4       	brne	.+2      	; 0xd08 <_ZN3tft4initEv+0x1a>
     d06:	87 c0       	rjmp	.+270    	; 0xe16 <_ZN3tft4initEv+0x128>
		MCUCR |= 0x80;			// Disable JTAG
		MCUCR |= 0x80;
	}

	TFT_PCTRL = 0xFF & ~TFT_FMK;
     d08:	8f e7       	ldi	r24, 0x7F	; 127
     d0a:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
     d0c:	8d ef       	ldi	r24, 0xFD	; 253
     d0e:	82 b9       	out	0x02, r24	; 2
}

static inline void tfthw::mode(bool read)
{
	if (read) {
		TFT_PDATA = 0x00;
     d10:	17 b8       	out	0x07, r1	; 7
		TFT_WDATA = 0xFF;
     d12:	8f ef       	ldi	r24, 0xFF	; 255
     d14:	88 b9       	out	0x08, r24	; 8

	TFT_PCTRL = 0xFF & ~TFT_FMK;
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
	mode(true);			// Read mode

	TFT_WCTRL &= ~TFT_RST;	// Hardware reset
     d16:	12 98       	cbi	0x02, 2	; 2
	TFT_WCTRL &= ~TFT_CS;
     d18:	10 98       	cbi	0x02, 0	; 2
	TFT_WCTRL |= TFT_WR;
     d1a:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RD;
     d1c:	15 9a       	sbi	0x02, 5	; 2
	TFT_WCTRL |= TFT_RS;
     d1e:	14 9a       	sbi	0x02, 4	; 2
	TFT_WCTRL |= TFT_VSY;
     d20:	16 9a       	sbi	0x02, 6	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d22:	28 e2       	ldi	r18, 0x28	; 40
     d24:	2a 95       	dec	r18
     d26:	f1 f7       	brne	.-4      	; 0xd24 <_ZN3tft4initEv+0x36>
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
     d28:	12 9a       	sbi	0x02, 2	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d2a:	8f ef       	ldi	r24, 0xFF	; 255
     d2c:	94 e6       	ldi	r25, 0x64	; 100
     d2e:	24 e0       	ldi	r18, 0x04	; 4
     d30:	81 50       	subi	r24, 0x01	; 1
     d32:	90 40       	sbci	r25, 0x00	; 0
     d34:	20 40       	sbci	r18, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <_ZN3tft4initEv+0x42>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <_ZN3tft4initEv+0x4c>
     d3a:	00 00       	nop
{
	if (read) {
		TFT_PDATA = 0x00;
		TFT_WDATA = 0xFF;
	} else
		TFT_PDATA = 0xFF;
     d3c:	8f ef       	ldi	r24, 0xFF	; 255
     d3e:	87 b9       	out	0x07, r24	; 7
	TFT_WCTRL |= TFT_VSY;
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
	_delay_ms(120);
	mode(false);		// Write mode
	cmd(0x28);		// Display OFF
     d40:	88 e2       	ldi	r24, 0x28	; 40
     d42:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	cmd(0x11);		// Sleep Out
     d46:	81 e1       	ldi	r24, 0x11	; 17
     d48:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
     d4c:	8f ef       	ldi	r24, 0xFF	; 255
     d4e:	94 e6       	ldi	r25, 0x64	; 100
     d50:	24 e0       	ldi	r18, 0x04	; 4
     d52:	81 50       	subi	r24, 0x01	; 1
     d54:	90 40       	sbci	r25, 0x00	; 0
     d56:	20 40       	sbci	r18, 0x00	; 0
     d58:	e1 f7       	brne	.-8      	; 0xd52 <_ZN3tft4initEv+0x64>
     d5a:	00 c0       	rjmp	.+0      	; 0xd5c <_ZN3tft4initEv+0x6e>
     d5c:	00 00       	nop
	_delay_ms(120);
	cmd(0x34);		// Tearing Effect Line OFF
     d5e:	84 e3       	ldi	r24, 0x34	; 52
     d60:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	cmd(0x38);		// Idle Mode OFF
     d64:	88 e3       	ldi	r24, 0x38	; 56
     d66:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	cmd(0x13);		// Normal Display Mode ON
     d6a:	83 e1       	ldi	r24, 0x13	; 19
     d6c:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	cmd(0x20);		// Display Inversion OFF
     d70:	80 e2       	ldi	r24, 0x20	; 32
     d72:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	cmd(0x3A);		// COLMOD: Pixel Format Set
     d76:	8a e3       	ldi	r24, 0x3A	; 58
     d78:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	data(0x55);		// 16 bits/pixel
     d7c:	85 e5       	ldi	r24, 0x55	; 85
     d7e:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	cmd(0x36);		// Memory Access Control
     d82:	86 e3       	ldi	r24, 0x36	; 54
     d84:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	data(0x48);		// Column Adress Order, BGR
     d88:	88 e4       	ldi	r24, 0x48	; 72
     d8a:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	cmd(0x2C);		// Memory Write
     d8e:	8c e2       	ldi	r24, 0x2C	; 44
     d90:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
     d94:	c0 e4       	ldi	r28, 0x40	; 64
     d96:	d1 e0       	ldi	r29, 0x01	; 1
     d98:	10 ef       	ldi	r17, 0xF0	; 240
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
			data(0x00);
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
			data(0x00);
     da0:	80 e0       	ldi	r24, 0x00	; 0
     da2:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
     da6:	11 50       	subi	r17, 0x01	; 1
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
     da8:	c1 f7       	brne	.-16     	; 0xd9a <_ZN3tft4initEv+0xac>
     daa:	21 97       	sbiw	r28, 0x01	; 1
	cmd(0x3A);		// COLMOD: Pixel Format Set
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
	for (r = 0; r < 320; r++)	// Black screen
     dac:	20 97       	sbiw	r28, 0x00	; 0
     dae:	a1 f7       	brne	.-24     	; 0xd98 <_ZN3tft4initEv+0xaa>
		for (c = 0; c < 240; c++) {
			data(0x00);
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
     db0:	81 eb       	ldi	r24, 0xB1	; 177
     db2:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	data(0x00);		// Faster
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	data(0x18);
     dbc:	88 e1       	ldi	r24, 0x18	; 24
     dbe:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	cmd(0xB3);		// Frame Rate control, partial
     dc2:	83 eb       	ldi	r24, 0xB3	; 179
     dc4:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	data(0x00);		// Faster
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	data(0x18);
     dce:	88 e1       	ldi	r24, 0x18	; 24
     dd0:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
	cmd(0x29);		// Display On
     dd4:	89 e2       	ldi	r24, 0x29	; 41
     dd6:	0e 94 11 04 	call	0x822	; 0x822 <_ZN5tfthwL3cmdEh>
	tfthw::init();
	x = 0;
     dda:	10 92 c9 02 	sts	0x02C9, r1
     dde:	10 92 c8 02 	sts	0x02C8, r1
	y = 0;
     de2:	10 92 c7 02 	sts	0x02C7, r1
     de6:	10 92 c6 02 	sts	0x02C6, r1
	d.vsp = vsMaximum();
	setTopMask(0);
	setBottomMask(0);
	setTransform(false);
#endif
	zoom = 1;
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	80 93 cc 02 	sts	0x02CC, r24
	setOrient(TFT_DEF_ORIENT);
     df0:	0e 94 34 06 	call	0xc68	; 0xc68 <_ZN3tft9setOrientEh>
	tabSize = 4;
     df4:	84 e0       	ldi	r24, 0x04	; 4
     df6:	80 93 ca 02 	sts	0x02CA, r24
	//width = SIZE_W;
	//height = SIZE_H;
	foreground = DEF_FGC;
     dfa:	8f ef       	ldi	r24, 0xFF	; 255
     dfc:	9f ef       	ldi	r25, 0xFF	; 255
     dfe:	90 93 c1 02 	sts	0x02C1, r25
     e02:	80 93 c0 02 	sts	0x02C0, r24
	background = DEF_BGC;
     e06:	10 92 bf 02 	sts	0x02BF, r1
     e0a:	10 92 be 02 	sts	0x02BE, r1
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	1f 91       	pop	r17
     e14:	08 95       	ret
{
	uint8_t c;
	uint16_t r;

	if (TFT_WCTRL == PORTC || TFT_WDATA == PORTC) {
		MCUCR |= 0x80;			// Disable JTAG
     e16:	85 b7       	in	r24, 0x35	; 53
     e18:	80 68       	ori	r24, 0x80	; 128
     e1a:	85 bf       	out	0x35, r24	; 53
		MCUCR |= 0x80;
     e1c:	85 b7       	in	r24, 0x35	; 53
     e1e:	80 68       	ori	r24, 0x80	; 128
     e20:	85 bf       	out	0x35, r24	; 53
     e22:	72 cf       	rjmp	.-284    	; 0xd08 <_ZN3tft4initEv+0x1a>

00000e24 <_ZN3tft8drawCharEc>:
#endif
	}
}

void tft::drawChar(char ch)
{
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	08 2f       	mov	r16, r24
	using namespace tfthw;
#ifdef TFT_CHECKING
	if ((int16_t)x() >= (int16_t)width() || (int16_t)y() >= (int16_t)height())
		return;
#endif
	if ((int16_t)(x + FONT_WIDTH * zoom) < 0)
     e36:	e0 91 c8 02 	lds	r30, 0x02C8
     e3a:	f0 91 c9 02 	lds	r31, 0x02C9
     e3e:	a0 91 49 01 	lds	r26, 0x0149
     e42:	b0 91 4a 01 	lds	r27, 0x014A
     e46:	ec 90       	ld	r14, X
     e48:	90 91 cc 02 	lds	r25, 0x02CC
     e4c:	9f 01       	movw	r18, r30
     e4e:	e9 9e       	mul	r14, r25
     e50:	20 0d       	add	r18, r0
     e52:	31 1d       	adc	r19, r1
     e54:	11 24       	eor	r1, r1
     e56:	37 fd       	sbrc	r19, 7
     e58:	54 c0       	rjmp	.+168    	; 0xf02 <_ZN3tft8drawCharEc+0xde>
		return;
	uint8_t h = FONT_HEIGHT * zoom, w = FONT_WIDTH * zoom;
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	fc 90       	ld	r15, X
     e5e:	9f 9d       	mul	r25, r15
     e60:	f0 2c       	mov	r15, r0
     e62:	11 24       	eor	r1, r1
     e64:	9e 9d       	mul	r25, r14
     e66:	e0 2c       	mov	r14, r0
     e68:	11 24       	eor	r1, r1
	bool yTransform = transform() && portrait() && yy < bottomEdge() && yy + yStop - yStart > bottomEdge();
	uint8_t xEnd = xTransform ? bottomEdge() - xx : xStop;
draw:
	area(xx, yy, xEnd - xStart, h);
#else
	area(x, y, w, h);
     e6a:	2f 2d       	mov	r18, r15
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4e 2d       	mov	r20, r14
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	60 91 c6 02 	lds	r22, 0x02C6
     e76:	70 91 c7 02 	lds	r23, 0x02C7
     e7a:	cf 01       	movw	r24, r30
     e7c:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
#endif
	memWrite();
     e80:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     e84:	d1 2c       	mov	r13, r1
		unsigned char c;
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
     e86:	10 e0       	ldi	r17, 0x00	; 0
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     e88:	df 14       	cp	r13, r15
     e8a:	d9 f1       	breq	.+118    	; 0xf02 <_ZN3tft8drawCharEc+0xde>
		unsigned char c;
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
     e8c:	e0 91 49 01 	lds	r30, 0x0149
     e90:	f0 91 4a 01 	lds	r31, 0x014A
     e94:	60 91 cc 02 	lds	r22, 0x02CC
     e98:	8d 2d       	mov	r24, r13
     e9a:	0e 94 b1 09 	call	0x1362	; 0x1362 <__udivmodqi4>
     e9e:	93 81       	ldd	r25, Z+3	; 0x03
     ea0:	a8 01       	movw	r20, r16
     ea2:	49 1b       	sub	r20, r25
     ea4:	51 09       	sbc	r21, r1
     ea6:	92 81       	ldd	r25, Z+2	; 0x02
     ea8:	94 9f       	mul	r25, r20
     eaa:	90 01       	movw	r18, r0
     eac:	95 9f       	mul	r25, r21
     eae:	30 0d       	add	r19, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	28 0f       	add	r18, r24
     eb4:	31 1d       	adc	r19, r1
     eb6:	04 80       	ldd	r0, Z+4	; 0x04
     eb8:	f5 81       	ldd	r31, Z+5	; 0x05
     eba:	e0 2d       	mov	r30, r0
     ebc:	e2 0f       	add	r30, r18
     ebe:	f3 1f       	adc	r31, r19
     ec0:	c4 90       	lpm	r12, Z
		for (uint8_t xi = 0; xi < w; xi++) {
     ec2:	c1 e0       	ldi	r28, 0x01	; 1
     ec4:	d0 e0       	ldi	r29, 0x00	; 0
     ec6:	8c 2f       	mov	r24, r28
     ec8:	81 50       	subi	r24, 0x01	; 1
     eca:	8e 15       	cp	r24, r14
     ecc:	c0 f4       	brcc	.+48     	; 0xefe <_ZN3tft8drawCharEc+0xda>
#endif
			if (c & 0x80)
     ece:	c7 fe       	sbrs	r12, 7
     ed0:	05 c0       	rjmp	.+10     	; 0xedc <_ZN3tft8drawCharEc+0xb8>
				write16(foreground);
     ed2:	80 91 c0 02 	lds	r24, 0x02C0
     ed6:	90 91 c1 02 	lds	r25, 0x02C1
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <_ZN3tft8drawCharEc+0xc0>
			else
				write16(background);
     edc:	80 91 be 02 	lds	r24, 0x02BE
     ee0:	90 91 bf 02 	lds	r25, 0x02BF
     ee4:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
			if ((xi + 1) % zoom == 0)
     ee8:	60 91 cc 02 	lds	r22, 0x02CC
     eec:	70 e0       	ldi	r23, 0x00	; 0
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 d1 09 	call	0x13a2	; 0x13a2 <__divmodhi4>
     ef4:	89 2b       	or	r24, r25
     ef6:	09 f4       	brne	.+2      	; 0xefa <_ZN3tft8drawCharEc+0xd6>
				c <<= 1;
     ef8:	cc 0c       	add	r12, r12
     efa:	21 96       	adiw	r28, 0x01	; 1
     efc:	e4 cf       	rjmp	.-56     	; 0xec6 <_ZN3tft8drawCharEc+0xa2>
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
     efe:	d3 94       	inc	r13
     f00:	c3 cf       	rjmp	.-122    	; 0xe88 <_ZN3tft8drawCharEc+0x64>
		xTransform = false;
		goto draw;
	}
#endif
#endif
}
     f02:	df 91       	pop	r29
     f04:	cf 91       	pop	r28
     f06:	1f 91       	pop	r17
     f08:	0f 91       	pop	r16
     f0a:	ff 90       	pop	r15
     f0c:	ef 90       	pop	r14
     f0e:	df 90       	pop	r13
     f10:	cf 90       	pop	r12
     f12:	08 95       	ret

00000f14 <_ZN3tft10drawImage2EPKhjjjjb>:

void tft::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
     f14:	9f 92       	push	r9
     f16:	af 92       	push	r10
     f18:	bf 92       	push	r11
     f1a:	cf 92       	push	r12
     f1c:	df 92       	push	r13
     f1e:	ef 92       	push	r14
     f20:	ff 92       	push	r15
     f22:	0f 93       	push	r16
     f24:	1f 93       	push	r17
     f26:	cf 93       	push	r28
     f28:	df 93       	push	r29
     f2a:	ec 01       	movw	r28, r24
     f2c:	cb 01       	movw	r24, r22
     f2e:	ba 01       	movw	r22, r20
     f30:	69 01       	movw	r12, r18
#endif

#ifdef TFT_VERTICAL_SCROLLING
disp:
#endif
	area(x, y, w, h);
     f32:	98 01       	movw	r18, r16
     f34:	a6 01       	movw	r20, r12
     f36:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
	memWrite();
     f3a:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     f3e:	a1 2c       	mov	r10, r1
}

void tft::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
	using namespace tfthw;
	uint8_t i = 0, c = 0;
     f40:	f1 2c       	mov	r15, r1
     f42:	20 e0       	ldi	r18, 0x00	; 0
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     f44:	8a 2d       	mov	r24, r10
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	80 17       	cp	r24, r16
     f4a:	91 07       	cpc	r25, r17
     f4c:	78 f5       	brcc	.+94     	; 0xfac <_ZN3tft10drawImage2EPKhjjjjb+0x98>
     f4e:	b1 2c       	mov	r11, r1
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
     f50:	8b 2d       	mov	r24, r11
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	8c 15       	cp	r24, r12
     f56:	9d 05       	cpc	r25, r13
     f58:	38 f5       	brcc	.+78     	; 0xfa8 <_ZN3tft10drawImage2EPKhjjjjb+0x94>
			if (i++ == 0)
     f5a:	99 24       	eor	r9, r9
     f5c:	93 94       	inc	r9
     f5e:	92 0e       	add	r9, r18
     f60:	21 11       	cpse	r18, r1
     f62:	0c c0       	rjmp	.+24     	; 0xf7c <_ZN3tft10drawImage2EPKhjjjjb+0x68>
     f64:	ce 01       	movw	r24, r28
     f66:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
     f68:	ee 20       	and	r14, r14
     f6a:	31 f0       	breq	.+12     	; 0xf78 <_ZN3tft10drawImage2EPKhjjjjb+0x64>
     f6c:	28 2f       	mov	r18, r24
     f6e:	fe 01       	movw	r30, r28
     f70:	f4 90       	lpm	r15, Z
     f72:	c2 2f       	mov	r28, r18
     f74:	d9 2f       	mov	r29, r25
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <_ZN3tft10drawImage2EPKhjjjjb+0x68>
     f78:	f8 80       	ld	r15, Y
     f7a:	ec 01       	movw	r28, r24
			if (c & 0x80)
     f7c:	f7 fe       	sbrs	r15, 7
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <_ZN3tft10drawImage2EPKhjjjjb+0x76>
				write16(foreground);
     f80:	80 91 c0 02 	lds	r24, 0x02C0
     f84:	90 91 c1 02 	lds	r25, 0x02C1
     f88:	04 c0       	rjmp	.+8      	; 0xf92 <_ZN3tft10drawImage2EPKhjjjjb+0x7e>
			else
				write16(background);
     f8a:	80 91 be 02 	lds	r24, 0x02BE
     f8e:	90 91 bf 02 	lds	r25, 0x02BF
     f92:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
			if (i == 8)
     f96:	f8 e0       	ldi	r31, 0x08	; 8
     f98:	9f 16       	cp	r9, r31
     f9a:	11 f0       	breq	.+4      	; 0xfa0 <_ZN3tft10drawImage2EPKhjjjjb+0x8c>
				i = 0;
			else
				c <<= 1;
     f9c:	ff 0c       	add	r15, r15
     f9e:	01 c0       	rjmp	.+2      	; 0xfa2 <_ZN3tft10drawImage2EPKhjjjjb+0x8e>
			if (c & 0x80)
				write16(foreground);
			else
				write16(background);
			if (i == 8)
				i = 0;
     fa0:	91 2c       	mov	r9, r1
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
     fa2:	b3 94       	inc	r11
     fa4:	29 2d       	mov	r18, r9
     fa6:	d4 cf       	rjmp	.-88     	; 0xf50 <_ZN3tft10drawImage2EPKhjjjjb+0x3c>
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
     fa8:	a3 94       	inc	r10
     faa:	cc cf       	rjmp	.-104    	; 0xf44 <_ZN3tft10drawImage2EPKhjjjjb+0x30>
				i = 0;
			else
				c <<= 1;
		}
	}
}
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	df 90       	pop	r13
     fba:	cf 90       	pop	r12
     fbc:	bf 90       	pop	r11
     fbe:	af 90       	pop	r10
     fc0:	9f 90       	pop	r9
     fc2:	08 95       	ret

00000fc4 <_ZN3tft17drawImage2AlignedEPKhjjjjb>:

void tft::drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
     fc4:	9f 92       	push	r9
     fc6:	af 92       	push	r10
     fc8:	bf 92       	push	r11
     fca:	cf 92       	push	r12
     fcc:	df 92       	push	r13
     fce:	ef 92       	push	r14
     fd0:	ff 92       	push	r15
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	ec 01       	movw	r28, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	ba 01       	movw	r22, r20
     fe0:	69 01       	movw	r12, r18
	using namespace tfthw;
	uint8_t i, c = 0;
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
     fe2:	98 01       	movw	r18, r16
     fe4:	a6 01       	movw	r20, r12
     fe6:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
	memWrite();
     fea:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
	for (uint8_t yy = 0; yy < h; yy++) {
     fee:	a1 2c       	mov	r10, r1
}

void tft::drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
{
	using namespace tfthw;
	uint8_t i, c = 0;
     ff0:	f1 2c       	mov	r15, r1
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
     ff2:	8a 2d       	mov	r24, r10
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	80 17       	cp	r24, r16
     ff8:	91 07       	cpc	r25, r17
     ffa:	80 f5       	brcc	.+96     	; 0x105c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x98>
     ffc:	b1 2c       	mov	r11, r1
     ffe:	20 e0       	ldi	r18, 0x00	; 0
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
    1000:	8b 2d       	mov	r24, r11
    1002:	90 e0       	ldi	r25, 0x00	; 0
    1004:	8c 15       	cp	r24, r12
    1006:	9d 05       	cpc	r25, r13
    1008:	38 f5       	brcc	.+78     	; 0x1058 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x94>
			if (i++ == 0)
    100a:	99 24       	eor	r9, r9
    100c:	93 94       	inc	r9
    100e:	92 0e       	add	r9, r18
    1010:	21 11       	cpse	r18, r1
    1012:	0c c0       	rjmp	.+24     	; 0x102c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x68>
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    1018:	ee 20       	and	r14, r14
    101a:	31 f0       	breq	.+12     	; 0x1028 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x64>
    101c:	28 2f       	mov	r18, r24
    101e:	fe 01       	movw	r30, r28
    1020:	f4 90       	lpm	r15, Z
    1022:	c2 2f       	mov	r28, r18
    1024:	d9 2f       	mov	r29, r25
    1026:	02 c0       	rjmp	.+4      	; 0x102c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x68>
    1028:	f8 80       	ld	r15, Y
    102a:	ec 01       	movw	r28, r24
			if (c & 0x80)
    102c:	f7 fe       	sbrs	r15, 7
    102e:	05 c0       	rjmp	.+10     	; 0x103a <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x76>
				write16(foreground);
    1030:	80 91 c0 02 	lds	r24, 0x02C0
    1034:	90 91 c1 02 	lds	r25, 0x02C1
    1038:	04 c0       	rjmp	.+8      	; 0x1042 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x7e>
			else
				write16(background);
    103a:	80 91 be 02 	lds	r24, 0x02BE
    103e:	90 91 bf 02 	lds	r25, 0x02BF
    1042:	0e 94 1e 04 	call	0x83c	; 0x83c <_ZN5tfthwL7write16Ej>
			if (i == 8)
    1046:	f8 e0       	ldi	r31, 0x08	; 8
    1048:	9f 16       	cp	r9, r31
    104a:	11 f0       	breq	.+4      	; 0x1050 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x8c>
				i = 0;
			else
				c <<= 1;
    104c:	ff 0c       	add	r15, r15
    104e:	01 c0       	rjmp	.+2      	; 0x1052 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x8e>
			if (c & 0x80)
				write16(foreground);
			else
				write16(background);
			if (i == 8)
				i = 0;
    1050:	91 2c       	mov	r9, r1

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
    1052:	b3 94       	inc	r11
    1054:	29 2d       	mov	r18, r9
    1056:	d4 cf       	rjmp	.-88     	; 0x1000 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x3c>
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
    1058:	a3 94       	inc	r10
    105a:	cb cf       	rjmp	.-106    	; 0xff2 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x2e>
				i = 0;
			else
				c <<= 1;
		}
	}
}
    105c:	df 91       	pop	r29
    105e:	cf 91       	pop	r28
    1060:	1f 91       	pop	r17
    1062:	0f 91       	pop	r16
    1064:	ff 90       	pop	r15
    1066:	ef 90       	pop	r14
    1068:	df 90       	pop	r13
    106a:	cf 90       	pop	r12
    106c:	bf 90       	pop	r11
    106e:	af 90       	pop	r10
    1070:	9f 90       	pop	r9
    1072:	08 95       	ret

00001074 <_Z6tftoutv>:
}

FILE *tftout()
{
	static FILE *out = NULL;
	if (out == NULL)
    1074:	80 91 cd 02 	lds	r24, 0x02CD
    1078:	90 91 ce 02 	lds	r25, 0x02CE
    107c:	89 2b       	or	r24, r25
    107e:	51 f4       	brne	.+20     	; 0x1094 <_Z6tftoutv+0x20>
		out = fdevopen(tftputchar, NULL);
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	70 e0       	ldi	r23, 0x00	; 0
    1084:	83 e3       	ldi	r24, 0x33	; 51
    1086:	99 e0       	ldi	r25, 0x09	; 9
    1088:	0e 94 ee 09 	call	0x13dc	; 0x13dc <fdevopen>
    108c:	90 93 ce 02 	sts	0x02CE, r25
    1090:	80 93 cd 02 	sts	0x02CD, r24
	return out;
}
    1094:	80 91 cd 02 	lds	r24, 0x02CD
    1098:	90 91 ce 02 	lds	r25, 0x02CE
    109c:	08 95       	ret

0000109e <_ZN3tft4fillEj>:

void tft::fill(uint16_t clr)
{
    109e:	ef 92       	push	r14
    10a0:	ff 92       	push	r15
    10a2:	0f 93       	push	r16
    10a4:	1f 93       	push	r17
    10a6:	cf 93       	push	r28
    10a8:	df 93       	push	r29
    10aa:	f8 2e       	mov	r15, r24
    10ac:	e9 2e       	mov	r14, r25
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
    10ae:	00 91 c4 02 	lds	r16, 0x02C4
    10b2:	10 91 c5 02 	lds	r17, 0x02C5
}

namespace tfthw
{
	static inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	static inline void all() {area(0, 0, tft::width, tft::height);}
    10b6:	20 91 c2 02 	lds	r18, 0x02C2
    10ba:	30 91 c3 02 	lds	r19, 0x02C3
    10be:	a8 01       	movw	r20, r16
    10c0:	60 e0       	ldi	r22, 0x00	; 0
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN5tfthwL4areaEjjjj>
	all();
	memWrite();
    10cc:	0e 94 17 04 	call	0x82e	; 0x82e <_ZN5tfthwL8memWriteEv>
	while (x--) {
    10d0:	e8 01       	movw	r28, r16
    10d2:	20 97       	sbiw	r28, 0x00	; 0
    10d4:	91 f0       	breq	.+36     	; 0x10fa <_ZN3tft4fillEj+0x5c>
		y = height;
    10d6:	00 91 c2 02 	lds	r16, 0x02C2
    10da:	10 91 c3 02 	lds	r17, 0x02C3
		while (y--) {
    10de:	01 15       	cp	r16, r1
    10e0:	11 05       	cpc	r17, r1
    10e2:	49 f0       	breq	.+18     	; 0x10f6 <_ZN3tft4fillEj+0x58>
			data(ch);
    10e4:	8e 2d       	mov	r24, r14
    10e6:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
			data(cl);
    10ea:	8f 2d       	mov	r24, r15
    10ec:	0e 94 1a 04 	call	0x834	; 0x834 <_ZN5tfthwL4dataEh>
    10f0:	01 50       	subi	r16, 0x01	; 1
    10f2:	11 09       	sbc	r17, r1
    10f4:	f4 cf       	rjmp	.-24     	; 0x10de <_ZN3tft4fillEj+0x40>
    10f6:	21 97       	sbiw	r28, 0x01	; 1
    10f8:	ec cf       	rjmp	.-40     	; 0x10d2 <_ZN3tft4fillEj+0x34>
		}
	}
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	08 95       	ret

00001108 <_ZN3tft7newlineEv>:
#endif

void tft::newline()
{
	using namespace tfthw;
	x = 0;
    1108:	10 92 c9 02 	sts	0x02C9, r1
    110c:	10 92 c8 02 	sts	0x02C8, r1
	y += FONT_HEIGHT * zoom;
    1110:	e0 91 49 01 	lds	r30, 0x0149
    1114:	f0 91 4a 01 	lds	r31, 0x014A
    1118:	21 81       	ldd	r18, Z+1	; 0x01
    111a:	80 91 cc 02 	lds	r24, 0x02CC
    111e:	28 9f       	mul	r18, r24
    1120:	90 01       	movw	r18, r0
    1122:	11 24       	eor	r1, r1
    1124:	80 91 c6 02 	lds	r24, 0x02C6
    1128:	90 91 c7 02 	lds	r25, 0x02C7
    112c:	82 0f       	add	r24, r18
    112e:	93 1f       	adc	r25, r19
    1130:	90 93 c7 02 	sts	0x02C7, r25
    1134:	80 93 c6 02 	sts	0x02C6, r24
	if (y + FONT_HEIGHT * zoom > height) {
    1138:	82 0f       	add	r24, r18
    113a:	93 1f       	adc	r25, r19
    113c:	40 91 c2 02 	lds	r20, 0x02C2
    1140:	50 91 c3 02 	lds	r21, 0x02C3
    1144:	48 17       	cp	r20, r24
    1146:	59 07       	cpc	r21, r25
    1148:	70 f4       	brcc	.+28     	; 0x1166 <_ZN3tft7newlineEv+0x5e>
#endif

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
    114a:	80 91 be 02 	lds	r24, 0x02BE
    114e:	90 91 bf 02 	lds	r25, 0x02BF
    1152:	0e 94 4f 08 	call	0x109e	; 0x109e <_ZN3tft4fillEj>
    1156:	10 92 c9 02 	sts	0x02C9, r1
    115a:	10 92 c8 02 	sts	0x02C8, r1
    115e:	10 92 c7 02 	sts	0x02C7, r1
    1162:	10 92 c6 02 	sts	0x02C6, r1
    1166:	08 95       	ret

00001168 <_ZN3tftL4nextEv>:
	if (transform() && !portrait()) {
		uint16_t xt = vsTransformBack(x);
		x = vsTransform(xt + FONT_WIDTH * zoom);
	} else {
#endif
		x += FONT_WIDTH * zoom;
    1168:	e0 91 49 01 	lds	r30, 0x0149
    116c:	f0 91 4a 01 	lds	r31, 0x014A
    1170:	20 81       	ld	r18, Z
    1172:	80 91 cc 02 	lds	r24, 0x02CC
    1176:	28 9f       	mul	r18, r24
    1178:	90 01       	movw	r18, r0
    117a:	11 24       	eor	r1, r1
    117c:	80 91 c8 02 	lds	r24, 0x02C8
    1180:	90 91 c9 02 	lds	r25, 0x02C9
    1184:	82 0f       	add	r24, r18
    1186:	93 1f       	adc	r25, r19
    1188:	90 93 c9 02 	sts	0x02C9, r25
    118c:	80 93 c8 02 	sts	0x02C8, r24
		if (x + FONT_WIDTH * zoom > width)
    1190:	82 0f       	add	r24, r18
    1192:	93 1f       	adc	r25, r19
    1194:	40 91 c4 02 	lds	r20, 0x02C4
    1198:	50 91 c5 02 	lds	r21, 0x02C5
    119c:	48 17       	cp	r20, r24
    119e:	59 07       	cpc	r21, r25
    11a0:	10 f4       	brcc	.+4      	; 0x11a6 <_ZN3tftL4nextEv+0x3e>
			newline();
    11a2:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_ZN3tft7newlineEv>
    11a6:	08 95       	ret

000011a8 <_ZN3tftL7putCharEc>:

// Defined as inline to execute faster

static inline void tft::putChar(const char c)
{
	switch (c) {
    11a8:	89 30       	cpi	r24, 0x09	; 9
    11aa:	21 f0       	breq	.+8      	; 0x11b4 <_ZN3tftL7putCharEc+0xc>
    11ac:	8a 30       	cpi	r24, 0x0A	; 10
    11ae:	b1 f5       	brne	.+108    	; 0x121c <_ZN3tftL7putCharEc+0x74>
	case '\n':
		newline();
    11b0:	0c 94 84 08 	jmp	0x1108	; 0x1108 <_ZN3tft7newlineEv>
#endif
}

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
    11b4:	20 91 c8 02 	lds	r18, 0x02C8
    11b8:	30 91 c9 02 	lds	r19, 0x02C9
    11bc:	e0 91 49 01 	lds	r30, 0x0149
    11c0:	f0 91 4a 01 	lds	r31, 0x014A
    11c4:	60 81       	ld	r22, Z
    11c6:	80 91 cc 02 	lds	r24, 0x02CC
    11ca:	68 9f       	mul	r22, r24
    11cc:	b0 01       	movw	r22, r0
    11ce:	11 24       	eor	r1, r1
    11d0:	c9 01       	movw	r24, r18
    11d2:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	31 f0       	breq	.+12     	; 0x11e6 <_ZN3tftL7putCharEc+0x3e>
		x -= x % (FONT_WIDTH * zoom);
    11da:	28 1b       	sub	r18, r24
    11dc:	39 0b       	sbc	r19, r25
    11de:	30 93 c9 02 	sts	0x02C9, r19
    11e2:	20 93 c8 02 	sts	0x02C8, r18
	do
		next();
    11e6:	0e 94 b4 08 	call	0x1168	; 0x1168 <_ZN3tftL4nextEv>
	while (x / (FONT_WIDTH * zoom) % tabSize);
    11ea:	e0 91 49 01 	lds	r30, 0x0149
    11ee:	f0 91 4a 01 	lds	r31, 0x014A
    11f2:	60 81       	ld	r22, Z
    11f4:	80 91 cc 02 	lds	r24, 0x02CC
    11f8:	68 9f       	mul	r22, r24
    11fa:	b0 01       	movw	r22, r0
    11fc:	11 24       	eor	r1, r1
    11fe:	80 91 c8 02 	lds	r24, 0x02C8
    1202:	90 91 c9 02 	lds	r25, 0x02C9
    1206:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>
    120a:	cb 01       	movw	r24, r22
    120c:	60 91 ca 02 	lds	r22, 0x02CA
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
		x -= x % (FONT_WIDTH * zoom);
	do
    1216:	89 2b       	or	r24, r25
    1218:	31 f7       	brne	.-52     	; 0x11e6 <_ZN3tftL7putCharEc+0x3e>
    121a:	08 95       	ret
		break;
	case '\t':
		tab();
		break;
	default:
		if ((unsigned)c < ' ')
    121c:	80 32       	cpi	r24, 0x20	; 32
    121e:	20 f0       	brcs	.+8      	; 0x1228 <_ZN3tftL7putCharEc+0x80>
			break;
		drawChar(c);
    1220:	0e 94 12 07 	call	0xe24	; 0xe24 <_ZN3tft8drawCharEc>
		next();
    1224:	0c 94 b4 08 	jmp	0x1168	; 0x1168 <_ZN3tftL4nextEv>
    1228:	08 95       	ret

0000122a <_ZN3tft9putStringEPKcb>:
	foreground = DEF_FGC;
	background = DEF_BGC;
}

void tft::putString(const char *str, bool progMem)
{
    122a:	0f 93       	push	r16
    122c:	1f 93       	push	r17
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	1f 92       	push	r1
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
    1238:	fc 01       	movw	r30, r24
    123a:	66 23       	and	r22, r22
    123c:	11 f0       	breq	.+4      	; 0x1242 <_ZN3tft9putStringEPKcb+0x18>
    123e:	84 91       	lpm	r24, Z
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <_ZN3tft9putStringEPKcb+0x1a>
    1242:	80 81       	ld	r24, Z
    1244:	8f 01       	movw	r16, r30
    1246:	0f 5f       	subi	r16, 0xFF	; 255
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	88 23       	and	r24, r24
    124c:	31 f0       	breq	.+12     	; 0x125a <_ZN3tft9putStringEPKcb+0x30>
		putChar(c);
    124e:	69 83       	std	Y+1, r22	; 0x01
    1250:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN3tftL7putCharEc>
    1254:	f8 01       	movw	r30, r16
    1256:	69 81       	ldd	r22, Y+1	; 0x01
    1258:	f0 cf       	rjmp	.-32     	; 0x123a <_ZN3tft9putStringEPKcb+0x10>
			if (xt >= bottomEdge())
				break;
		}
#endif
	}
}
    125a:	0f 90       	pop	r0
    125c:	df 91       	pop	r29
    125e:	cf 91       	pop	r28
    1260:	1f 91       	pop	r17
    1262:	0f 91       	pop	r16
    1264:	08 95       	ret

00001266 <_ZL10tftputcharcP6__file>:
    1266:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_ZN3tftL7putCharEc>
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	08 95       	ret

00001270 <main>:
	stdout = tftout();
	tft::setBGLight(true);
}

int main(void)
{
    1270:	cf 93       	push	r28
    1272:	df 93       	push	r29
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	2a 97       	sbiw	r28, 0x0a	; 10
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
	init_sys();
    1284:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8init_sysv>
    1288:	2f e7       	ldi	r18, 0x7F	; 127
    128a:	89 ea       	ldi	r24, 0xA9	; 169
    128c:	93 e0       	ldi	r25, 0x03	; 3
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	80 40       	sbci	r24, 0x00	; 0
    1292:	90 40       	sbci	r25, 0x00	; 0
    1294:	e1 f7       	brne	.-8      	; 0x128e <main+0x1e>
    1296:	00 c0       	rjmp	.+0      	; 0x1298 <main+0x28>
    1298:	00 00       	nop
	_delay_ms(100);  //little delay for the rfm12 to initialize properly
	rfm12_init();    //init the RFM12
    129a:	0e 94 c1 03 	call	0x782	; 0x782 <rfm12_init>
    129e:	2f e7       	ldi	r18, 0x7F	; 127
    12a0:	89 ea       	ldi	r24, 0xA9	; 169
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	21 50       	subi	r18, 0x01	; 1
    12a6:	80 40       	sbci	r24, 0x00	; 0
    12a8:	90 40       	sbci	r25, 0x00	; 0
    12aa:	e1 f7       	brne	.-8      	; 0x12a4 <main+0x34>
    12ac:	00 c0       	rjmp	.+0      	; 0x12ae <main+0x3e>
    12ae:	00 00       	nop
	_delay_ms(100);
	uint8_t tv[] = "connected";
    12b0:	8a e0       	ldi	r24, 0x0A	; 10
    12b2:	e5 ed       	ldi	r30, 0xD5	; 213
    12b4:	f1 e0       	ldi	r31, 0x01	; 1
    12b6:	de 01       	movw	r26, r28
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	01 90       	ld	r0, Z+
    12bc:	0d 92       	st	X+, r0
    12be:	8a 95       	dec	r24
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <main+0x4a>
	sei();           //interrupts on
    12c2:	78 94       	sei
	//! Inline function to return the rx buffer status byte.
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].status;
    12c4:	02 e2       	ldi	r16, 0x22	; 34
    12c6:	80 91 4d 02 	lds	r24, 0x024D
    12ca:	08 9f       	mul	r16, r24
    12cc:	c0 01       	movw	r24, r0
    12ce:	11 24       	eor	r1, r1
    12d0:	fc 01       	movw	r30, r24
    12d2:	ea 5a       	subi	r30, 0xAA	; 170
    12d4:	fd 4f       	sbci	r31, 0xFD	; 253
    12d6:	20 81       	ld	r18, Z
	while(1)
	{
		if (rfm12_rx_status() == STATUS_COMPLETE)
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	19 f5       	brne	.+70     	; 0x1322 <main+0xb2>
		{
			bufptr = rfm12_rx_buffer(); //get the address of the current rx buffer
    12dc:	86 5a       	subi	r24, 0xA6	; 166
    12de:	9d 4f       	sbci	r25, 0xFD	; 253
    12e0:	90 93 47 02 	sts	0x0247, r25
    12e4:	80 93 46 02 	sts	0x0246, r24

			// dump buffer contents to uart			
			for (uint8_t i=0;i<rfm12_rx_len();i++)
    12e8:	10 e0       	ldi	r17, 0x00	; 0
	//! Inline function to return the rx buffer length field.
	/** \returns The length of the data inside the buffer
	* \see rfm12_rx_status(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_len(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].len;
    12ea:	e0 91 4d 02 	lds	r30, 0x024D
    12ee:	0e 9f       	mul	r16, r30
    12f0:	f0 01       	movw	r30, r0
    12f2:	11 24       	eor	r1, r1
    12f4:	ea 5a       	subi	r30, 0xAA	; 170
    12f6:	fd 4f       	sbci	r31, 0xFD	; 253
    12f8:	81 81       	ldd	r24, Z+1	; 0x01
    12fa:	18 17       	cp	r17, r24
    12fc:	80 f4       	brcc	.+32     	; 0x131e <main+0xae>
			{
				putchar(bufptr[i]);
    12fe:	60 91 d2 02 	lds	r22, 0x02D2
    1302:	70 91 d3 02 	lds	r23, 0x02D3
    1306:	e0 91 46 02 	lds	r30, 0x0246
    130a:	f0 91 47 02 	lds	r31, 0x0247
    130e:	e1 0f       	add	r30, r17
    1310:	f1 1d       	adc	r31, r1
    1312:	80 81       	ld	r24, Z
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 39 0a 	call	0x1472	; 0x1472 <fputc>
		if (rfm12_rx_status() == STATUS_COMPLETE)
		{
			bufptr = rfm12_rx_buffer(); //get the address of the current rx buffer

			// dump buffer contents to uart			
			for (uint8_t i=0;i<rfm12_rx_len();i++)
    131a:	1f 5f       	subi	r17, 0xFF	; 255
    131c:	e6 cf       	rjmp	.-52     	; 0x12ea <main+0x7a>
				putchar(bufptr[i]);
			}
				
				// tell the implementation that the buffer
				// can be reused for the next data.
				rfm12_rx_clear();
    131e:	0e 94 b3 03 	call	0x766	; 0x766 <rfm12_rx_clear>
				//_delay_ms(1000);
		}
				
				
	
					puts(".");
    1322:	83 ed       	ldi	r24, 0xD3	; 211
    1324:	91 e0       	ldi	r25, 0x01	; 1
    1326:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <puts>
				//	printf("%d", sizeof(tv));
				//	printf("02%x",rfm12_tx(sizeof(tv), 0, tv)));
				rfm12_tx(sizeof(tv), 0, tv);	
    132a:	ae 01       	movw	r20, r28
    132c:	4f 5f       	subi	r20, 0xFF	; 255
    132e:	5f 4f       	sbci	r21, 0xFF	; 255
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	8a e0       	ldi	r24, 0x0A	; 10
    1334:	0e 94 96 03 	call	0x72c	; 0x72c <rfm12_tx>
    1338:	14 e6       	ldi	r17, 0x64	; 100
				//rfm12 needs to be called from your main loop periodically.
				//it checks if the rf channel is free (no one else transmitting), and then
				//sends packets, that have been queued by rfm12_tx above.
			for (uint8_t j = 0; j < 100; j++)	
			{	
				rfm12_tick();	
    133a:	0e 94 4c 03 	call	0x698	; 0x698 <rfm12_tick>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    133e:	8b ed       	ldi	r24, 0xDB	; 219
    1340:	95 e0       	ldi	r25, 0x05	; 5
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <main+0xd2>
    1346:	00 c0       	rjmp	.+0      	; 0x1348 <main+0xd8>
    1348:	00 00       	nop
    134a:	11 50       	subi	r17, 0x01	; 1
				rfm12_tx(sizeof(tv), 0, tv);	
			//	}
				//rfm12 needs to be called from your main loop periodically.
				//it checks if the rf channel is free (no one else transmitting), and then
				//sends packets, that have been queued by rfm12_tx above.
			for (uint8_t j = 0; j < 100; j++)	
    134c:	b1 f7       	brne	.-20     	; 0x133a <main+0xca>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    134e:	9f e7       	ldi	r25, 0x7F	; 127
    1350:	2f e4       	ldi	r18, 0x4F	; 79
    1352:	82 e1       	ldi	r24, 0x12	; 18
    1354:	91 50       	subi	r25, 0x01	; 1
    1356:	20 40       	sbci	r18, 0x00	; 0
    1358:	80 40       	sbci	r24, 0x00	; 0
    135a:	e1 f7       	brne	.-8      	; 0x1354 <main+0xe4>
    135c:	00 c0       	rjmp	.+0      	; 0x135e <main+0xee>
    135e:	00 00       	nop
    1360:	b2 cf       	rjmp	.-156    	; 0x12c6 <main+0x56>

00001362 <__udivmodqi4>:
    1362:	99 1b       	sub	r25, r25
    1364:	79 e0       	ldi	r23, 0x09	; 9
    1366:	04 c0       	rjmp	.+8      	; 0x1370 <__udivmodqi4_ep>

00001368 <__udivmodqi4_loop>:
    1368:	99 1f       	adc	r25, r25
    136a:	96 17       	cp	r25, r22
    136c:	08 f0       	brcs	.+2      	; 0x1370 <__udivmodqi4_ep>
    136e:	96 1b       	sub	r25, r22

00001370 <__udivmodqi4_ep>:
    1370:	88 1f       	adc	r24, r24
    1372:	7a 95       	dec	r23
    1374:	c9 f7       	brne	.-14     	; 0x1368 <__udivmodqi4_loop>
    1376:	80 95       	com	r24
    1378:	08 95       	ret

0000137a <__udivmodhi4>:
    137a:	aa 1b       	sub	r26, r26
    137c:	bb 1b       	sub	r27, r27
    137e:	51 e1       	ldi	r21, 0x11	; 17
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <__udivmodhi4_ep>

00001382 <__udivmodhi4_loop>:
    1382:	aa 1f       	adc	r26, r26
    1384:	bb 1f       	adc	r27, r27
    1386:	a6 17       	cp	r26, r22
    1388:	b7 07       	cpc	r27, r23
    138a:	10 f0       	brcs	.+4      	; 0x1390 <__udivmodhi4_ep>
    138c:	a6 1b       	sub	r26, r22
    138e:	b7 0b       	sbc	r27, r23

00001390 <__udivmodhi4_ep>:
    1390:	88 1f       	adc	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	5a 95       	dec	r21
    1396:	a9 f7       	brne	.-22     	; 0x1382 <__udivmodhi4_loop>
    1398:	80 95       	com	r24
    139a:	90 95       	com	r25
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	08 95       	ret

000013a2 <__divmodhi4>:
    13a2:	97 fb       	bst	r25, 7
    13a4:	07 2e       	mov	r0, r23
    13a6:	16 f4       	brtc	.+4      	; 0x13ac <__divmodhi4+0xa>
    13a8:	00 94       	com	r0
    13aa:	07 d0       	rcall	.+14     	; 0x13ba <__divmodhi4_neg1>
    13ac:	77 fd       	sbrc	r23, 7
    13ae:	09 d0       	rcall	.+18     	; 0x13c2 <__divmodhi4_neg2>
    13b0:	0e 94 bd 09 	call	0x137a	; 0x137a <__udivmodhi4>
    13b4:	07 fc       	sbrc	r0, 7
    13b6:	05 d0       	rcall	.+10     	; 0x13c2 <__divmodhi4_neg2>
    13b8:	3e f4       	brtc	.+14     	; 0x13c8 <__divmodhi4_exit>

000013ba <__divmodhi4_neg1>:
    13ba:	90 95       	com	r25
    13bc:	81 95       	neg	r24
    13be:	9f 4f       	sbci	r25, 0xFF	; 255
    13c0:	08 95       	ret

000013c2 <__divmodhi4_neg2>:
    13c2:	70 95       	com	r23
    13c4:	61 95       	neg	r22
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255

000013c8 <__divmodhi4_exit>:
    13c8:	08 95       	ret

000013ca <memcpy>:
    13ca:	fb 01       	movw	r30, r22
    13cc:	dc 01       	movw	r26, r24
    13ce:	02 c0       	rjmp	.+4      	; 0x13d4 <memcpy+0xa>
    13d0:	01 90       	ld	r0, Z+
    13d2:	0d 92       	st	X+, r0
    13d4:	41 50       	subi	r20, 0x01	; 1
    13d6:	50 40       	sbci	r21, 0x00	; 0
    13d8:	d8 f7       	brcc	.-10     	; 0x13d0 <memcpy+0x6>
    13da:	08 95       	ret

000013dc <fdevopen>:
    13dc:	0f 93       	push	r16
    13de:	1f 93       	push	r17
    13e0:	cf 93       	push	r28
    13e2:	df 93       	push	r29
    13e4:	ec 01       	movw	r28, r24
    13e6:	8b 01       	movw	r16, r22
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f4       	brne	.+12     	; 0x13f8 <fdevopen+0x1c>
    13ec:	61 15       	cp	r22, r1
    13ee:	71 05       	cpc	r23, r1
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <fdevopen+0x1c>
    13f2:	80 e0       	ldi	r24, 0x00	; 0
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	38 c0       	rjmp	.+112    	; 0x1468 <fdevopen+0x8c>
    13f8:	6e e0       	ldi	r22, 0x0E	; 14
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	0e 94 98 0a 	call	0x1530	; 0x1530 <calloc>
    1404:	fc 01       	movw	r30, r24
    1406:	00 97       	sbiw	r24, 0x00	; 0
    1408:	a1 f3       	breq	.-24     	; 0x13f2 <fdevopen+0x16>
    140a:	80 e8       	ldi	r24, 0x80	; 128
    140c:	83 83       	std	Z+3, r24	; 0x03
    140e:	01 15       	cp	r16, r1
    1410:	11 05       	cpc	r17, r1
    1412:	71 f0       	breq	.+28     	; 0x1430 <fdevopen+0x54>
    1414:	13 87       	std	Z+11, r17	; 0x0b
    1416:	02 87       	std	Z+10, r16	; 0x0a
    1418:	81 e8       	ldi	r24, 0x81	; 129
    141a:	83 83       	std	Z+3, r24	; 0x03
    141c:	80 91 d0 02 	lds	r24, 0x02D0
    1420:	90 91 d1 02 	lds	r25, 0x02D1
    1424:	89 2b       	or	r24, r25
    1426:	21 f4       	brne	.+8      	; 0x1430 <fdevopen+0x54>
    1428:	f0 93 d1 02 	sts	0x02D1, r31
    142c:	e0 93 d0 02 	sts	0x02D0, r30
    1430:	20 97       	sbiw	r28, 0x00	; 0
    1432:	c9 f0       	breq	.+50     	; 0x1466 <fdevopen+0x8a>
    1434:	d1 87       	std	Z+9, r29	; 0x09
    1436:	c0 87       	std	Z+8, r28	; 0x08
    1438:	83 81       	ldd	r24, Z+3	; 0x03
    143a:	82 60       	ori	r24, 0x02	; 2
    143c:	83 83       	std	Z+3, r24	; 0x03
    143e:	80 91 d2 02 	lds	r24, 0x02D2
    1442:	90 91 d3 02 	lds	r25, 0x02D3
    1446:	89 2b       	or	r24, r25
    1448:	71 f4       	brne	.+28     	; 0x1466 <fdevopen+0x8a>
    144a:	f0 93 d3 02 	sts	0x02D3, r31
    144e:	e0 93 d2 02 	sts	0x02D2, r30
    1452:	80 91 d4 02 	lds	r24, 0x02D4
    1456:	90 91 d5 02 	lds	r25, 0x02D5
    145a:	89 2b       	or	r24, r25
    145c:	21 f4       	brne	.+8      	; 0x1466 <fdevopen+0x8a>
    145e:	f0 93 d5 02 	sts	0x02D5, r31
    1462:	e0 93 d4 02 	sts	0x02D4, r30
    1466:	cf 01       	movw	r24, r30
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	08 95       	ret

00001472 <fputc>:
    1472:	0f 93       	push	r16
    1474:	1f 93       	push	r17
    1476:	cf 93       	push	r28
    1478:	df 93       	push	r29
    147a:	18 2f       	mov	r17, r24
    147c:	09 2f       	mov	r16, r25
    147e:	eb 01       	movw	r28, r22
    1480:	8b 81       	ldd	r24, Y+3	; 0x03
    1482:	81 fd       	sbrc	r24, 1
    1484:	03 c0       	rjmp	.+6      	; 0x148c <fputc+0x1a>
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	9f ef       	ldi	r25, 0xFF	; 255
    148a:	20 c0       	rjmp	.+64     	; 0x14cc <fputc+0x5a>
    148c:	82 ff       	sbrs	r24, 2
    148e:	10 c0       	rjmp	.+32     	; 0x14b0 <fputc+0x3e>
    1490:	4e 81       	ldd	r20, Y+6	; 0x06
    1492:	5f 81       	ldd	r21, Y+7	; 0x07
    1494:	2c 81       	ldd	r18, Y+4	; 0x04
    1496:	3d 81       	ldd	r19, Y+5	; 0x05
    1498:	42 17       	cp	r20, r18
    149a:	53 07       	cpc	r21, r19
    149c:	7c f4       	brge	.+30     	; 0x14bc <fputc+0x4a>
    149e:	e8 81       	ld	r30, Y
    14a0:	f9 81       	ldd	r31, Y+1	; 0x01
    14a2:	9f 01       	movw	r18, r30
    14a4:	2f 5f       	subi	r18, 0xFF	; 255
    14a6:	3f 4f       	sbci	r19, 0xFF	; 255
    14a8:	39 83       	std	Y+1, r19	; 0x01
    14aa:	28 83       	st	Y, r18
    14ac:	10 83       	st	Z, r17
    14ae:	06 c0       	rjmp	.+12     	; 0x14bc <fputc+0x4a>
    14b0:	e8 85       	ldd	r30, Y+8	; 0x08
    14b2:	f9 85       	ldd	r31, Y+9	; 0x09
    14b4:	81 2f       	mov	r24, r17
    14b6:	09 95       	icall
    14b8:	89 2b       	or	r24, r25
    14ba:	29 f7       	brne	.-54     	; 0x1486 <fputc+0x14>
    14bc:	2e 81       	ldd	r18, Y+6	; 0x06
    14be:	3f 81       	ldd	r19, Y+7	; 0x07
    14c0:	2f 5f       	subi	r18, 0xFF	; 255
    14c2:	3f 4f       	sbci	r19, 0xFF	; 255
    14c4:	3f 83       	std	Y+7, r19	; 0x07
    14c6:	2e 83       	std	Y+6, r18	; 0x06
    14c8:	81 2f       	mov	r24, r17
    14ca:	90 2f       	mov	r25, r16
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	08 95       	ret

000014d6 <puts>:
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
    14da:	cf 93       	push	r28
    14dc:	df 93       	push	r29
    14de:	e0 91 d2 02 	lds	r30, 0x02D2
    14e2:	f0 91 d3 02 	lds	r31, 0x02D3
    14e6:	23 81       	ldd	r18, Z+3	; 0x03
    14e8:	21 ff       	sbrs	r18, 1
    14ea:	1b c0       	rjmp	.+54     	; 0x1522 <puts+0x4c>
    14ec:	ec 01       	movw	r28, r24
    14ee:	00 e0       	ldi	r16, 0x00	; 0
    14f0:	10 e0       	ldi	r17, 0x00	; 0
    14f2:	89 91       	ld	r24, Y+
    14f4:	60 91 d2 02 	lds	r22, 0x02D2
    14f8:	70 91 d3 02 	lds	r23, 0x02D3
    14fc:	db 01       	movw	r26, r22
    14fe:	18 96       	adiw	r26, 0x08	; 8
    1500:	ed 91       	ld	r30, X+
    1502:	fc 91       	ld	r31, X
    1504:	19 97       	sbiw	r26, 0x09	; 9
    1506:	88 23       	and	r24, r24
    1508:	31 f0       	breq	.+12     	; 0x1516 <puts+0x40>
    150a:	09 95       	icall
    150c:	89 2b       	or	r24, r25
    150e:	89 f3       	breq	.-30     	; 0x14f2 <puts+0x1c>
    1510:	0f ef       	ldi	r16, 0xFF	; 255
    1512:	1f ef       	ldi	r17, 0xFF	; 255
    1514:	ee cf       	rjmp	.-36     	; 0x14f2 <puts+0x1c>
    1516:	8a e0       	ldi	r24, 0x0A	; 10
    1518:	09 95       	icall
    151a:	89 2b       	or	r24, r25
    151c:	11 f4       	brne	.+4      	; 0x1522 <puts+0x4c>
    151e:	c8 01       	movw	r24, r16
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <puts+0x50>
    1522:	8f ef       	ldi	r24, 0xFF	; 255
    1524:	9f ef       	ldi	r25, 0xFF	; 255
    1526:	df 91       	pop	r29
    1528:	cf 91       	pop	r28
    152a:	1f 91       	pop	r17
    152c:	0f 91       	pop	r16
    152e:	08 95       	ret

00001530 <calloc>:
    1530:	0f 93       	push	r16
    1532:	1f 93       	push	r17
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
    1538:	86 9f       	mul	r24, r22
    153a:	80 01       	movw	r16, r0
    153c:	87 9f       	mul	r24, r23
    153e:	10 0d       	add	r17, r0
    1540:	96 9f       	mul	r25, r22
    1542:	10 0d       	add	r17, r0
    1544:	11 24       	eor	r1, r1
    1546:	c8 01       	movw	r24, r16
    1548:	0e 94 b4 0a 	call	0x1568	; 0x1568 <malloc>
    154c:	ec 01       	movw	r28, r24
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	29 f0       	breq	.+10     	; 0x155c <calloc+0x2c>
    1552:	a8 01       	movw	r20, r16
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <memset>
    155c:	ce 01       	movw	r24, r28
    155e:	df 91       	pop	r29
    1560:	cf 91       	pop	r28
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	08 95       	ret

00001568 <malloc>:
    1568:	cf 93       	push	r28
    156a:	df 93       	push	r29
    156c:	82 30       	cpi	r24, 0x02	; 2
    156e:	91 05       	cpc	r25, r1
    1570:	10 f4       	brcc	.+4      	; 0x1576 <malloc+0xe>
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	e0 91 d8 02 	lds	r30, 0x02D8
    157a:	f0 91 d9 02 	lds	r31, 0x02D9
    157e:	20 e0       	ldi	r18, 0x00	; 0
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	30 97       	sbiw	r30, 0x00	; 0
    1588:	39 f1       	breq	.+78     	; 0x15d8 <malloc+0x70>
    158a:	40 81       	ld	r20, Z
    158c:	51 81       	ldd	r21, Z+1	; 0x01
    158e:	48 17       	cp	r20, r24
    1590:	59 07       	cpc	r21, r25
    1592:	b8 f0       	brcs	.+46     	; 0x15c2 <malloc+0x5a>
    1594:	48 17       	cp	r20, r24
    1596:	59 07       	cpc	r21, r25
    1598:	71 f4       	brne	.+28     	; 0x15b6 <malloc+0x4e>
    159a:	82 81       	ldd	r24, Z+2	; 0x02
    159c:	93 81       	ldd	r25, Z+3	; 0x03
    159e:	10 97       	sbiw	r26, 0x00	; 0
    15a0:	29 f0       	breq	.+10     	; 0x15ac <malloc+0x44>
    15a2:	13 96       	adiw	r26, 0x03	; 3
    15a4:	9c 93       	st	X, r25
    15a6:	8e 93       	st	-X, r24
    15a8:	12 97       	sbiw	r26, 0x02	; 2
    15aa:	2c c0       	rjmp	.+88     	; 0x1604 <malloc+0x9c>
    15ac:	90 93 d9 02 	sts	0x02D9, r25
    15b0:	80 93 d8 02 	sts	0x02D8, r24
    15b4:	27 c0       	rjmp	.+78     	; 0x1604 <malloc+0x9c>
    15b6:	21 15       	cp	r18, r1
    15b8:	31 05       	cpc	r19, r1
    15ba:	31 f0       	breq	.+12     	; 0x15c8 <malloc+0x60>
    15bc:	42 17       	cp	r20, r18
    15be:	53 07       	cpc	r21, r19
    15c0:	18 f0       	brcs	.+6      	; 0x15c8 <malloc+0x60>
    15c2:	a9 01       	movw	r20, r18
    15c4:	db 01       	movw	r26, r22
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <malloc+0x62>
    15c8:	ef 01       	movw	r28, r30
    15ca:	9a 01       	movw	r18, r20
    15cc:	bd 01       	movw	r22, r26
    15ce:	df 01       	movw	r26, r30
    15d0:	02 80       	ldd	r0, Z+2	; 0x02
    15d2:	f3 81       	ldd	r31, Z+3	; 0x03
    15d4:	e0 2d       	mov	r30, r0
    15d6:	d7 cf       	rjmp	.-82     	; 0x1586 <malloc+0x1e>
    15d8:	21 15       	cp	r18, r1
    15da:	31 05       	cpc	r19, r1
    15dc:	f9 f0       	breq	.+62     	; 0x161c <malloc+0xb4>
    15de:	28 1b       	sub	r18, r24
    15e0:	39 0b       	sbc	r19, r25
    15e2:	24 30       	cpi	r18, 0x04	; 4
    15e4:	31 05       	cpc	r19, r1
    15e6:	80 f4       	brcc	.+32     	; 0x1608 <malloc+0xa0>
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	9b 81       	ldd	r25, Y+3	; 0x03
    15ec:	61 15       	cp	r22, r1
    15ee:	71 05       	cpc	r23, r1
    15f0:	21 f0       	breq	.+8      	; 0x15fa <malloc+0x92>
    15f2:	fb 01       	movw	r30, r22
    15f4:	93 83       	std	Z+3, r25	; 0x03
    15f6:	82 83       	std	Z+2, r24	; 0x02
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <malloc+0x9a>
    15fa:	90 93 d9 02 	sts	0x02D9, r25
    15fe:	80 93 d8 02 	sts	0x02D8, r24
    1602:	fe 01       	movw	r30, r28
    1604:	32 96       	adiw	r30, 0x02	; 2
    1606:	44 c0       	rjmp	.+136    	; 0x1690 <malloc+0x128>
    1608:	fe 01       	movw	r30, r28
    160a:	e2 0f       	add	r30, r18
    160c:	f3 1f       	adc	r31, r19
    160e:	81 93       	st	Z+, r24
    1610:	91 93       	st	Z+, r25
    1612:	22 50       	subi	r18, 0x02	; 2
    1614:	31 09       	sbc	r19, r1
    1616:	39 83       	std	Y+1, r19	; 0x01
    1618:	28 83       	st	Y, r18
    161a:	3a c0       	rjmp	.+116    	; 0x1690 <malloc+0x128>
    161c:	20 91 d6 02 	lds	r18, 0x02D6
    1620:	30 91 d7 02 	lds	r19, 0x02D7
    1624:	23 2b       	or	r18, r19
    1626:	41 f4       	brne	.+16     	; 0x1638 <malloc+0xd0>
    1628:	20 91 4d 01 	lds	r18, 0x014D
    162c:	30 91 4e 01 	lds	r19, 0x014E
    1630:	30 93 d7 02 	sts	0x02D7, r19
    1634:	20 93 d6 02 	sts	0x02D6, r18
    1638:	20 91 4b 01 	lds	r18, 0x014B
    163c:	30 91 4c 01 	lds	r19, 0x014C
    1640:	21 15       	cp	r18, r1
    1642:	31 05       	cpc	r19, r1
    1644:	41 f4       	brne	.+16     	; 0x1656 <malloc+0xee>
    1646:	2d b7       	in	r18, 0x3d	; 61
    1648:	3e b7       	in	r19, 0x3e	; 62
    164a:	40 91 4f 01 	lds	r20, 0x014F
    164e:	50 91 50 01 	lds	r21, 0x0150
    1652:	24 1b       	sub	r18, r20
    1654:	35 0b       	sbc	r19, r21
    1656:	e0 91 d6 02 	lds	r30, 0x02D6
    165a:	f0 91 d7 02 	lds	r31, 0x02D7
    165e:	e2 17       	cp	r30, r18
    1660:	f3 07       	cpc	r31, r19
    1662:	a0 f4       	brcc	.+40     	; 0x168c <malloc+0x124>
    1664:	2e 1b       	sub	r18, r30
    1666:	3f 0b       	sbc	r19, r31
    1668:	28 17       	cp	r18, r24
    166a:	39 07       	cpc	r19, r25
    166c:	78 f0       	brcs	.+30     	; 0x168c <malloc+0x124>
    166e:	ac 01       	movw	r20, r24
    1670:	4e 5f       	subi	r20, 0xFE	; 254
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	24 17       	cp	r18, r20
    1676:	35 07       	cpc	r19, r21
    1678:	48 f0       	brcs	.+18     	; 0x168c <malloc+0x124>
    167a:	4e 0f       	add	r20, r30
    167c:	5f 1f       	adc	r21, r31
    167e:	50 93 d7 02 	sts	0x02D7, r21
    1682:	40 93 d6 02 	sts	0x02D6, r20
    1686:	81 93       	st	Z+, r24
    1688:	91 93       	st	Z+, r25
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <malloc+0x128>
    168c:	e0 e0       	ldi	r30, 0x00	; 0
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	cf 01       	movw	r24, r30
    1692:	df 91       	pop	r29
    1694:	cf 91       	pop	r28
    1696:	08 95       	ret

00001698 <free>:
    1698:	cf 93       	push	r28
    169a:	df 93       	push	r29
    169c:	00 97       	sbiw	r24, 0x00	; 0
    169e:	09 f4       	brne	.+2      	; 0x16a2 <free+0xa>
    16a0:	87 c0       	rjmp	.+270    	; 0x17b0 <free+0x118>
    16a2:	fc 01       	movw	r30, r24
    16a4:	32 97       	sbiw	r30, 0x02	; 2
    16a6:	13 82       	std	Z+3, r1	; 0x03
    16a8:	12 82       	std	Z+2, r1	; 0x02
    16aa:	c0 91 d8 02 	lds	r28, 0x02D8
    16ae:	d0 91 d9 02 	lds	r29, 0x02D9
    16b2:	20 97       	sbiw	r28, 0x00	; 0
    16b4:	81 f4       	brne	.+32     	; 0x16d6 <free+0x3e>
    16b6:	20 81       	ld	r18, Z
    16b8:	31 81       	ldd	r19, Z+1	; 0x01
    16ba:	28 0f       	add	r18, r24
    16bc:	39 1f       	adc	r19, r25
    16be:	80 91 d6 02 	lds	r24, 0x02D6
    16c2:	90 91 d7 02 	lds	r25, 0x02D7
    16c6:	82 17       	cp	r24, r18
    16c8:	93 07       	cpc	r25, r19
    16ca:	79 f5       	brne	.+94     	; 0x172a <free+0x92>
    16cc:	f0 93 d7 02 	sts	0x02D7, r31
    16d0:	e0 93 d6 02 	sts	0x02D6, r30
    16d4:	6d c0       	rjmp	.+218    	; 0x17b0 <free+0x118>
    16d6:	de 01       	movw	r26, r28
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	ae 17       	cp	r26, r30
    16de:	bf 07       	cpc	r27, r31
    16e0:	50 f4       	brcc	.+20     	; 0x16f6 <free+0x5e>
    16e2:	12 96       	adiw	r26, 0x02	; 2
    16e4:	4d 91       	ld	r20, X+
    16e6:	5c 91       	ld	r21, X
    16e8:	13 97       	sbiw	r26, 0x03	; 3
    16ea:	9d 01       	movw	r18, r26
    16ec:	41 15       	cp	r20, r1
    16ee:	51 05       	cpc	r21, r1
    16f0:	09 f1       	breq	.+66     	; 0x1734 <free+0x9c>
    16f2:	da 01       	movw	r26, r20
    16f4:	f3 cf       	rjmp	.-26     	; 0x16dc <free+0x44>
    16f6:	b3 83       	std	Z+3, r27	; 0x03
    16f8:	a2 83       	std	Z+2, r26	; 0x02
    16fa:	40 81       	ld	r20, Z
    16fc:	51 81       	ldd	r21, Z+1	; 0x01
    16fe:	84 0f       	add	r24, r20
    1700:	95 1f       	adc	r25, r21
    1702:	8a 17       	cp	r24, r26
    1704:	9b 07       	cpc	r25, r27
    1706:	71 f4       	brne	.+28     	; 0x1724 <free+0x8c>
    1708:	8d 91       	ld	r24, X+
    170a:	9c 91       	ld	r25, X
    170c:	11 97       	sbiw	r26, 0x01	; 1
    170e:	84 0f       	add	r24, r20
    1710:	95 1f       	adc	r25, r21
    1712:	02 96       	adiw	r24, 0x02	; 2
    1714:	91 83       	std	Z+1, r25	; 0x01
    1716:	80 83       	st	Z, r24
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	8d 91       	ld	r24, X+
    171c:	9c 91       	ld	r25, X
    171e:	13 97       	sbiw	r26, 0x03	; 3
    1720:	93 83       	std	Z+3, r25	; 0x03
    1722:	82 83       	std	Z+2, r24	; 0x02
    1724:	21 15       	cp	r18, r1
    1726:	31 05       	cpc	r19, r1
    1728:	29 f4       	brne	.+10     	; 0x1734 <free+0x9c>
    172a:	f0 93 d9 02 	sts	0x02D9, r31
    172e:	e0 93 d8 02 	sts	0x02D8, r30
    1732:	3e c0       	rjmp	.+124    	; 0x17b0 <free+0x118>
    1734:	d9 01       	movw	r26, r18
    1736:	13 96       	adiw	r26, 0x03	; 3
    1738:	fc 93       	st	X, r31
    173a:	ee 93       	st	-X, r30
    173c:	12 97       	sbiw	r26, 0x02	; 2
    173e:	4d 91       	ld	r20, X+
    1740:	5d 91       	ld	r21, X+
    1742:	a4 0f       	add	r26, r20
    1744:	b5 1f       	adc	r27, r21
    1746:	ea 17       	cp	r30, r26
    1748:	fb 07       	cpc	r31, r27
    174a:	79 f4       	brne	.+30     	; 0x176a <free+0xd2>
    174c:	80 81       	ld	r24, Z
    174e:	91 81       	ldd	r25, Z+1	; 0x01
    1750:	84 0f       	add	r24, r20
    1752:	95 1f       	adc	r25, r21
    1754:	02 96       	adiw	r24, 0x02	; 2
    1756:	d9 01       	movw	r26, r18
    1758:	11 96       	adiw	r26, 0x01	; 1
    175a:	9c 93       	st	X, r25
    175c:	8e 93       	st	-X, r24
    175e:	82 81       	ldd	r24, Z+2	; 0x02
    1760:	93 81       	ldd	r25, Z+3	; 0x03
    1762:	13 96       	adiw	r26, 0x03	; 3
    1764:	9c 93       	st	X, r25
    1766:	8e 93       	st	-X, r24
    1768:	12 97       	sbiw	r26, 0x02	; 2
    176a:	e0 e0       	ldi	r30, 0x00	; 0
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	9b 81       	ldd	r25, Y+3	; 0x03
    1772:	00 97       	sbiw	r24, 0x00	; 0
    1774:	19 f0       	breq	.+6      	; 0x177c <free+0xe4>
    1776:	fe 01       	movw	r30, r28
    1778:	ec 01       	movw	r28, r24
    177a:	f9 cf       	rjmp	.-14     	; 0x176e <free+0xd6>
    177c:	ce 01       	movw	r24, r28
    177e:	02 96       	adiw	r24, 0x02	; 2
    1780:	28 81       	ld	r18, Y
    1782:	39 81       	ldd	r19, Y+1	; 0x01
    1784:	82 0f       	add	r24, r18
    1786:	93 1f       	adc	r25, r19
    1788:	20 91 d6 02 	lds	r18, 0x02D6
    178c:	30 91 d7 02 	lds	r19, 0x02D7
    1790:	28 17       	cp	r18, r24
    1792:	39 07       	cpc	r19, r25
    1794:	69 f4       	brne	.+26     	; 0x17b0 <free+0x118>
    1796:	30 97       	sbiw	r30, 0x00	; 0
    1798:	29 f4       	brne	.+10     	; 0x17a4 <free+0x10c>
    179a:	10 92 d9 02 	sts	0x02D9, r1
    179e:	10 92 d8 02 	sts	0x02D8, r1
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <free+0x110>
    17a4:	13 82       	std	Z+3, r1	; 0x03
    17a6:	12 82       	std	Z+2, r1	; 0x02
    17a8:	d0 93 d7 02 	sts	0x02D7, r29
    17ac:	c0 93 d6 02 	sts	0x02D6, r28
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <memset>:
    17b6:	dc 01       	movw	r26, r24
    17b8:	01 c0       	rjmp	.+2      	; 0x17bc <memset+0x6>
    17ba:	6d 93       	st	X+, r22
    17bc:	41 50       	subi	r20, 0x01	; 1
    17be:	50 40       	sbci	r21, 0x00	; 0
    17c0:	e0 f7       	brcc	.-8      	; 0x17ba <memset+0x4>
    17c2:	08 95       	ret

000017c4 <_exit>:
    17c4:	f8 94       	cli

000017c6 <__stop_program>:
    17c6:	ff cf       	rjmp	.-2      	; 0x17c6 <__stop_program>
