
rfm12b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800100  00001878  0000190c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001878  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fa  008001e0  008001e0  000019ec  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000019ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000269  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000222b  00000000  00000000  00001cb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009c5  00000000  00000000  00003ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012e5  00000000  00000000  000048a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  00005b8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000073f  00000000  00000000  00005dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f7c  00000000  00000000  0000652b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  000074a7  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d6 01 	jmp	0x3ac	; 0x3ac <__ctors_end>
       4:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       8:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
       c:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_3>
      10:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      14:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      18:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      1c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      20:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      24:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      28:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      2c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      30:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      34:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      38:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      3c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      40:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      44:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      48:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      4c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      50:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      54:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      58:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      5c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      60:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      64:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      68:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      6c:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      70:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      74:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>
      78:	0c 94 f3 01 	jmp	0x3e6	; 0x3e6 <__bad_interrupt>

0000007c <_ZL9init_cmds>:
      7c:	d6 80 01 82 f4 a4 02 c6 2d 94 ab c2 81 ca f7 c4     ........-.......
      8c:	70 98 00 c8 00 e0 81 82                             p.......

00000094 <ascii_6x8>:
      94:	02 00 00 00 00 00 00 01 22 20 20 20 00 00 20 01     ........"   .. .
      a4:	52 50 50 00 00 00 00 01 52 50 f8 50 f8 50 50 01     RPP.....RP.P.PP.
      b4:	22 78 a0 70 28 f0 20 01 c2 c8 10 20 40 98 18 01     "x.p(. .... @...
      c4:	62 90 a0 40 a8 90 68 01 62 20 40 00 00 00 00 01     b..@..h.b @.....
      d4:	12 20 40 40 40 20 10 01 42 20 10 10 10 20 40 01     . @@@ ..B ... @.
      e4:	02 20 a8 70 a8 20 00 01 02 20 20 f8 20 20 00 01     . .p. ...  .  ..
      f4:	02 00 00 00 00 60 20 41 02 00 00 f8 00 00 00 01     .....` A........
     104:	02 00 00 00 00 60 60 01 02 08 10 20 40 80 00 01     .....``.... @...
     114:	72 88 98 a8 c8 88 70 01 22 60 20 20 20 20 70 01     r.....p."`    p.
     124:	72 88 08 10 20 40 f8 01 fa 10 20 10 08 88 70 01     r... @.... ...p.
     134:	12 30 50 90 f8 10 10 01 fa 80 f0 08 08 88 70 01     .0P...........p.
     144:	32 40 80 f0 88 88 70 01 fa 08 10 20 40 40 40 01     2@....p.... @@@.
     154:	72 88 88 70 88 88 70 01 72 88 88 78 08 10 60 01     r..p..p.r..x..`.
     164:	02 60 60 00 60 60 00 01 02 60 60 00 60 20 40 01     .``.``...``.` @.
     174:	12 20 40 80 40 20 10 01 02 00 f8 00 f8 00 00 01     . @.@ ..........
     184:	42 20 10 08 10 20 40 01 72 88 08 10 20 00 20 01     B ... @.r... . .
     194:	72 88 08 68 a8 a8 70 01 72 88 88 88 f8 88 88 01     r..h..p.r.......
     1a4:	f2 88 88 f0 88 88 f0 01 72 88 80 80 80 88 70 01     ........r.....p.
     1b4:	e2 90 88 88 88 90 e0 01 fa 80 80 f0 80 80 f8 01     ................
     1c4:	fa 80 80 f0 80 80 80 01 72 88 80 b8 88 88 78 01     ........r.....x.
     1d4:	8a 88 88 f8 88 88 88 01 72 20 20 20 20 20 70 01     ........r     p.
     1e4:	3a 10 10 10 10 90 60 01 8a 90 a0 c0 a0 90 88 01     :.....`.........
     1f4:	82 80 80 80 80 80 f8 01 8a d8 a8 a8 88 88 88 01     ................
     204:	8a 88 c8 a8 98 88 88 01 72 88 88 88 88 88 70 01     ........r.....p.
     214:	f2 88 88 f0 80 80 80 01 72 88 88 88 a8 90 68 01     ........r.....h.
     224:	f2 88 88 f0 a0 90 88 01 7a 80 80 70 08 08 f0 01     ........z..p....
     234:	fa 20 20 20 20 20 20 01 8a 88 88 88 88 88 70 01     .      .......p.
     244:	8a 88 88 88 88 50 20 01 8a 88 88 a8 a8 a8 50 01     .....P .......P.
     254:	8a 88 50 20 50 88 88 01 8a 88 88 50 20 20 20 01     ..P P......P   .
     264:	fa 08 10 20 40 80 f8 01 72 40 40 40 40 40 70 01     ... @...r@@@@@p.
     274:	02 80 40 20 10 08 00 01 72 10 10 10 10 10 70 01     ..@ ....r.....p.
     284:	22 50 88 00 00 00 00 01 02 00 00 00 00 00 f8 01     "P..............
     294:	42 20 10 00 00 00 00 01 02 00 70 08 78 88 78 01     B ........p.x.x.
     2a4:	82 80 b0 c8 88 88 f0 01 02 00 70 80 80 88 70 01     ..........p...p.
     2b4:	0a 08 68 98 88 88 78 01 02 00 70 88 f8 80 70 01     ..h...x...p...p.
     2c4:	32 48 40 e0 40 40 40 01 02 78 88 88 78 08 70 01     2H@.@@@..x..x.p.
     2d4:	82 80 b0 c8 88 88 88 01 22 00 60 20 20 20 70 01     ........".`   p.
     2e4:	12 00 30 10 10 90 60 01 82 80 90 a0 c0 a0 90 01     ..0...`.........
     2f4:	62 20 20 20 20 20 70 01 02 00 d0 a8 a8 a8 a8 01     b     p.........
     304:	02 00 b0 c8 88 88 88 01 02 00 70 88 88 88 70 01     ..........p...p.
     314:	02 00 f0 88 f0 80 80 01 02 00 68 98 78 08 08 01     ..........h.x...
     324:	02 00 b0 c8 80 80 80 01 02 00 70 80 70 08 f0 01     ..........p.p...
     334:	42 40 e0 40 40 48 30 01 02 00 88 88 88 98 68 01     B@.@@H0.......h.
     344:	02 00 88 88 88 50 20 01 02 00 88 88 a8 a8 50 01     .....P .......P.
     354:	02 00 88 50 20 50 88 01 02 00 88 88 78 08 70 01     ...P P......x.p.
     364:	02 00 f8 10 20 40 f8 01 12 20 20 40 20 20 10 01     .... @...  @  ..
     374:	22 20 20 20 20 20 20 01 42 20 20 10 20 20 40 01     "      .B  .  @.
     384:	02 00 68 90 00 00 00 01 02 00 00 00 00 00 00 01     ..h.............
     394:	00 50 50 00 00 88 70 00 00 50 50 00 00 70 88 00     .PP...p..PP..p..
     3a4:	00 50 50 00 88 a8 50 00                             .PP...P.

000003ac <__ctors_end>:
     3ac:	11 24       	eor	r1, r1
     3ae:	1f be       	out	0x3f, r1	; 63
     3b0:	cf ef       	ldi	r28, 0xFF	; 255
     3b2:	d0 e1       	ldi	r29, 0x10	; 16
     3b4:	de bf       	out	0x3e, r29	; 62
     3b6:	cd bf       	out	0x3d, r28	; 61

000003b8 <__do_copy_data>:
     3b8:	11 e0       	ldi	r17, 0x01	; 1
     3ba:	a0 e0       	ldi	r26, 0x00	; 0
     3bc:	b1 e0       	ldi	r27, 0x01	; 1
     3be:	e8 e7       	ldi	r30, 0x78	; 120
     3c0:	f8 e1       	ldi	r31, 0x18	; 24
     3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <.do_copy_data_start>

000003c4 <.do_copy_data_loop>:
     3c4:	05 90       	lpm	r0, Z+
     3c6:	0d 92       	st	X+, r0

000003c8 <.do_copy_data_start>:
     3c8:	a0 3e       	cpi	r26, 0xE0	; 224
     3ca:	b1 07       	cpc	r27, r17
     3cc:	d9 f7       	brne	.-10     	; 0x3c4 <.do_copy_data_loop>

000003ce <__do_clear_bss>:
     3ce:	12 e0       	ldi	r17, 0x02	; 2
     3d0:	a0 ee       	ldi	r26, 0xE0	; 224
     3d2:	b1 e0       	ldi	r27, 0x01	; 1
     3d4:	01 c0       	rjmp	.+2      	; 0x3d8 <.do_clear_bss_start>

000003d6 <.do_clear_bss_loop>:
     3d6:	1d 92       	st	X+, r1

000003d8 <.do_clear_bss_start>:
     3d8:	aa 3d       	cpi	r26, 0xDA	; 218
     3da:	b1 07       	cpc	r27, r17
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <.do_clear_bss_loop>
     3de:	0e 94 4e 02 	call	0x49c	; 0x49c <main>
     3e2:	0c 94 3a 0c 	jmp	0x1874	; 0x1874 <_exit>

000003e6 <__bad_interrupt>:
     3e6:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

000003ea <_ZN3tftL5cleanEv>:

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
     3ea:	80 91 cb 02 	lds	r24, 0x02CB
     3ee:	90 91 cc 02 	lds	r25, 0x02CC
     3f2:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN3tft4fillEj>
     3f6:	10 92 c2 02 	sts	0x02C2, r1
     3fa:	10 92 c1 02 	sts	0x02C1, r1
     3fe:	10 92 c4 02 	sts	0x02C4, r1
     402:	10 92 c3 02 	sts	0x02C3, r1
     406:	08 95       	ret

00000408 <_Z4initv>:
     408:	0e 94 71 07 	call	0xee2	; 0xee2 <_ZN3tft4initEv>
     40c:	82 e0       	ldi	r24, 0x02	; 2
     40e:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_ZN3tft9setOrientEh>
     412:	8f ef       	ldi	r24, 0xFF	; 255
     414:	9f ef       	ldi	r25, 0xFF	; 255
     416:	90 93 cc 02 	sts	0x02CC, r25
     41a:	80 93 cb 02 	sts	0x02CB, r24
     41e:	10 92 ca 02 	sts	0x02CA, r1
     422:	10 92 c9 02 	sts	0x02C9, r1
     426:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
     42a:	0e 94 20 0a 	call	0x1440	; 0x1440 <_Z6tftoutv>
     42e:	90 93 d3 02 	sts	0x02D3, r25
     432:	80 93 d2 02 	sts	0x02D2, r24

static inline void tfthw::setBGLight(bool ctrl)
{
	if (ctrl)
		TFT_WCTRL |= TFT_BLC;
     436:	11 9a       	sbi	0x02, 1	; 2
     438:	08 95       	ret

0000043a <_Z8init_sysv>:
     43a:	0e 94 04 02 	call	0x408	; 0x408 <_Z4initv>
     43e:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
     442:	83 e0       	ldi	r24, 0x03	; 3
     444:	80 93 be 02 	sts	0x02BE, r24
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	98 ef       	ldi	r25, 0xF8	; 248
     44c:	90 93 cc 02 	sts	0x02CC, r25
     450:	80 93 cb 02 	sts	0x02CB, r24
     454:	0e 94 f5 01 	call	0x3ea	; 0x3ea <_ZN3tftL5cleanEv>
     458:	80 ee       	ldi	r24, 0xE0	; 224
     45a:	97 e0       	ldi	r25, 0x07	; 7
     45c:	90 93 ca 02 	sts	0x02CA, r25
     460:	80 93 c9 02 	sts	0x02C9, r24
     464:	80 e0       	ldi	r24, 0x00	; 0
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     46c:	82 e1       	ldi	r24, 0x12	; 18
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     474:	83 e1       	ldi	r24, 0x13	; 19
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     47c:	83 e2       	ldi	r24, 0x23	; 35
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	80 93 be 02 	sts	0x02BE, r24
     48a:	83 e3       	ldi	r24, 0x33	; 51
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     492:	8f e5       	ldi	r24, 0x5F	; 95
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     49a:	08 95       	ret

0000049c <main>:
     49c:	af 92       	push	r10
     49e:	bf 92       	push	r11
     4a0:	cf 92       	push	r12
     4a2:	df 92       	push	r13
     4a4:	ef 92       	push	r14
     4a6:	ff 92       	push	r15
     4a8:	1f 93       	push	r17
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	28 97       	sbiw	r28, 0x08	; 8
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
     4be:	0e 94 1d 02 	call	0x43a	; 0x43a <_Z8init_sysv>
     4c2:	88 ee       	ldi	r24, 0xE8	; 232
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	2c e2       	ldi	r18, 0x2C	; 44
     4c8:	31 e0       	ldi	r19, 0x01	; 1
     4ca:	f9 01       	movw	r30, r18
     4cc:	31 97       	sbiw	r30, 0x01	; 1
     4ce:	f1 f7       	brne	.-4      	; 0x4cc <main+0x30>
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	d9 f7       	brne	.-10     	; 0x4ca <main+0x2e>
     4d4:	0e 94 9b 04 	call	0x936	; 0x936 <rfm12_init>
     4d8:	88 ee       	ldi	r24, 0xE8	; 232
     4da:	93 e0       	ldi	r25, 0x03	; 3
     4dc:	2c e2       	ldi	r18, 0x2C	; 44
     4de:	31 e0       	ldi	r19, 0x01	; 1
     4e0:	f9 01       	movw	r30, r18
     4e2:	31 97       	sbiw	r30, 0x01	; 1
     4e4:	f1 f7       	brne	.-4      	; 0x4e2 <main+0x46>
     4e6:	01 97       	sbiw	r24, 0x01	; 1
     4e8:	d9 f7       	brne	.-10     	; 0x4e0 <main+0x44>
     4ea:	de 01       	movw	r26, r28
     4ec:	11 96       	adiw	r26, 0x01	; 1
     4ee:	ef e7       	ldi	r30, 0x7F	; 127
     4f0:	f1 e0       	ldi	r31, 0x01	; 1
     4f2:	88 e0       	ldi	r24, 0x08	; 8
     4f4:	01 90       	ld	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	81 50       	subi	r24, 0x01	; 1
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <main+0x58>
     4fc:	78 94       	sei
     4fe:	5e 01       	movw	r10, r28
     500:	08 94       	sec
     502:	a1 1c       	adc	r10, r1
     504:	b1 1c       	adc	r11, r1
     506:	fc ed       	ldi	r31, 0xDC	; 220
     508:	cf 2e       	mov	r12, r31
     50a:	f5 e0       	ldi	r31, 0x05	; 5
     50c:	df 2e       	mov	r13, r31
	/** \returns STATUS_FREE or STATUS_COMPLETE
	* \see \ref rxtx_states "rx buffer states", rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer(), rfm12_rx_clear() and rf_rx_buffer_t
	*/
	static inline uint8_t rfm12_rx_status(void) {
		return rf_rx_buffers[ctrl.buffer_out_num].status;
     50e:	ec e2       	ldi	r30, 0x2C	; 44
     510:	ee 2e       	mov	r14, r30
     512:	e1 e0       	ldi	r30, 0x01	; 1
     514:	fe 2e       	mov	r15, r30
     516:	20 91 b4 02 	lds	r18, 0x02B4
     51a:	82 2f       	mov	r24, r18
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	fc 01       	movw	r30, r24
     520:	75 e0       	ldi	r23, 0x05	; 5
     522:	ee 0f       	add	r30, r30
     524:	ff 1f       	adc	r31, r31
     526:	7a 95       	dec	r23
     528:	e1 f7       	brne	.-8      	; 0x522 <main+0x86>
     52a:	88 0f       	add	r24, r24
     52c:	99 1f       	adc	r25, r25
     52e:	e8 0f       	add	r30, r24
     530:	f9 1f       	adc	r31, r25
     532:	e5 59       	subi	r30, 0x95	; 149
     534:	fd 4f       	sbci	r31, 0xFD	; 253
     536:	80 81       	ld	r24, Z
     538:	82 30       	cpi	r24, 0x02	; 2
     53a:	b9 f5       	brne	.+110    	; 0x5aa <main+0x10e>
     53c:	82 2f       	mov	r24, r18
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	9c 01       	movw	r18, r24
     542:	55 e0       	ldi	r21, 0x05	; 5
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	5a 95       	dec	r21
     54a:	e1 f7       	brne	.-8      	; 0x544 <main+0xa8>
     54c:	88 0f       	add	r24, r24
     54e:	99 1f       	adc	r25, r25
     550:	28 0f       	add	r18, r24
     552:	39 1f       	adc	r19, r25
     554:	21 59       	subi	r18, 0x91	; 145
     556:	3d 4f       	sbci	r19, 0xFD	; 253
     558:	30 93 e1 01 	sts	0x01E1, r19
     55c:	20 93 e0 01 	sts	0x01E0, r18
     560:	10 e0       	ldi	r17, 0x00	; 0
     562:	0f c0       	rjmp	.+30     	; 0x582 <main+0xe6>
     564:	e0 91 e0 01 	lds	r30, 0x01E0
     568:	f0 91 e1 01 	lds	r31, 0x01E1
     56c:	e1 0f       	add	r30, r17
     56e:	f1 1d       	adc	r31, r1
     570:	60 91 d2 02 	lds	r22, 0x02D2
     574:	70 91 d3 02 	lds	r23, 0x02D3
     578:	80 81       	ld	r24, Z
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	0e 94 b1 0a 	call	0x1562	; 0x1562 <fputc>
     580:	1f 5f       	subi	r17, 0xFF	; 255
     582:	80 91 b4 02 	lds	r24, 0x02B4
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	fc 01       	movw	r30, r24
     58a:	35 e0       	ldi	r19, 0x05	; 5
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	3a 95       	dec	r19
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0xf0>
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	e8 0f       	add	r30, r24
     59a:	f9 1f       	adc	r31, r25
     59c:	e5 59       	subi	r30, 0x95	; 149
     59e:	fd 4f       	sbci	r31, 0xFD	; 253
     5a0:	81 81       	ldd	r24, Z+1	; 0x01
     5a2:	18 17       	cp	r17, r24
     5a4:	f8 f2       	brcs	.-66     	; 0x564 <main+0xc8>
     5a6:	0e 94 85 04 	call	0x90a	; 0x90a <rfm12_rx_clear>
     5aa:	8d e7       	ldi	r24, 0x7D	; 125
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <puts>
     5b2:	88 e0       	ldi	r24, 0x08	; 8
     5b4:	60 e0       	ldi	r22, 0x00	; 0
     5b6:	a5 01       	movw	r20, r10
     5b8:	0e 94 ee 04 	call	0x9dc	; 0x9dc <rfm12_tx>
     5bc:	10 e0       	ldi	r17, 0x00	; 0
     5be:	0e 94 3a 04 	call	0x874	; 0x874 <rfm12_tick>
     5c2:	c6 01       	movw	r24, r12
     5c4:	01 97       	sbiw	r24, 0x01	; 1
     5c6:	f1 f7       	brne	.-4      	; 0x5c4 <main+0x128>
     5c8:	1f 5f       	subi	r17, 0xFF	; 255
     5ca:	14 36       	cpi	r17, 0x64	; 100
     5cc:	c1 f7       	brne	.-16     	; 0x5be <main+0x122>
     5ce:	88 e8       	ldi	r24, 0x88	; 136
     5d0:	93 e1       	ldi	r25, 0x13	; 19
     5d2:	f7 01       	movw	r30, r14
     5d4:	31 97       	sbiw	r30, 0x01	; 1
     5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x138>
     5d8:	01 97       	sbiw	r24, 0x01	; 1
     5da:	d9 f7       	brne	.-10     	; 0x5d2 <main+0x136>
     5dc:	9c cf       	rjmp	.-200    	; 0x516 <main+0x7a>

000005de <_ZL10rfm12_dataj>:


//non-inlined version of rfm12_data
//warning: without the attribute, gcc will inline this even if -Os is set
static void __attribute__ ((noinline)) rfm12_data(uint16_t d) {
     5de:	2c 98       	cbi	0x05, 4	; 5
	SS_ASSERT();
	#if !(RFM12_SPI_SOFTWARE)
		SPDR = d >> 8;
     5e0:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     5e2:	0d b4       	in	r0, 0x2d	; 45
     5e4:	07 fe       	sbrs	r0, 7
     5e6:	fd cf       	rjmp	.-6      	; 0x5e2 <_ZL10rfm12_dataj+0x4>

		SPDR = d & 0xff;
     5e8:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     5ea:	0d b4       	in	r0, 0x2d	; 45
     5ec:	07 fe       	sbrs	r0, 7
     5ee:	fd cf       	rjmp	.-6      	; 0x5ea <_ZL10rfm12_dataj+0xc>
	#else
		spi_data(d >> 8);
		spi_data(d & 0xff);
	#endif
	SS_RELEASE();
     5f0:	2c 9a       	sbi	0x05, 4	; 5
}
     5f2:	08 95       	ret

000005f4 <_ZL10rfm12_readj>:


//non-inlined version of rfm12_read
//warning: without the attribute, gcc will inline this even if -Os is set
static uint16_t __attribute__ ((noinline)) rfm12_read(uint16_t c) {
     5f4:	2c 98       	cbi	0x05, 4	; 5
	uint16_t retval;
	SS_ASSERT();

	#if !(RFM12_SPI_SOFTWARE)
		SPDR = c >> 8;
     5f6:	9e bd       	out	0x2e, r25	; 46
		while (!(SPSR & (1<<SPIF)));
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <_ZL10rfm12_readj+0x4>
		retval = SPDR << 8;
     5fe:	3e b5       	in	r19, 0x2e	; 46
		SPDR = c & 0xff;
     600:	8e bd       	out	0x2e, r24	; 46
		while (!(SPSR & (1<<SPIF)));
     602:	0d b4       	in	r0, 0x2d	; 45
     604:	07 fe       	sbrs	r0, 7
     606:	fd cf       	rjmp	.-6      	; 0x602 <_ZL10rfm12_readj+0xe>
		retval |= SPDR;
     608:	2e b5       	in	r18, 0x2e	; 46
     60a:	93 2f       	mov	r25, r19
     60c:	80 e0       	ldi	r24, 0x00	; 0
	#else
		retval = spi_data(c >> 8);
		retval <<= 8;
		retval |= spi_data(c & 0xff);
	#endif
	SS_RELEASE();
     60e:	2c 9a       	sbi	0x05, 4	; 5
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	28 2b       	or	r18, r24
     614:	39 2b       	or	r19, r25
	return retval;
}
     616:	c9 01       	movw	r24, r18
     618:	08 95       	ret

0000061a <_Z15rfm12_data_safej>:
	}
#endif

#if RFM12_LIVECTRL_HOST
	void rfm12_data_safe(uint16_t d) {
     61a:	ea 98       	cbi	0x1d, 2	; 29
		//disable the interrupt (as we're working directly with the transceiver now)
		RFM12_INT_OFF();
		rfm12_data(d);
     61c:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
		RFM12_INT_ON();
     620:	ea 9a       	sbi	0x1d, 2	; 29
	}
     622:	08 95       	ret

00000624 <rfm12_livectrl>:


	void rfm12_livectrl(uint8_t cmd, uint16_t value) {
     624:	cf 93       	push	r28
     626:	df 93       	push	r29
		uint16_t tmp = 0;
		livectrl_cmd_t  *livectrl_cmd = &livectrl_cmds[cmd];
     628:	a8 2f       	mov	r26, r24
     62a:	b0 e0       	ldi	r27, 0x00	; 0

		livectrl_cmd->current_value = value; //update current value
     62c:	fd 01       	movw	r30, r26
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	ee 0f       	add	r30, r30
     632:	ff 1f       	adc	r31, r31
     634:	8a 95       	dec	r24
     636:	e1 f7       	brne	.-8      	; 0x630 <rfm12_livectrl+0xc>
     638:	e9 57       	subi	r30, 0x79	; 121
     63a:	fe 4f       	sbci	r31, 0xFE	; 254
     63c:	77 83       	std	Z+7, r23	; 0x07
     63e:	66 83       	std	Z+6, r22	; 0x06

		//the shadow register is somewhat redundant with the current value,
		//but it makes sense never the less:
		//the current_value only saves the bits for this one setting (for menu,saving,loding settings)
		//while the shadow register keeps track of ALL bits the rfm12 has in that register.
		//the shadow will also be used from rfm12_tick or maybe the interrupt

		if (livectrl_cmd->shadow_register) {
     640:	fd 01       	movw	r30, r26
     642:	53 e0       	ldi	r21, 0x03	; 3
     644:	ee 0f       	add	r30, r30
     646:	ff 1f       	adc	r31, r31
     648:	5a 95       	dec	r21
     64a:	e1 f7       	brne	.-8      	; 0x644 <rfm12_livectrl+0x20>
     64c:	e5 57       	subi	r30, 0x75	; 117
     64e:	fe 4f       	sbci	r31, 0xFE	; 254
     650:	c0 81       	ld	r28, Z
     652:	d1 81       	ldd	r29, Z+1	; 0x01
     654:	20 97       	sbiw	r28, 0x00	; 0
     656:	19 f4       	brne	.+6      	; 0x65e <rfm12_livectrl+0x3a>
     658:	40 e0       	ldi	r20, 0x00	; 0
     65a:	50 e0       	ldi	r21, 0x00	; 0
     65c:	10 c0       	rjmp	.+32     	; 0x67e <rfm12_livectrl+0x5a>
			tmp = *livectrl_cmd->shadow_register;         //load shadow value if any
     65e:	88 81       	ld	r24, Y
     660:	99 81       	ldd	r25, Y+1	; 0x01
			tmp &= ~livectrl_cmd->rfm12_hw_parameter_mask;//clear parameter bits
     662:	fd 01       	movw	r30, r26
     664:	43 e0       	ldi	r20, 0x03	; 3
     666:	ee 0f       	add	r30, r30
     668:	ff 1f       	adc	r31, r31
     66a:	4a 95       	dec	r20
     66c:	e1 f7       	brne	.-8      	; 0x666 <rfm12_livectrl+0x42>
     66e:	e7 57       	subi	r30, 0x77	; 119
     670:	fe 4f       	sbci	r31, 0xFE	; 254
     672:	40 81       	ld	r20, Z
     674:	51 81       	ldd	r21, Z+1	; 0x01
     676:	40 95       	com	r20
     678:	50 95       	com	r21
     67a:	48 23       	and	r20, r24
     67c:	59 23       	and	r21, r25
		}
		tmp |= livectrl_cmd->rfm12_hw_command | (livectrl_cmd->rfm12_hw_parameter_mask & value);
     67e:	33 e0       	ldi	r19, 0x03	; 3
     680:	aa 0f       	add	r26, r26
     682:	bb 1f       	adc	r27, r27
     684:	3a 95       	dec	r19
     686:	e1 f7       	brne	.-8      	; 0x680 <rfm12_livectrl+0x5c>
     688:	fd 01       	movw	r30, r26
     68a:	e7 57       	subi	r30, 0x77	; 119
     68c:	fe 4f       	sbci	r31, 0xFE	; 254
     68e:	80 81       	ld	r24, Z
     690:	91 81       	ldd	r25, Z+1	; 0x01
     692:	86 23       	and	r24, r22
     694:	97 23       	and	r25, r23
     696:	a9 57       	subi	r26, 0x79	; 121
     698:	be 4f       	sbci	r27, 0xFE	; 254
     69a:	2d 91       	ld	r18, X+
     69c:	3c 91       	ld	r19, X
     69e:	82 2b       	or	r24, r18
     6a0:	93 2b       	or	r25, r19
     6a2:	84 2b       	or	r24, r20
     6a4:	95 2b       	or	r25, r21

		*livectrl_cmd->shadow_register = tmp;
     6a6:	99 83       	std	Y+1, r25	; 0x01
     6a8:	88 83       	st	Y, r24

		rfm12_data_safe(tmp);
     6aa:	0e 94 0d 03 	call	0x61a	; 0x61a <_Z15rfm12_data_safej>
	}
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <__vector_3>:
//if polling is used, do not define an interrupt handler, but a polling function
#if (RFM12_USE_POLLING)
void rfm12_poll(void)
#else
ISR(RFM12_INT_VECT, ISR_NOBLOCK)
     6b4:	78 94       	sei
     6b6:	1f 92       	push	r1
     6b8:	0f 92       	push	r0
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	0f 92       	push	r0
     6be:	11 24       	eor	r1, r1
     6c0:	cf 92       	push	r12
     6c2:	df 92       	push	r13
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
#endif
{
	RFM12_INT_OFF();
     6e4:	ea 98       	cbi	0x1d, 2	; 29
     6e6:	00 91 bd 02 	lds	r16, 0x02BD
	uint8_t status;
	uint8_t recheck_interrupt;
//	uint8_t *bufptr;
	//if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		static uint8_t checksum; //static local variables produce smaller code size than globals
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	do {
		//clear AVR int flag
#ifdef __PLATFORM_AVR__
		RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
     6ea:	84 e0       	ldi	r24, 0x04	; 4
     6ec:	c8 2e       	mov	r12, r24
#endif

		//first we read the first byte of the status register
		//to get the interrupt flags
		status = rfm12_read_int_flags_inline();

		//if we use at least one of the status bits, we need to check the status again
		//for the case in which another interrupt condition occured while we were handeling
		//the first one.
		recheck_interrupt = 0;

		#if RFM12_UART_DEBUG >= 2
			uart_putc('S');
			uart_putc(status);
		#endif

		//low battery detector feature
		#if RFM12_LOW_BATT_DETECTOR
			if (status & (RFM12_STATUS_LBD >> 8)) {
				//debug
				#if RFM12_UART_DEBUG >= 2
					uart_putc('L');
				#endif

				//set status variable to low battery
				ctrl.low_batt = RFM12_BATT_LOW;
				recheck_interrupt = 1;
			}
		#endif /* RFM12_LOW_BATT_DETECTOR */

		//wakeup timer feature
		#if RFM12_USE_WAKEUP_TIMER
			if (status & (RFM12_STATUS_WKUP >> 8)) {
				//debug
				#if RFM12_UART_DEBUG >= 2
					uart_putc('W');
				#endif

				ctrl.wkup_flag = 1;
				recheck_interrupt = 1;
			}
			if (status & ((RFM12_STATUS_WKUP | RFM12_STATUS_FFIT) >> 8) ) {
				//restart the wakeup timer by toggling the bit on and off
				rfm12_data(ctrl.pwrmgt_shadow & ~RFM12_PWRMGT_EW);
				rfm12_data(ctrl.pwrmgt_shadow);
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if the fifo interrupt occurred
		if (status & (RFM12_STATUS_FFIT>>8)) {
			//yes
			recheck_interrupt = 1;
			//see what we have to do (start rx, rx or tx)
			switch (ctrl.rfm12_state) {
				case STATE_RX_IDLE: {
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;

						//init the bytecounter - remember, we will read the length byte, so this must be 1
						ctrl.bytecount = 1;

						//read the length byte,  and write it to the checksum
						//remember, the first byte is the length byte
						data = rfm12_read(RFM12_CMD_READ);
						checksum = data;

						//add the packet overhead and store it into a working variable
						ctrl.num_bytes = data + PACKET_OVERHEAD;

						//debug
						#if RFM12_UART_DEBUG >= 2
							uart_putc('I');
							uart_putc(data);
						#endif

						//see whether our buffer is free
						//FIXME: put this into global statekeeping struct, the free state can be set by the function which pulls the packet, i guess
						if (rf_rx_buffers[ctrl.buffer_in_num].status == STATUS_FREE) {
							//the current receive buffer is empty, so we start receiving
							ctrl.rfm12_state = STATE_RX_ACTIVE;

							//store the received length into the packet buffer
							//this length field will be used by application reading the
							//buffer.
							rf_rx_buffers[ctrl.buffer_in_num].len = data;

							//end the interrupt without resetting the fifo
							goto no_fifo_reset;
						}

						/* if we're here, the buffer is full, so we ignore this transmission by resetting the fifo (at the end of the function)  */
					#endif /* !(RFM12_TRANSMIT_ONLY) */

					} break;

				case STATE_RX_ACTIVE: {
					//if receive mode is not disabled (default)
					#if !(RFM12_TRANSMIT_ONLY)
						uint8_t data;
						//read a byte
						data = rfm12_read(RFM12_CMD_READ);

						//check if transmission is complete
						if (ctrl.bytecount < ctrl.num_bytes) {
							//debug
							#if RFM12_UART_DEBUG >= 2
								uart_putc('R');
								uart_putc(data);
							#endif

							//xor the remaining bytes onto the checksum
							//note: only the header will be effectively checked
							checksum ^= data;

							//put next byte into buffer, if there is enough space
							if (ctrl.bytecount < (RFM12_RX_BUFFER_SIZE + 3)) {
								//hackhack: begin writing to struct at offsetof len
								(& rf_rx_buffers[ctrl.buffer_in_num].len)[ctrl.bytecount] = data;
							}
#ifndef DISABLE_CHECKSUMM
							//check header against checksum
							if (ctrl.bytecount == 2 && checksum != 0xff) {
								//if the checksum does not match, reset the fifo
								break;
							}
#endif

							//increment bytecount
							ctrl.bytecount++;

							//end the interrupt without resetting the fifo
							goto no_fifo_reset;
						}

						/* if we're here, receiving is done */
						/* the fifo will be reset at the end of the function */

						//debug
						#if RFM12_UART_DEBUG >= 2
							uart_putc('D');
						#endif

						//indicate that the buffer is ready to be used
						rf_rx_buffers[ctrl.buffer_in_num].status = STATUS_COMPLETE;
     6ee:	12 e0       	ldi	r17, 0x02	; 2
     6f0:	d1 2e       	mov	r13, r17
     6f2:	b2 e2       	ldi	r27, 0x22	; 34
     6f4:	eb 2e       	mov	r14, r27
     6f6:	ff 24       	eor	r15, r15
     6f8:	f3 94       	inc	r15
     6fa:	cc ba       	out	0x1c, r12	; 28


/* @description reads the upper 8 bits of the status
 * register (the interrupt flags)
 */
static uint8_t rfm12_read_int_flags_inline(void) {
	#if !(RFM12_SPI_SOFTWARE)
		SS_ASSERT();
     6fc:	2c 98       	cbi	0x05, 4	; 5
		SPDR = 0;
     6fe:	1e bc       	out	0x2e, r1	; 46
		while (!(SPSR & (1<<SPIF)));
     700:	0d b4       	in	r0, 0x2d	; 45
     702:	07 fe       	sbrs	r0, 7
     704:	fd cf       	rjmp	.-6      	; 0x700 <__vector_3+0x4c>
		SS_RELEASE();
     706:	2c 9a       	sbi	0x05, 4	; 5
     708:	0e b4       	in	r0, 0x2e	; 46
     70a:	07 fe       	sbrs	r0, 7
     70c:	99 c0       	rjmp	.+306    	; 0x840 <__vector_3+0x18c>
     70e:	10 91 af 02 	lds	r17, 0x02AF
     712:	11 30       	cpi	r17, 0x01	; 1
     714:	b9 f1       	breq	.+110    	; 0x784 <__vector_3+0xd0>
     716:	11 30       	cpi	r17, 0x01	; 1
     718:	20 f0       	brcs	.+8      	; 0x722 <__vector_3+0x6e>
     71a:	12 30       	cpi	r17, 0x02	; 2
     71c:	09 f0       	breq	.+2      	; 0x720 <__vector_3+0x6c>
     71e:	85 c0       	rjmp	.+266    	; 0x82a <__vector_3+0x176>
     720:	69 c0       	rjmp	.+210    	; 0x7f4 <__vector_3+0x140>
     722:	f0 92 b2 02 	sts	0x02B2, r15
     726:	80 e0       	ldi	r24, 0x00	; 0
     728:	90 eb       	ldi	r25, 0xB0	; 176
     72a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZL10rfm12_readj>
     72e:	08 2f       	mov	r16, r24
     730:	0d 5f       	subi	r16, 0xFD	; 253
     732:	00 93 b1 02 	sts	0x02B1, r16
     736:	03 50       	subi	r16, 0x03	; 3
     738:	20 91 b3 02 	lds	r18, 0x02B3
     73c:	82 2f       	mov	r24, r18
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	fc 01       	movw	r30, r24
     742:	a5 e0       	ldi	r26, 0x05	; 5
     744:	ee 0f       	add	r30, r30
     746:	ff 1f       	adc	r31, r31
     748:	aa 95       	dec	r26
     74a:	e1 f7       	brne	.-8      	; 0x744 <__vector_3+0x90>
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	e8 0f       	add	r30, r24
     752:	f9 1f       	adc	r31, r25
     754:	e5 59       	subi	r30, 0x95	; 149
     756:	fd 4f       	sbci	r31, 0xFD	; 253
     758:	80 81       	ld	r24, Z
     75a:	88 23       	and	r24, r24
     75c:	09 f0       	breq	.+2      	; 0x760 <__vector_3+0xac>
     75e:	65 c0       	rjmp	.+202    	; 0x82a <__vector_3+0x176>
     760:	f0 92 af 02 	sts	0x02AF, r15
     764:	82 2f       	mov	r24, r18
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	fc 01       	movw	r30, r24
     76a:	65 e0       	ldi	r22, 0x05	; 5
     76c:	ee 0f       	add	r30, r30
     76e:	ff 1f       	adc	r31, r31
     770:	6a 95       	dec	r22
     772:	e1 f7       	brne	.-8      	; 0x76c <__vector_3+0xb8>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	e8 0f       	add	r30, r24
     77a:	f9 1f       	adc	r31, r25
     77c:	e5 59       	subi	r30, 0x95	; 149
     77e:	fd 4f       	sbci	r31, 0xFD	; 253
     780:	01 83       	std	Z+1, r16	; 0x01
     782:	bb cf       	rjmp	.-138    	; 0x6fa <__vector_3+0x46>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	90 eb       	ldi	r25, 0xB0	; 176
     788:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZL10rfm12_readj>
     78c:	28 2f       	mov	r18, r24
     78e:	90 91 b2 02 	lds	r25, 0x02B2
     792:	80 91 b1 02 	lds	r24, 0x02B1
     796:	98 17       	cp	r25, r24
     798:	c0 f4       	brcc	.+48     	; 0x7ca <__vector_3+0x116>
     79a:	02 27       	eor	r16, r18
     79c:	91 32       	cpi	r25, 0x21	; 33
     79e:	58 f4       	brcc	.+22     	; 0x7b6 <__vector_3+0x102>
     7a0:	e0 91 b3 02 	lds	r30, 0x02B3
     7a4:	ee 9d       	mul	r30, r14
     7a6:	f0 01       	movw	r30, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	31 96       	adiw	r30, 0x01	; 1
     7ac:	e9 0f       	add	r30, r25
     7ae:	f1 1d       	adc	r31, r1
     7b0:	e5 59       	subi	r30, 0x95	; 149
     7b2:	fd 4f       	sbci	r31, 0xFD	; 253
     7b4:	20 83       	st	Z, r18
     7b6:	80 91 b2 02 	lds	r24, 0x02B2
     7ba:	82 30       	cpi	r24, 0x02	; 2
     7bc:	11 f4       	brne	.+4      	; 0x7c2 <__vector_3+0x10e>
     7be:	0f 3f       	cpi	r16, 0xFF	; 255
     7c0:	a1 f5       	brne	.+104    	; 0x82a <__vector_3+0x176>
     7c2:	8f 5f       	subi	r24, 0xFF	; 255
     7c4:	80 93 b2 02 	sts	0x02B2, r24
     7c8:	98 cf       	rjmp	.-208    	; 0x6fa <__vector_3+0x46>
     7ca:	80 91 b3 02 	lds	r24, 0x02B3
     7ce:	28 2f       	mov	r18, r24
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	f9 01       	movw	r30, r18
     7d4:	45 e0       	ldi	r20, 0x05	; 5
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	4a 95       	dec	r20
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <__vector_3+0x122>
     7de:	22 0f       	add	r18, r18
     7e0:	33 1f       	adc	r19, r19
     7e2:	e2 0f       	add	r30, r18
     7e4:	f3 1f       	adc	r31, r19
     7e6:	e5 59       	subi	r30, 0x95	; 149
     7e8:	fd 4f       	sbci	r31, 0xFD	; 253
     7ea:	d0 82       	st	Z, r13
					
					/*	if (rfm12_rx_status() == STATUS_COMPLETE)
						{

							uint8_t *bufptr;
							tft.clean();
							bufptr = rfm12_rx_buffer(); //get the address of the current rx buffer
							// dump buffer contents to uart			
						for (uint16_t i=0;i<rfm12_rx_len();i++)
						{
							putchar(bufptr[i]);
						}
						// tell the implementation that the buffer
						// can be reused for the next data.
						//rfm12_rx_clear();
						}
						puts("Press D go back to main menu");*/
						
						#if RFM12_USE_RX_CALLBACK
							if (rfm12_rx_callback_func != 0x0000) {
								rfm12_rx_callback_func (ctrl.rf_buffer_in->len, ctrl.rf_buffer_in.buffer);
							}
						#endif

						//switch to other buffer
						ctrl.buffer_in_num ^= 1;
     7ec:	81 27       	eor	r24, r17
     7ee:	80 93 b3 02 	sts	0x02B3, r24
     7f2:	1b c0       	rjmp	.+54     	; 0x82a <__vector_3+0x176>

						#if RFM12_USE_RX_CALLBACK
							rfm12_rx_clear(); /* clear immediately since the data has been processed by the callback func */
						#endif
					#endif /* !(RFM12_TRANSMIT_ONLY) */
					} break;

				case STATE_TX:
					//debug
					#if RFM12_UART_DEBUG >= 2
						uart_putc('T');
					#endif

					if (ctrl.bytecount < ctrl.num_bytes) {
     7f4:	20 91 b2 02 	lds	r18, 0x02B2
     7f8:	80 91 b1 02 	lds	r24, 0x02B1
     7fc:	28 17       	cp	r18, r24
     7fe:	58 f4       	brcc	.+22     	; 0x816 <__vector_3+0x162>
						//load the next byte from our buffer struct.
						rfm12_data( RFM12_CMD_TX | rf_tx_buffer.sync[ctrl.bytecount++]);
     800:	e2 2f       	mov	r30, r18
     802:	f0 e0       	ldi	r31, 0x00	; 0
     804:	e8 5b       	subi	r30, 0xB8	; 184
     806:	fd 4f       	sbci	r31, 0xFD	; 253
     808:	80 81       	ld	r24, Z
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	2f 5f       	subi	r18, 0xFF	; 255
     80e:	20 93 b2 02 	sts	0x02B2, r18
     812:	98 6b       	ori	r25, 0xB8	; 184
     814:	12 c0       	rjmp	.+36     	; 0x83a <__vector_3+0x186>

						//end the interrupt without resetting the fifo
						goto no_fifo_reset;
					}

					/* if we're here, we're finished transmitting the bytes */
					/* the fifo will be reset at the end of the function */

					//Transmitter on RFM12BP off
					#ifdef TX_LEAVE_HOOK
						TX_LEAVE_HOOK;
					#endif

					//flag the buffer as free again
					ctrl.txstate = STATUS_FREE;
     816:	10 92 b0 02 	sts	0x02B0, r1

					//turn off the transmitter and enable receiver
					//the receiver is not enabled in transmit only mode (by PWRMGT_RECEIVE makro)
					#if RFM12_PWRMGT_SHADOW
						ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ET); /* disable transmitter */
						ctrl.pwrmgt_shadow |= (PWRMGT_RECEIVE);   /* activate predefined receive mode */
						rfm12_data(ctrl.pwrmgt_shadow);
					#else /* no RFM12_PWRMGT_SHADOW */
						rfm12_data( PWRMGT_RECEIVE );
     81a:	81 e8       	ldi	r24, 0x81	; 129
     81c:	92 e8       	ldi	r25, 0x82	; 130
     81e:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
					#endif /* RFM12_PWRMGT_SHADOW */

					//Receiver on RFM12BP on
					#ifdef RX_ENTER_HOOK
						RX_ENTER_HOOK;
					#endif

					//load a dummy byte to clear int status
					rfm12_data( RFM12_CMD_TX | 0xaa);
     822:	8a ea       	ldi	r24, 0xAA	; 170
     824:	98 eb       	ldi	r25, 0xB8	; 184
     826:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
					break;
					#if RFM12_USE_POWER_CONTROL
						case STATE_POWER_DOWN:
							//load a dummy byte to clear int status
							rfm12_data( RFM12_CMD_TX | 0xaa);
							break;
					#endif
			}//end of switch

			//set the state machine to idle
			ctrl.rfm12_state = STATE_RX_IDLE;
     82a:	10 92 af 02 	sts	0x02AF, r1

			//reset the receiver fifo, if receive mode is not disabled (default)
			#if !(RFM12_TRANSMIT_ONLY)
				#if RFM12_UART_DEBUG >= 2
					uart_putc('F');
				#endif
				rfm12_data( RFM12_CMD_FIFORESET | CLEAR_FIFO_INLINE);
     82e:	81 e8       	ldi	r24, 0x81	; 129
     830:	9a ec       	ldi	r25, 0xCA	; 202
     832:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
				rfm12_data( RFM12_CMD_FIFORESET | ACCEPT_DATA_INLINE);
     836:	83 e8       	ldi	r24, 0x83	; 131
     838:	9a ec       	ldi	r25, 0xCA	; 202
     83a:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
     83e:	5d cf       	rjmp	.-326    	; 0x6fa <__vector_3+0x46>
     840:	00 93 bd 02 	sts	0x02BD, r16
			#endif /* !(RFM12_TRANSMIT_ONLY) */

			uint8_t b;
			no_fifo_reset:
			b = b;
		}
	} while (recheck_interrupt);

	#if RFM12_UART_DEBUG >= 2
		uart_putc('E');
	#endif

	//turn the int back on
	RFM12_INT_ON();
     844:	ea 9a       	sbi	0x1d, 2	; 29
}
     846:	ff 91       	pop	r31
     848:	ef 91       	pop	r30
     84a:	bf 91       	pop	r27
     84c:	af 91       	pop	r26
     84e:	9f 91       	pop	r25
     850:	8f 91       	pop	r24
     852:	7f 91       	pop	r23
     854:	6f 91       	pop	r22
     856:	5f 91       	pop	r21
     858:	4f 91       	pop	r20
     85a:	3f 91       	pop	r19
     85c:	2f 91       	pop	r18
     85e:	1f 91       	pop	r17
     860:	0f 91       	pop	r16
     862:	ff 90       	pop	r15
     864:	ef 90       	pop	r14
     866:	df 90       	pop	r13
     868:	cf 90       	pop	r12
     86a:	0f 90       	pop	r0
     86c:	0f be       	out	0x3f, r0	; 63
     86e:	0f 90       	pop	r0
     870:	1f 90       	pop	r1
     872:	18 95       	reti

00000874 <rfm12_tick>:


//! The tick function implements collision avoidance and initiates transmissions.
/** This function has to be called periodically.
* It will read the rfm12 status register to check if a carrier is being received,
* which would indicate activity on the chosen radio channel. \n
* If there has been no activity for long enough, the channel is believed to be free.
*
* When there is a packet waiting for transmission and the collision avoidance
* algorithm indicates that the air is free, then the interrupt control variables are
* setup for packet transmission and the rfm12 is switched to transmit mode.
* This function also fills the rfm12 tx fifo with a preamble.
*
* \warning Warning, if you do not call this function periodically, then no packet will get transmitted.
* \see rfm12_tx() and rfm12_start_tx()
*/
void rfm12_tick(void) {
     874:	80 91 af 02 	lds	r24, 0x02AF
     878:	88 23       	and	r24, r24
     87a:	91 f5       	brne	.+100    	; 0x8e0 <rfm12_tick+0x6c>
	//collision detection is enabled by default
	#if !(RFM12_NOCOLLISIONDETECTION)
		uint16_t status;
		//printf("tick");
		//start with a channel free count of 16, this is necessary for the ASK receive feature to work
		static uint8_t channel_free_count = 16; //static local variables produce smaller code size than globals
	#endif

	//debug
	#if RFM12_UART_DEBUG
		static uint8_t oldstate;
		uint8_t state = ctrl.rfm12_state;
		if (oldstate != state) {
			uart_putstr("mode change: ");
			switch (state) {
				case STATE_RX_IDLE:
					uart_putc ('i');
					break;
				case STATE_RX_ACTIVE:
					uart_putc ('r');
					break;
				case STATE_TX:
					uart_putc ('t');
					break;
				default:
					uart_putc ('?');
			}
			uart_putstr ("\r\n");
			oldstate = state;
		}
	#endif
	#if 0
		static uint8_t oldstate;
		uint8_t state = ctrl.rfm12_state;
		if (oldstate != state) {
			puts("mode change: ");
			switch (state) {
				case STATE_RX_IDLE:
					putchar ('i');
					break;
				case STATE_RX_ACTIVE:
					putchar ('r');
					break;
				case STATE_TX:
					putchar ('t');
					break;
				default:
					putchar ('?');
			}
			puts ("\r\n");
			oldstate = state;
		}
	#endif
	//don't disturb RFM12 if transmitting or receiving
	if (ctrl.rfm12_state != STATE_RX_IDLE) {
		//printf("R");
		return;
	}

	//collision detection is enabled by default
	#if !(RFM12_NOCOLLISIONDETECTION)
		//disable the interrupt (as we're working directly with the transceiver now)
		//hint: we could be losing an interrupt here, because we read the status register.
		//this applys for the Wakeup timer, as it's flag is reset by reading.
		//printf("t");
		RFM12_INT_OFF();
     87c:	ea 98       	cbi	0x1d, 2	; 29
		status = rfm12_read(RFM12_CMD_STATUS);
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZL10rfm12_readj>
		RFM12_INT_ON();
     886:	ea 9a       	sbi	0x1d, 2	; 29

		//wakeup timer workaround (if we don't restart the timer after timeout, it will stay off.)
		#if RFM12_USE_WAKEUP_TIMER
			if (status & (RFM12_STATUS_WKUP)) {
				ctrl.wkup_flag = 1;
				//puts("ttt");
				RFM12_INT_OFF();
				//restart the wakeup timer by toggling the bit on and off
				rfm12_data(ctrl.pwrmgt_shadow & ~RFM12_PWRMGT_EW);
				rfm12_data(ctrl.pwrmgt_shadow);
				RFM12_INT_ON();
			}
		#endif /* RFM12_USE_WAKEUP_TIMER */

		//check if we see a carrier
		if (status & RFM12_STATUS_RSSI) {
     888:	90 ff       	sbrs	r25, 0
     88a:	02 c0       	rjmp	.+4      	; 0x890 <rfm12_tick+0x1c>
			//yes: reset free counter and return
			//puts("yes");
		//	printf("%u\n", status & RFM12_STATUS_RSSI);
			channel_free_count = CHANNEL_FREE_TIME;
     88c:	88 ec       	ldi	r24, 0xC8	; 200
     88e:	05 c0       	rjmp	.+10     	; 0x89a <rfm12_tick+0x26>
			//printf("%u", channel_free_count); 
			return;
		}
		//no

		//is the channel free long enough ?
		if (channel_free_count != 0) {
     890:	80 91 cf 01 	lds	r24, 0x01CF
     894:	88 23       	and	r24, r24
     896:	21 f0       	breq	.+8      	; 0x8a0 <rfm12_tick+0x2c>
			//no:
			channel_free_count--; // decrement counter
     898:	81 50       	subi	r24, 0x01	; 1
     89a:	80 93 cf 01 	sts	0x01CF, r24
     89e:	08 95       	ret
			return;
		}
	//	puts("trans");
		//yes: we can begin transmitting
	#endif
	//puts("trans");
	//do we have something to transmit?
	if (ctrl.txstate == STATUS_OCCUPIED) { //yes: start transmitting
     8a0:	80 91 b0 02 	lds	r24, 0x02B0
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	e1 f4       	brne	.+56     	; 0x8e0 <rfm12_tick+0x6c>
		//disable the interrupt (as we're working directly with the transceiver now)
		//we won't loose interrupts, as the AVR caches them in the int flag.
		//we could disturb an ongoing reception,
		//if it has just started some cpu cycles ago
		//(as the check for this case is some lines (cpu cycles) above)
		//anyhow, we MUST transmit at some point...
		RFM12_INT_OFF();
     8a8:	ea 98       	cbi	0x1d, 2	; 29
		//puts("trans ssss");
		//disable receiver - if you don't do this, tx packets will get lost
		//as the fifo seems to be in use by the receiver

		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow &= ~(RFM12_PWRMGT_ER); /* disable receiver */
			rfm12_data(ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT ); /* disable receiver */
     8aa:	81 e0       	ldi	r24, 0x01	; 1
     8ac:	92 e8       	ldi	r25, 0x82	; 130
     8ae:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
		#endif

		//RFM12BP receiver off
		#ifdef RX_LEAVE_HOOK
			RX_LEAVE_HOOK;
		#endif

		//calculate number of bytes to be sent by ISR
		//2 sync bytes + len byte + type byte + checksum + message length + 1 dummy byte
		ctrl.num_bytes = rf_tx_buffer.len + 6;
     8b2:	80 91 4a 02 	lds	r24, 0x024A
     8b6:	8a 5f       	subi	r24, 0xFA	; 250
     8b8:	80 93 b1 02 	sts	0x02B1, r24

		//reset byte sent counter
		ctrl.bytecount = 0;
     8bc:	10 92 b2 02 	sts	0x02B2, r1

		//set mode for interrupt handler
		ctrl.rfm12_state = STATE_TX;
     8c0:	82 e0       	ldi	r24, 0x02	; 2
     8c2:	80 93 af 02 	sts	0x02AF, r24

		//RFM12BP transmitter on
		#ifdef TX_ENTER_HOOK
			TX_ENTER_HOOK;
		#endif

		//fill 2byte 0xAA preamble into data register
		//the preamble helps the receivers AFC circuit to lock onto the exact frequency
		//(hint: the tx FIFO [if el is enabled] is two staged, so we can safely write 2 bytes before starting)
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
     8c6:	8a ea       	ldi	r24, 0xAA	; 170
     8c8:	98 eb       	ldi	r25, 0xB8	; 184
     8ca:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
		rfm12_data(RFM12_CMD_TX | PREAMBLE);
     8ce:	8a ea       	ldi	r24, 0xAA	; 170
     8d0:	98 eb       	ldi	r25, 0xB8	; 184
     8d2:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>

		//set ET in power register to enable transmission (hint: TX starts now)
		#if RFM12_PWRMGT_SHADOW
			ctrl.pwrmgt_shadow |= RFM12_PWRMGT_ET;
			rfm12_data (ctrl.pwrmgt_shadow);
		#else
			rfm12_data(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT | RFM12_PWRMGT_ET);
     8d6:	81 e2       	ldi	r24, 0x21	; 33
     8d8:	92 e8       	ldi	r25, 0x82	; 130
     8da:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
		#endif

		//enable the interrupt to continue the transmission
		RFM12_INT_ON();
     8de:	ea 9a       	sbi	0x1d, 2	; 29
     8e0:	08 95       	ret

000008e2 <rfm12_start_tx>:
	}
}


//! Enqueue an already buffered packet for transmission
/** If there is no active transmission, the packet header is written to the
* transmission control buffer and the packet will be enqueued for transmission. \n
* This function is not responsible for buffering the actual packet data.
* The data has to be copied into the transmit buffer beforehand,
* which can be accomplished by the rfm12_tx() function.
*
* \note Note that this function does not start the transmission, it merely enqueues the packet. \n
* Transmissions are started by rfm12_tick().
* \param [type] The packet header type field
* \param [length] The packet data length
* \returns One of these defines: \ref tx_retvals "TX return values"
* \see rfm12_tx() and rfm12_tick()
*/
#if (RFM12_NORETURNS)
void
#else
uint8_t
#endif
rfm12_start_tx(uint8_t type, uint8_t length) {
     8e2:	98 2f       	mov	r25, r24
	//exit if the buffer isn't free
	if (ctrl.txstate != STATUS_FREE)
     8e4:	80 91 b0 02 	lds	r24, 0x02B0
     8e8:	88 23       	and	r24, r24
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <rfm12_start_tx+0xe>
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	08 95       	ret
		return TXRETURN(RFM12_TX_OCCUPIED);

	//write airlab header to buffer
	rf_tx_buffer.len = length;
     8f0:	60 93 4a 02 	sts	0x024A, r22
	rf_tx_buffer.type = type;
     8f4:	90 93 4b 02 	sts	0x024B, r25
	rf_tx_buffer.checksum = length ^ type ^ 0xff;
     8f8:	69 27       	eor	r22, r25
     8fa:	60 95       	com	r22
     8fc:	60 93 4c 02 	sts	0x024C, r22

	//schedule packet for transmission
	ctrl.txstate = STATUS_OCCUPIED;
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	80 93 b0 02 	sts	0x02B0, r24
     906:	80 e8       	ldi	r24, 0x80	; 128

	return TXRETURN(RFM12_TX_ENQUEUED);
}
     908:	08 95       	ret

0000090a <rfm12_rx_clear>:


//! Copy a packet to the buffer and call rfm12_start_tx() to enqueue it for transmission.
/** If there is no active transmission, the buffer contents will be copied to the
* internal transmission buffer. Finally the buffered packet is going to be enqueued by
* calling rfm12_start_tx(). If automatic buffering of packet data is not necessary,
* which is the case when the packet data does not change while the packet is enqueued
* for transmission, then one could directly store the data in \ref rf_tx_buffer
* (see rf_tx_buffer_t) and use the rfm12_start_tx() function.
* 
* \note Note that this function does not start the transmission, it merely enqueues the packet. \n
* Transmissions are started by rfm12_tick().
* \param [len] The packet data length
* \param [type] The packet header type field
* \param [data] Pointer to the packet data
* \returns One of these defines: \ref tx_retvals "TX return values"
* \see rfm12_start_tx() and rfm12_tick()
*/
#if !(RFM12_SMALLAPI)
	#if (RFM12_NORETURNS)
	void
	#else
	uint8_t
	#endif
	rfm12_tx(uint8_t len, uint8_t type, uint8_t *data) {
		#if RFM12_UART_DEBUG
			uart_putstr ("sending packet\r\n");
		#endif
	//	printf("send");
	//	printf("%u", len);
	//	printf("%u", RFM12_TX_BUFFER_SIZE);
		if (len > RFM12_TX_BUFFER_SIZE) return TXRETURN(RFM12_TX_ERROR);

		//exit if the buffer isn't free
		if (ctrl.txstate != STATUS_FREE)
			return TXRETURN(RFM12_TX_OCCUPIED);

		memcpy(rf_tx_buffer.buffer, data, len);

		#if (!(RFM12_NORETURNS))
		return rfm12_start_tx(type, len);
		#else
		rfm12_start_tx(type, len);
		#endif
	}
#endif /* RFM12_SMALLAPI */


//if receive mode is not disabled (default)
#if !(RFM12_TRANSMIT_ONLY)
	//! Function to clear buffer complete/occupied status.
	/** This function will set the current receive buffer status to free and switch
	* to the other buffer, which can then be read using rfm12_rx_buffer().
	*
	* \see rfm12_rx_status(), rfm12_rx_len(), rfm12_rx_type(), rfm12_rx_buffer() and rf_rx_buffers
	*/
	//warning: without the attribute, gcc will inline this even if -Os is set
	void __attribute__((noinline)) rfm12_rx_clear(void) {
     90a:	20 91 b4 02 	lds	r18, 0x02B4
     90e:	82 2f       	mov	r24, r18
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	fc 01       	movw	r30, r24
     914:	45 e0       	ldi	r20, 0x05	; 5
     916:	ee 0f       	add	r30, r30
     918:	ff 1f       	adc	r31, r31
     91a:	4a 95       	dec	r20
     91c:	e1 f7       	brne	.-8      	; 0x916 <rfm12_rx_clear+0xc>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	e8 0f       	add	r30, r24
     924:	f9 1f       	adc	r31, r25
     926:	e5 59       	subi	r30, 0x95	; 149
     928:	fd 4f       	sbci	r31, 0xFD	; 253
     92a:	10 82       	st	Z, r1
			//mark the current buffer as empty
			rf_rx_buffers[ctrl.buffer_out_num].status = STATUS_FREE;

			//switch to the other buffer
			ctrl.buffer_out_num ^= 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	28 27       	eor	r18, r24
     930:	20 93 b4 02 	sts	0x02B4, r18

	}
     934:	08 95       	ret

00000936 <rfm12_init>:
#endif /* !(RFM12_TRANSMIT_ONLY) */


//enable internal data register and fifo
//setup selected band
#define RFM12_CMD_CFG_DEFAULT   (RFM12_CMD_CFG | RFM12_CFG_EL | RFM12_CFG_EF | RFM12_BASEBAND | RFM12_XTAL_LOAD)

//set rx parameters: int-in/vdi-out pin is vdi-out,
//Bandwith, LNA, RSSI
#define RFM12_CMD_RXCTRL_DEFAULT (RFM12_CMD_RXCTRL | RFM12_RXCTRL_P16_VDI | RFM12_RXCTRL_VDI_FAST | RFM12_FILTER_BW | RFM12_LNA_GAIN | RFM12_RSSI_THRESHOLD )

//set AFC to automatic, (+4 or -3)*2.5kHz Limit, fine mode, active and enabled
#define RFM12_CMD_AFC_DEFAULT  (RFM12_CMD_AFC | RFM12_AFC_AUTO_KEEP | RFM12_AFC_LIMIT_4 | RFM12_AFC_FI | RFM12_AFC_OE | RFM12_AFC_EN)

//set TX Power, frequency shift
#define RFM12_CMD_TXCONF_DEFAULT  (RFM12_CMD_TXCONF | RFM12_POWER | RFM12_TXCONF_FS_CALC(FSK_SHIFT) )

#ifdef __PLATFORM_AVR__
static const uint16_t init_cmds[] PROGMEM = {
#else
static const uint16_t init_cmds[] = {
#endif
	//defined above (so shadow register is inited with same value)
	RFM12_CMD_CFG_DEFAULT,

	//set power default state (usually disable clock output)
	//do not write the power register two times in a short time
	//as it seems to need some recovery
	(RFM12_CMD_PWRMGT | PWRMGT_DEFAULT),

	//set frequency
	(RFM12_CMD_FREQUENCY | RFM12_FREQUENCY_CALC(RFM12_FREQUENCY) ),

	//set data rate
	(RFM12_CMD_DATARATE | DATARATE_VALUE ),

	//defined above (so shadow register is inited with same value)
	RFM12_CMD_RXCTRL_DEFAULT,

	//automatic clock lock control(AL), digital Filter(!S),
	//Data quality detector value 3, slow clock recovery lock
	(RFM12_CMD_DATAFILTER | RFM12_DATAFILTER_AL | 3),

	//2 Byte Sync Pattern, Start fifo fill when sychron pattern received,
	//disable sensitive reset, Fifo filled interrupt at 8 bits
	(RFM12_CMD_FIFORESET | RFM12_FIFORESET_DR | (8 << 4)),

	//defined above (so shadow register is inited with same value)
	RFM12_CMD_AFC_DEFAULT,

	//defined above (so shadow register is inited with same value)
	RFM12_CMD_TXCONF_DEFAULT,

	//disable low dutycycle mode
	(RFM12_CMD_DUTYCYCLE),

	//disable wakeup timer
	(RFM12_CMD_WAKEUP),

	//enable rf receiver chain, if receiving is not disabled (default)
	//the magic is done via defines
	(RFM12_CMD_PWRMGT | PWRMGT_RECEIVE),
};

//! This is the main library initialization function
/**This function takes care of all module initialization, including:
* - Setup of the used frequency band and external capacitor
* - Setting the exact frequency (channel)
* - Setting the transmission data rate
* - Configuring various module related rx parameters, including the amplification
* - Enabling the digital data filter
* - Enabling the use of the modules fifo, as well as enabling sync pattern detection
* - Configuring the automatic frequency correction
* - Setting the transmit power
*
* This initialization function also sets up various library internal configuration structs and
* puts the module into receive mode before returning.
*
* \note Please note that the transmit power and receive amplification values are currently hard coded.
* Have a look into rfm12_hw.h for possible settings.
*/
void rfm12_init(void) {
     936:	cf 93       	push	r28
     938:	df 93       	push	r29
	//initialize spi
#ifdef __PLATFORM_AVR__
	SS_RELEASE();
     93a:	2c 9a       	sbi	0x05, 4	; 5
	DDR_SS |= (1<<BIT_SS);
     93c:	24 9a       	sbi	0x04, 4	; 4
		return SPDR;
	#else
		SS_ASSERT();
		unsigned char x, d = d;
		PORT_MOSI &= ~(1<<BIT_MOSI);
		for (x = 0; x < 8; x++) {
			PORT_SCK |= (1<<BIT_SCK);
			d <<= 1;
			if (PIN_MISO & (1<<BIT_MISO)) {
				d |= 1;
			}
			PORT_SCK &= ~(1<<BIT_SCK);
		}
		SS_RELEASE();
		return d;
	#endif
}

static void spi_init(void) {
	DDR_MOSI |= (_BV(BIT_MOSI));
     93e:	25 9a       	sbi	0x04, 5	; 4
	DDR_SCK  |= (_BV(BIT_SCK));
     940:	27 9a       	sbi	0x04, 7	; 4
	#if !(RFM12_SPI_SOFTWARE)
		PORT_SPI |= (_BV(BIT_SPI_SS));
     942:	2c 9a       	sbi	0x05, 4	; 5
		DDR_SPI  |= (_BV(BIT_SPI_SS));
     944:	24 9a       	sbi	0x04, 4	; 4
	#endif

	DDR_MISO &= ~(_BV(BIT_MISO));
     946:	26 98       	cbi	0x04, 6	; 4

	#if !(RFM12_SPI_SOFTWARE)
		SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0); //SPI Master, clk/16
     948:	81 e5       	ldi	r24, 0x51	; 81
     94a:	8c bd       	out	0x2c, r24	; 44
#endif
	spi_init();

	//typically sets DDR registers for RFM12BP TX/RX pin
	#ifdef TX_INIT_HOOK
		TX_INIT_HOOK;
	#endif

	#ifdef RX_INIT_HOOK
		RX_INIT_HOOK;
	#endif

	//store the syncronization pattern to the transmission buffer
	//the sync pattern is used by the receiver to distinguish noise from real transmissions
	//the sync pattern is hardcoded into the receiver
	rf_tx_buffer.sync[0] = SYNC_MSB;
     94c:	8d e2       	ldi	r24, 0x2D	; 45
     94e:	80 93 48 02 	sts	0x0248, r24
	rf_tx_buffer.sync[1] = SYNC_LSB;
     952:	84 ed       	ldi	r24, 0xD4	; 212
     954:	80 93 49 02 	sts	0x0249, r24

	//if receive mode is not disabled (default)
	#if !(RFM12_TRANSMIT_ONLY)
		//init buffer pointers
		ctrl.buffer_in_num = 0;
     958:	10 92 b3 02 	sts	0x02B3, r1
		ctrl.buffer_out_num = 0;
     95c:	10 92 b4 02 	sts	0x02B4, r1
	#endif /* !(RFM12_TRANSMIT_ONLY) */

	//low battery detector feature initialization
	#if RFM12_LOW_BATT_DETECTOR
		ctrl.low_batt = RFM12_BATT_OKAY;
	#endif /* RFM12_LOW_BATT_DETECTOR */

	#if RFM12_PWRMGT_SHADOW
		//set power management shadow register to receiver chain enabled or disabled
		//the define correctly handles the transmit only mode
		ctrl.pwrmgt_shadow = (RFM12_CMD_PWRMGT | PWRMGT_RECEIVE);
	#endif


	#if RFM12_LIVECTRL
		//init shadow registers with values about to be written to rfm12
		ctrl.rxctrl_shadow = RFM12_CMD_RXCTRL_DEFAULT;
     960:	8d e2       	ldi	r24, 0x2D	; 45
     962:	94 e9       	ldi	r25, 0x94	; 148
     964:	90 93 b6 02 	sts	0x02B6, r25
     968:	80 93 b5 02 	sts	0x02B5, r24
		ctrl.afc_shadow = RFM12_CMD_AFC_DEFAULT;
     96c:	87 ef       	ldi	r24, 0xF7	; 247
     96e:	94 ec       	ldi	r25, 0xC4	; 196
     970:	90 93 b8 02 	sts	0x02B8, r25
     974:	80 93 b7 02 	sts	0x02B7, r24
		ctrl.txconf_shadow = RFM12_CMD_TXCONF_DEFAULT;
     978:	80 e7       	ldi	r24, 0x70	; 112
     97a:	98 e9       	ldi	r25, 0x98	; 152
     97c:	90 93 ba 02 	sts	0x02BA, r25
     980:	80 93 b9 02 	sts	0x02B9, r24
		ctrl.cfg_shadow =    RFM12_CMD_CFG_DEFAULT;
     984:	86 ed       	ldi	r24, 0xD6	; 214
     986:	90 e8       	ldi	r25, 0x80	; 128
     988:	90 93 bc 02 	sts	0x02BC, r25
     98c:	80 93 bb 02 	sts	0x02BB, r24
     990:	c0 e0       	ldi	r28, 0x00	; 0
     992:	d0 e0       	ldi	r29, 0x00	; 0
	#endif

	//write all the initialisation values to rfm12
	uint8_t x;

	#ifdef __PLATFORM_AVR__

		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
			rfm12_data(pgm_read_word(&init_cmds[x]));
     994:	fe 01       	movw	r30, r28
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	e4 58       	subi	r30, 0x84	; 132
     99c:	ff 4f       	sbci	r31, 0xFF	; 255
     99e:	85 91       	lpm	r24, Z+
     9a0:	94 91       	lpm	r25, Z
     9a2:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
     9a6:	21 96       	adiw	r28, 0x01	; 1
     9a8:	cc 30       	cpi	r28, 0x0C	; 12
     9aa:	d1 05       	cpc	r29, r1
     9ac:	99 f7       	brne	.-26     	; 0x994 <rfm12_init+0x5e>
		}
	#else
		for (x = 0; x < ( sizeof(init_cmds) / 2) ; x++) {
			rfm12_data(init_cmds[x]);
		}
	#endif

	#ifdef RX_ENTER_HOOK
		RX_ENTER_HOOK;
	#endif

	#if RFM12_USE_CLOCK_OUTPUT || RFM12_LOW_BATT_DETECTOR
		rfm12_data(RFM12_CMD_LBDMCD | RFM12_LBD_VOLTAGE | RFM12_CLOCK_OUT_FREQUENCY ); //set low battery detect, clock output
	#endif

	//ASK receive mode feature initialization
	#if RFM12_RECEIVE_ASK
		adc_init();
	#endif

	//setup interrupt for falling edge trigger
#ifdef __PLATFORM_AVR__
	RFM12_INT_SETUP();
     9ae:	80 91 69 00 	lds	r24, 0x0069
     9b2:	80 62       	ori	r24, 0x20	; 32
     9b4:	80 93 69 00 	sts	0x0069, r24
#endif

	//clear int flag
	rfm12_read(RFM12_CMD_STATUS);
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_ZL10rfm12_readj>

#ifdef __PLATFORM_AVR__
	RFM12_INT_FLAG = (1<<RFM12_FLAG_BIT);
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	8c bb       	out	0x1c, r24	; 28
#endif

	//init receiver fifo, we now begin receiving.
	rfm12_data(CLEAR_FIFO);
     9c4:	81 e8       	ldi	r24, 0x81	; 129
     9c6:	9a ec       	ldi	r25, 0xCA	; 202
     9c8:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>
	rfm12_data(ACCEPT_DATA);
     9cc:	83 e8       	ldi	r24, 0x83	; 131
     9ce:	9a ec       	ldi	r25, 0xCA	; 202
     9d0:	0e 94 ef 02 	call	0x5de	; 0x5de <_ZL10rfm12_dataj>

	//activate the interrupt
	RFM12_INT_ON();
     9d4:	ea 9a       	sbi	0x1d, 2	; 29
}
     9d6:	df 91       	pop	r29
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <rfm12_tx>:
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	18 2f       	mov	r17, r24
     9e2:	06 2f       	mov	r16, r22
     9e4:	8f 31       	cpi	r24, 0x1F	; 31
     9e6:	10 f0       	brcs	.+4      	; 0x9ec <rfm12_tx+0x10>
     9e8:	82 e0       	ldi	r24, 0x02	; 2
     9ea:	12 c0       	rjmp	.+36     	; 0xa10 <rfm12_tx+0x34>
     9ec:	80 91 b0 02 	lds	r24, 0x02B0
     9f0:	88 23       	and	r24, r24
     9f2:	11 f0       	breq	.+4      	; 0x9f8 <rfm12_tx+0x1c>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	0c c0       	rjmp	.+24     	; 0xa10 <rfm12_tx+0x34>
     9f8:	2d e4       	ldi	r18, 0x4D	; 77
     9fa:	32 e0       	ldi	r19, 0x02	; 2
     9fc:	c9 01       	movw	r24, r18
     9fe:	ba 01       	movw	r22, r20
     a00:	41 2f       	mov	r20, r17
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <memcpy>
     a08:	80 2f       	mov	r24, r16
     a0a:	61 2f       	mov	r22, r17
     a0c:	0e 94 71 04 	call	0x8e2	; 0x8e2 <rfm12_start_tx>
     a10:	1f 91       	pop	r17
     a12:	0f 91       	pop	r16
     a14:	08 95       	ret

00000a16 <_ZN5tfthwL7write16Ej>:
	static inline void memWrite() {cmd(0x2c);}
	static inline void memRead() {cmd(0x2e);}
	static inline void mode(bool read);
	static inline void write(const uint8_t d) {data(d);}
	static inline void write16(const uint16_t c) {write(c >> 8); write(c & 0xff);}
     a16:	98 b9       	out	0x08, r25	; 8
	static inline uint8_t read();

#ifdef TFT_VERTICAL_SCROLLING
	static inline void setVSStart(const uint16_t addr);
	static inline void setVSDefinition(const uint16_t tfa, \
			const uint16_t vsa, const uint16_t bfa);
#endif
}

// Defined as inline to excute faster

#ifdef TFT_VERTICAL_SCROLLING
static inline void tfthw::setVSStart(uint16_t addr)
{
	cmd(0x37);	// Vertical Scrolling Start Address
	write16(addr);
}

static inline void tfthw::setVSDefinition(const uint16_t tfa, \
		const uint16_t vsa, const uint16_t bfa)
{
	cmd(0x33);	// Vertical Scrolling Definition
	write16(tfa);	// Top Fixed Area
	write16(vsa);	// Vertical Scrolling Area
	write16(bfa);	// Bottom Fixed Area
}
#endif

static inline void tfthw::setColumn(const uint16_t start, const uint16_t end)
{
	cmd(0x2a);	// Set column address
	write16(start);
	write16(end);
}

static inline void tfthw::setPage(const uint16_t start, const uint16_t end)
{
	cmd(0x2b);	// Set page(row) address
	write16(start);
	write16(end);
}

static inline void tfthw::setOrient(uint8_t o)
{
	using namespace tft;
	static const uint8_t base = 0x08;
	static const uint8_t MY = 1U << 7, MX = 1U << 6, MV = 1U << 5;
	static uint8_t orient;
	orient = o & Portrait ?  base | MX : base | MV;
	if (o & Flipped)
		orient ^= MY | MX;
	if (o & BMPMode)
		orient ^= o & Portrait ? MY : MX;
	cmd(0x36);			// Memory Access Control
	data(orient);
}

static inline void tfthw::cmd(uint8_t dat)
{
	TFT_WCTRL &= ~TFT_RS;
	TFT_WDATA = dat;
	TFT_WCTRL &= ~TFT_WR;
	TFT_WCTRL |= TFT_WR;
	TFT_WCTRL |= TFT_RS;
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
	TFT_WCTRL &= ~TFT_WR;
     a18:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
     a1a:	13 9a       	sbi	0x02, 3	; 2
     a1c:	88 b9       	out	0x08, r24	; 8
     a1e:	13 98       	cbi	0x02, 3	; 2
     a20:	13 9a       	sbi	0x02, 3	; 2
     a22:	08 95       	ret

00000a24 <_ZN5tfthwL3cmdEh>:
     a24:	14 98       	cbi	0x02, 4	; 2
     a26:	88 b9       	out	0x08, r24	; 8
     a28:	13 98       	cbi	0x02, 3	; 2
     a2a:	13 9a       	sbi	0x02, 3	; 2
     a2c:	14 9a       	sbi	0x02, 4	; 2
     a2e:	08 95       	ret

00000a30 <_ZN5tfthwL9setOrientEh>:
     a30:	28 2f       	mov	r18, r24
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	a9 01       	movw	r20, r18
     a36:	41 70       	andi	r20, 0x01	; 1
     a38:	50 70       	andi	r21, 0x00	; 0
     a3a:	80 fd       	sbrc	r24, 0
     a3c:	02 c0       	rjmp	.+4      	; 0xa42 <_ZN5tfthwL9setOrientEh+0x12>
     a3e:	98 e2       	ldi	r25, 0x28	; 40
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <_ZN5tfthwL9setOrientEh+0x14>
     a42:	98 e4       	ldi	r25, 0x48	; 72
     a44:	90 93 cf 02 	sts	0x02CF, r25
     a48:	21 ff       	sbrs	r18, 1
     a4a:	04 c0       	rjmp	.+8      	; 0xa54 <_ZN5tfthwL9setOrientEh+0x24>
     a4c:	80 ec       	ldi	r24, 0xC0	; 192
     a4e:	98 27       	eor	r25, r24
     a50:	90 93 cf 02 	sts	0x02CF, r25
     a54:	22 ff       	sbrs	r18, 2
     a56:	0a c0       	rjmp	.+20     	; 0xa6c <_ZN5tfthwL9setOrientEh+0x3c>
     a58:	90 91 cf 02 	lds	r25, 0x02CF
     a5c:	45 2b       	or	r20, r21
     a5e:	11 f4       	brne	.+4      	; 0xa64 <_ZN5tfthwL9setOrientEh+0x34>
     a60:	80 e4       	ldi	r24, 0x40	; 64
     a62:	01 c0       	rjmp	.+2      	; 0xa66 <_ZN5tfthwL9setOrientEh+0x36>
     a64:	80 e8       	ldi	r24, 0x80	; 128
     a66:	89 27       	eor	r24, r25
     a68:	80 93 cf 02 	sts	0x02CF, r24
     a6c:	86 e3       	ldi	r24, 0x36	; 54
     a6e:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     a72:	80 91 cf 02 	lds	r24, 0x02CF
     a76:	88 b9       	out	0x08, r24	; 8
     a78:	13 98       	cbi	0x02, 3	; 2
     a7a:	13 9a       	sbi	0x02, 3	; 2
     a7c:	08 95       	ret

00000a7e <_ZN5tfthwL4areaEjjjj>:
	memWrite();
	write16(c);
}

inline void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
     a7e:	af 92       	push	r10
     a80:	bf 92       	push	r11
     a82:	cf 92       	push	r12
     a84:	df 92       	push	r13
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	8c 01       	movw	r16, r24
     a90:	7b 01       	movw	r14, r22
     a92:	6a 01       	movw	r12, r20
     a94:	59 01       	movw	r10, r18
#endif

static inline void tfthw::setColumn(const uint16_t start, const uint16_t end)
{
	cmd(0x2a);	// Set column address
     a96:	8a e2       	ldi	r24, 0x2A	; 42
     a98:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	write16(start);
     a9c:	c8 01       	movw	r24, r16
     a9e:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
	write16(end);
     aa2:	01 50       	subi	r16, 0x01	; 1
     aa4:	10 40       	sbci	r17, 0x00	; 0
     aa6:	c8 01       	movw	r24, r16
     aa8:	8c 0d       	add	r24, r12
     aaa:	9d 1d       	adc	r25, r13
     aac:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
}

static inline void tfthw::setPage(const uint16_t start, const uint16_t end)
{
	cmd(0x2b);	// Set page(row) address
     ab0:	8b e2       	ldi	r24, 0x2B	; 43
     ab2:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	write16(start);
     ab6:	c7 01       	movw	r24, r14
     ab8:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
	write16(end);
     abc:	08 94       	sec
     abe:	e1 08       	sbc	r14, r1
     ac0:	f1 08       	sbc	r15, r1
     ac2:	c7 01       	movw	r24, r14
     ac4:	8a 0d       	add	r24, r10
     ac6:	9b 1d       	adc	r25, r11
     ac8:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
{
	using namespace tfthw;
	setColumn(x, x + w - 1);
	setPage(y, y + h - 1);
}
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	bf 90       	pop	r11
     ada:	af 90       	pop	r10
     adc:	08 95       	ret

00000ade <_ZN3tftL5pointEjjj>:
     ade:	cf 93       	push	r28
     ae0:	df 93       	push	r29
     ae2:	9c 01       	movw	r18, r24
     ae4:	ea 01       	movw	r28, r20
     ae6:	80 91 c5 02 	lds	r24, 0x02C5
     aea:	90 91 c6 02 	lds	r25, 0x02C6
     aee:	28 17       	cp	r18, r24
     af0:	39 07       	cpc	r19, r25
     af2:	a0 f4       	brcc	.+40     	; 0xb1c <_ZN3tftL5pointEjjj+0x3e>
     af4:	80 91 c7 02 	lds	r24, 0x02C7
     af8:	90 91 c8 02 	lds	r25, 0x02C8
     afc:	68 17       	cp	r22, r24
     afe:	79 07       	cpc	r23, r25
     b00:	68 f4       	brcc	.+26     	; 0xb1c <_ZN3tftL5pointEjjj+0x3e>
     b02:	c9 01       	movw	r24, r18
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	21 e0       	ldi	r18, 0x01	; 1
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
     b10:	8c e2       	ldi	r24, 0x2C	; 44
     b12:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	if (x >= width || y >= height)
		return;
	area(x, y, 1, 1);
	memWrite();
	write16(c);
     b16:	ce 01       	movw	r24, r28
     b18:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
}
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <_ZN3tft7setFontEhh>:
	a = b;
	b = tmp;
}

bool tft::setFont(uint8_t w, uint8_t h)
     b22:	98 2f       	mov	r25, r24
{
	if (font->width == w && font->height == h)
     b24:	e0 91 d8 01 	lds	r30, 0x01D8
     b28:	f0 91 d9 01 	lds	r31, 0x01D9
     b2c:	80 81       	ld	r24, Z
     b2e:	89 17       	cp	r24, r25
     b30:	19 f4       	brne	.+6      	; 0xb38 <_ZN3tft7setFontEhh+0x16>
     b32:	81 81       	ldd	r24, Z+1	; 0x01
     b34:	86 17       	cp	r24, r22
     b36:	61 f0       	breq	.+24     	; 0xb50 <_ZN3tft7setFontEhh+0x2e>
     b38:	e0 ed       	ldi	r30, 0xD0	; 208
     b3a:	f1 e0       	ldi	r31, 0x01	; 1
		return true;
	const struct font_t *ptr = &fonts;
	while (ptr != 0)
		if (ptr->width == w && ptr->height == h) {
     b3c:	80 81       	ld	r24, Z
     b3e:	89 17       	cp	r24, r25
     b40:	49 f4       	brne	.+18     	; 0xb54 <_ZN3tft7setFontEhh+0x32>
     b42:	81 81       	ldd	r24, Z+1	; 0x01
     b44:	86 17       	cp	r24, r22
     b46:	31 f4       	brne	.+12     	; 0xb54 <_ZN3tft7setFontEhh+0x32>
			font = ptr;
     b48:	f0 93 d9 01 	sts	0x01D9, r31
     b4c:	e0 93 d8 01 	sts	0x01D8, r30
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	08 95       	ret
			return true;
		} else
			ptr = ptr->next;
     b54:	06 80       	ldd	r0, Z+6	; 0x06
     b56:	f7 81       	ldd	r31, Z+7	; 0x07
     b58:	e0 2d       	mov	r30, r0
     b5a:	30 97       	sbiw	r30, 0x00	; 0
     b5c:	79 f7       	brne	.-34     	; 0xb3c <_ZN3tft7setFontEhh+0x1a>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     b60:	08 95       	ret

00000b62 <_ZN3tft9rectangleEjjjjj>:

#ifdef TFT_READ_AVAILABLE
inline void tft::shiftUp(const uint16_t l)
{
	using namespace tfthw;

	uint8_t buff[width * 2];
	uint16_t r;
	tfthw::setColumn(0, width - 1);
	for (r = 0; r < height - l; r++) {
		uint16_t b = width * 2;
		//area(0, r + l, w, 1);
		setPage(r + l, r + l);
		memRead();
		mode(true);	// Read mode
		read();
		while (b--) {	// RGB 888 mode
			buff[b] = read() & 0xF8;
			uint8_t g = read();
			buff[b--] |= g >> 5;
			buff[b] = (g << 3) & 0xE0;
			buff[b] |= read() >> 3;
		}
		mode(false);		// Write mode

		b = width * 2;
		//area(0, r, w, 1);
		setPage(r, r);
		memWrite();
		while (b--)
			write(buff[b]);
	}
	//area(0, h - l, w, l);
	setPage(height - l, height - 1);
	memWrite();
	while (r++ < height)
		for (uint16_t c = width; c; c--)
			write16(background);
}
#endif

void tft::init()
{
	tfthw::init();
	x = 0;
	y = 0;
#ifdef TFT_VERTICAL_SCROLLING
	d.tfa = 0;
	d.bfa = 0;
	d.vsp = vsMaximum();
	setTopMask(0);
	setBottomMask(0);
	setTransform(false);
#endif
	zoom = 1;
	setOrient(TFT_DEF_ORIENT);
	tabSize = 4;
	//width = SIZE_W;
	//height = SIZE_H;
	foreground = DEF_FGC;
	background = DEF_BGC;
}

void tft::putString(const char *str, bool progMem)
{
#ifdef TFT_VERTICAL_SCROLLING
	uint16_t xt = 0;
	bool clip = transform() && !portrait();
	if (clip) {
		xt = vsTransformBack(x);
		clip = xt < bottomEdge();
	}
#endif

	char c;
	while ((c = progMem ? pgm_read_byte(str++) : *str++) != '\0') {
		putChar(c);
#ifdef TFT_VERTICAL_SCROLLING
		if (clip) {
			xt += FONT_WIDTH * zoom;
			if (xt >= bottomEdge())
				break;
		}
#endif
	}
}

void tft::frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, \
		uint8_t s, uint16_t c)
{
	rectangle(x, y, w - s, s, c);
	rectangle(x + w - s, y, s, h - s, c);
	rectangle(x, y + s, s, h - s, c);
	rectangle(x + s, y + h - s, w - s, s, c);
}

void tft::line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, \
		uint16_t c)
{
	if (x0 > width)
		x0 = width - 1;
	if (x1 > width)
		x1 = width - 1;
	if (y0 > height)
		y0 = height - 1;
	if (y1 > height)
		y1 = height - 1;
	if (x0 == x1) {
		if (y0 > y1)
			swap(y0, y1);
		rectangle(x0, y0, 1, y1 - y0 + 1, c);
		return;
	}
	if (y0 == y1) {
		if (x0 > x1)
			swap(x0, x1);
		rectangle(x0, y0, x1 - x0 + 1, 1, c);
		return;
	}
	uint16_t dx = abs(x1 - x0), dy = abs(y1 - y0);
	if (dx < dy) {
		if (y0 > y1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t y = y0; y <= y1; y++)
			point(x0 + dx * (y - y0) / dy * \
					(x0 > x1 ? -1 : 1), y, c);
	} else {
		if (x0 > x1) {
			swap(x0, x1);
			swap(y0, y1);
		}
		for (uint16_t x = x0; x <= x1; x++)
			point(x, y0 + dy * (x - x0) / dx * \
					(y0 > y1 ? -1 : 1), c);
	}
}

void tft::rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c)
     b62:	cf 92       	push	r12
     b64:	df 92       	push	r13
     b66:	ef 92       	push	r14
     b68:	ff 92       	push	r15
     b6a:	0f 93       	push	r16
     b6c:	1f 93       	push	r17
     b6e:	cf 93       	push	r28
     b70:	df 93       	push	r29
     b72:	fc 01       	movw	r30, r24
     b74:	6a 01       	movw	r12, r20
     b76:	79 01       	movw	r14, r18
{
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     b78:	14 16       	cp	r1, r20
     b7a:	15 06       	cpc	r1, r21
     b7c:	0c f0       	brlt	.+2      	; 0xb80 <_ZN3tft9rectangleEjjjjj+0x1e>
     b7e:	4f c0       	rjmp	.+158    	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
     b80:	12 16       	cp	r1, r18
     b82:	13 06       	cpc	r1, r19
     b84:	0c f0       	brlt	.+2      	; 0xb88 <_ZN3tft9rectangleEjjjjj+0x26>
     b86:	4b c0       	rjmp	.+150    	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
		return;

#ifdef TFT_VERTICAL_SCROLLING
	uint16_t yt, bMask;
	if (!transform())
		goto disp;

	if (!portrait()) {
		swap(x, y);
		swap(w, h);
	}

	yt = vsTransformBack(y);
	if ((int16_t)yt < (int16_t)topEdge() && \
		(int16_t)(yt + h) >= (int16_t)topEdge()) {	// Top edge clipping
		h -= topEdge() - yt;
		y = upperEdge();
		yt = vsTransformBack(y);
	} else if (yt < bottomEdge() && yt + h >= bottomEdge())	// Bottom edge clipping
		h = bottomEdge() - yt;
	if (y + h > bottomEdge())				// Transform edge split
		if (y < bottomEdge()) {
			if (!portrait()) {
				rectangle(y, x, bottomEdge() - y, w, c);
				rectangle(topEdge(), x, h - (bottomEdge() - y), w, c);
			} else {
				rectangle(x, y, w, bottomEdge() - y, c);
				rectangle(x, topEdge(), w, h - (bottomEdge() - y), c);
			}
			return;
		}

	if (yt < topMask()) {
		if (yt + h < topMask())
			return;
		h -= topMask() - yt;
		y = vsTransform(topMask());
	}

	bMask = vsMaximum() - bottomMask();
	if (yt >= bMask)
		return;
	if (yt + h > bMask)
		h -= yt + h - bMask;

	if (!portrait()) {
		tfthw::area(y, x, h, w);
		goto draw;
	}

disp:
#endif
	if ((int16_t)x < 0) {
     b88:	97 ff       	sbrs	r25, 7
     b8a:	04 c0       	rjmp	.+8      	; 0xb94 <_ZN3tft9rectangleEjjjjj+0x32>
		w -= -(int16_t)x;
     b8c:	c8 0e       	add	r12, r24
     b8e:	d9 1e       	adc	r13, r25
     b90:	e0 e0       	ldi	r30, 0x00	; 0
     b92:	f0 e0       	ldi	r31, 0x00	; 0
		x = 0;
	}
	if ((int16_t)y < 0) {
     b94:	77 ff       	sbrs	r23, 7
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <_ZN3tft9rectangleEjjjjj+0x3e>
		h -= -(int16_t)y;
     b98:	e6 0e       	add	r14, r22
     b9a:	f7 1e       	adc	r15, r23
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	70 e0       	ldi	r23, 0x00	; 0
		y = 0;
	}
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     ba0:	1c 14       	cp	r1, r12
     ba2:	1d 04       	cpc	r1, r13
     ba4:	e4 f5       	brge	.+120    	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
     ba6:	1e 14       	cp	r1, r14
     ba8:	1f 04       	cpc	r1, r15
     baa:	cc f5       	brge	.+114    	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
		return;
	if (x + w > width)
     bac:	20 91 c5 02 	lds	r18, 0x02C5
     bb0:	30 91 c6 02 	lds	r19, 0x02C6
     bb4:	cf 01       	movw	r24, r30
     bb6:	8c 0d       	add	r24, r12
     bb8:	9d 1d       	adc	r25, r13
     bba:	28 17       	cp	r18, r24
     bbc:	39 07       	cpc	r19, r25
     bbe:	18 f4       	brcc	.+6      	; 0xbc6 <_ZN3tft9rectangleEjjjjj+0x64>
		w = width - x;
     bc0:	69 01       	movw	r12, r18
     bc2:	ce 1a       	sub	r12, r30
     bc4:	df 0a       	sbc	r13, r31
	if (y + h > height)
     bc6:	20 91 c7 02 	lds	r18, 0x02C7
     bca:	30 91 c8 02 	lds	r19, 0x02C8
     bce:	cb 01       	movw	r24, r22
     bd0:	8e 0d       	add	r24, r14
     bd2:	9f 1d       	adc	r25, r15
     bd4:	28 17       	cp	r18, r24
     bd6:	39 07       	cpc	r19, r25
     bd8:	18 f4       	brcc	.+6      	; 0xbe0 <_ZN3tft9rectangleEjjjjj+0x7e>
		h = height - y;
     bda:	79 01       	movw	r14, r18
     bdc:	e6 1a       	sub	r14, r22
     bde:	f7 0a       	sbc	r15, r23
	if ((int16_t)w <= 0 || (int16_t)h <= 0)
     be0:	1c 14       	cp	r1, r12
     be2:	1d 04       	cpc	r1, r13
     be4:	e4 f4       	brge	.+56     	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
     be6:	1e 14       	cp	r1, r14
     be8:	1f 04       	cpc	r1, r15
     bea:	cc f4       	brge	.+50     	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
		return;

	tfthw::area(x, y, w, h);
     bec:	cf 01       	movw	r24, r30
     bee:	a6 01       	movw	r20, r12
     bf0:	97 01       	movw	r18, r14
     bf2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
     bf6:	8c e2       	ldi	r24, 0x2C	; 44
     bf8:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     bfc:	0a c0       	rjmp	.+20     	; 0xc12 <_ZN3tft9rectangleEjjjjj+0xb0>
#ifdef TFT_VERTICAL_SCROLLING
draw:
#endif
	tfthw::memWrite();
	while (h--)
		for (uint16_t xx = 0; xx < w; xx++)
			tfthw::write16(c);
     bfe:	c8 01       	movw	r24, r16
     c00:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
     c04:	21 96       	adiw	r28, 0x01	; 1
     c06:	cc 15       	cp	r28, r12
     c08:	dd 05       	cpc	r29, r13
     c0a:	c8 f3       	brcs	.-14     	; 0xbfe <_ZN3tft9rectangleEjjjjj+0x9c>
     c0c:	08 94       	sec
     c0e:	e1 08       	sbc	r14, r1
     c10:	f1 08       	sbc	r15, r1
     c12:	e1 14       	cp	r14, r1
     c14:	f1 04       	cpc	r15, r1
     c16:	19 f0       	breq	.+6      	; 0xc1e <_ZN3tft9rectangleEjjjjj+0xbc>
     c18:	c0 e0       	ldi	r28, 0x00	; 0
     c1a:	d0 e0       	ldi	r29, 0x00	; 0
     c1c:	f4 cf       	rjmp	.-24     	; 0xc06 <_ZN3tft9rectangleEjjjjj+0xa4>
}
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	ff 90       	pop	r15
     c28:	ef 90       	pop	r14
     c2a:	df 90       	pop	r13
     c2c:	cf 90       	pop	r12
     c2e:	08 95       	ret

00000c30 <_ZN3tft5frameEjjjjhj>:
     c30:	2f 92       	push	r2
     c32:	3f 92       	push	r3
     c34:	4f 92       	push	r4
     c36:	5f 92       	push	r5
     c38:	6f 92       	push	r6
     c3a:	7f 92       	push	r7
     c3c:	8f 92       	push	r8
     c3e:	9f 92       	push	r9
     c40:	af 92       	push	r10
     c42:	bf 92       	push	r11
     c44:	cf 92       	push	r12
     c46:	df 92       	push	r13
     c48:	ef 92       	push	r14
     c4a:	ff 92       	push	r15
     c4c:	0f 93       	push	r16
     c4e:	1f 93       	push	r17
     c50:	cf 93       	push	r28
     c52:	df 93       	push	r29
     c54:	2c 01       	movw	r4, r24
     c56:	3b 01       	movw	r6, r22
     c58:	5a 01       	movw	r10, r20
     c5a:	49 01       	movw	r8, r18
     c5c:	c0 2e       	mov	r12, r16
     c5e:	dd 24       	eor	r13, r13
     c60:	ea 01       	movw	r28, r20
     c62:	cc 19       	sub	r28, r12
     c64:	dd 09       	sbc	r29, r13
     c66:	ae 01       	movw	r20, r28
     c68:	96 01       	movw	r18, r12
     c6a:	87 01       	movw	r16, r14
     c6c:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN3tft9rectangleEjjjjj>
     c70:	14 01       	movw	r2, r8
     c72:	2c 18       	sub	r2, r12
     c74:	3d 08       	sbc	r3, r13
     c76:	a4 0c       	add	r10, r4
     c78:	b5 1c       	adc	r11, r5
     c7a:	c5 01       	movw	r24, r10
     c7c:	8c 19       	sub	r24, r12
     c7e:	9d 09       	sbc	r25, r13
     c80:	b3 01       	movw	r22, r6
     c82:	a6 01       	movw	r20, r12
     c84:	91 01       	movw	r18, r2
     c86:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN3tft9rectangleEjjjjj>
     c8a:	b6 01       	movw	r22, r12
     c8c:	66 0d       	add	r22, r6
     c8e:	77 1d       	adc	r23, r7
     c90:	c2 01       	movw	r24, r4
     c92:	a6 01       	movw	r20, r12
     c94:	91 01       	movw	r18, r2
     c96:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN3tft9rectangleEjjjjj>
     c9a:	86 0c       	add	r8, r6
     c9c:	97 1c       	adc	r9, r7
     c9e:	8c 18       	sub	r8, r12
     ca0:	9d 08       	sbc	r9, r13
     ca2:	c6 01       	movw	r24, r12
     ca4:	84 0d       	add	r24, r4
     ca6:	95 1d       	adc	r25, r5
     ca8:	b4 01       	movw	r22, r8
     caa:	ae 01       	movw	r20, r28
     cac:	96 01       	movw	r18, r12
     cae:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN3tft9rectangleEjjjjj>
     cb2:	df 91       	pop	r29
     cb4:	cf 91       	pop	r28
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	ff 90       	pop	r15
     cbc:	ef 90       	pop	r14
     cbe:	df 90       	pop	r13
     cc0:	cf 90       	pop	r12
     cc2:	bf 90       	pop	r11
     cc4:	af 90       	pop	r10
     cc6:	9f 90       	pop	r9
     cc8:	8f 90       	pop	r8
     cca:	7f 90       	pop	r7
     ccc:	6f 90       	pop	r6
     cce:	5f 90       	pop	r5
     cd0:	4f 90       	pop	r4
     cd2:	3f 90       	pop	r3
     cd4:	2f 90       	pop	r2
     cd6:	08 95       	ret

00000cd8 <_ZN3tft4lineEjjjjj>:
     cd8:	4f 92       	push	r4
     cda:	5f 92       	push	r5
     cdc:	6f 92       	push	r6
     cde:	7f 92       	push	r7
     ce0:	8f 92       	push	r8
     ce2:	9f 92       	push	r9
     ce4:	af 92       	push	r10
     ce6:	bf 92       	push	r11
     ce8:	cf 92       	push	r12
     cea:	df 92       	push	r13
     cec:	ef 92       	push	r14
     cee:	ff 92       	push	r15
     cf0:	0f 93       	push	r16
     cf2:	1f 93       	push	r17
     cf4:	cf 93       	push	r28
     cf6:	df 93       	push	r29
     cf8:	ec 01       	movw	r28, r24
     cfa:	7b 01       	movw	r14, r22
     cfc:	6a 01       	movw	r12, r20
     cfe:	59 01       	movw	r10, r18
     d00:	28 01       	movw	r4, r16
     d02:	80 91 c5 02 	lds	r24, 0x02C5
     d06:	90 91 c6 02 	lds	r25, 0x02C6
     d0a:	8c 17       	cp	r24, r28
     d0c:	9d 07       	cpc	r25, r29
     d0e:	10 f4       	brcc	.+4      	; 0xd14 <_ZN3tft4lineEjjjjj+0x3c>
     d10:	ec 01       	movw	r28, r24
     d12:	21 97       	sbiw	r28, 0x01	; 1
     d14:	8c 15       	cp	r24, r12
     d16:	9d 05       	cpc	r25, r13
     d18:	20 f4       	brcc	.+8      	; 0xd22 <_ZN3tft4lineEjjjjj+0x4a>
     d1a:	6c 01       	movw	r12, r24
     d1c:	08 94       	sec
     d1e:	c1 08       	sbc	r12, r1
     d20:	d1 08       	sbc	r13, r1
     d22:	80 91 c7 02 	lds	r24, 0x02C7
     d26:	90 91 c8 02 	lds	r25, 0x02C8
     d2a:	8e 15       	cp	r24, r14
     d2c:	9f 05       	cpc	r25, r15
     d2e:	20 f4       	brcc	.+8      	; 0xd38 <_ZN3tft4lineEjjjjj+0x60>
     d30:	7c 01       	movw	r14, r24
     d32:	08 94       	sec
     d34:	e1 08       	sbc	r14, r1
     d36:	f1 08       	sbc	r15, r1
     d38:	8a 15       	cp	r24, r10
     d3a:	9b 05       	cpc	r25, r11
     d3c:	20 f4       	brcc	.+8      	; 0xd46 <_ZN3tft4lineEjjjjj+0x6e>
     d3e:	5c 01       	movw	r10, r24
     d40:	08 94       	sec
     d42:	a1 08       	sbc	r10, r1
     d44:	b1 08       	sbc	r11, r1
     d46:	cc 15       	cp	r28, r12
     d48:	dd 05       	cpc	r29, r13
     d4a:	89 f4       	brne	.+34     	; 0xd6e <_ZN3tft4lineEjjjjj+0x96>
     d4c:	ae 14       	cp	r10, r14
     d4e:	bf 04       	cpc	r11, r15
     d50:	18 f4       	brcc	.+6      	; 0xd58 <_ZN3tft4lineEjjjjj+0x80>
     d52:	c5 01       	movw	r24, r10
     d54:	57 01       	movw	r10, r14
     d56:	7c 01       	movw	r14, r24
     d58:	08 94       	sec
     d5a:	a1 1c       	adc	r10, r1
     d5c:	b1 1c       	adc	r11, r1
     d5e:	ae 18       	sub	r10, r14
     d60:	bf 08       	sbc	r11, r15
     d62:	ce 01       	movw	r24, r28
     d64:	b7 01       	movw	r22, r14
     d66:	41 e0       	ldi	r20, 0x01	; 1
     d68:	50 e0       	ldi	r21, 0x00	; 0
     d6a:	95 01       	movw	r18, r10
     d6c:	13 c0       	rjmp	.+38     	; 0xd94 <_ZN3tft4lineEjjjjj+0xbc>
     d6e:	ea 14       	cp	r14, r10
     d70:	fb 04       	cpc	r15, r11
     d72:	a1 f4       	brne	.+40     	; 0xd9c <_ZN3tft4lineEjjjjj+0xc4>
     d74:	cc 16       	cp	r12, r28
     d76:	dd 06       	cpc	r13, r29
     d78:	18 f4       	brcc	.+6      	; 0xd80 <_ZN3tft4lineEjjjjj+0xa8>
     d7a:	c6 01       	movw	r24, r12
     d7c:	6e 01       	movw	r12, r28
     d7e:	ec 01       	movw	r28, r24
     d80:	08 94       	sec
     d82:	c1 1c       	adc	r12, r1
     d84:	d1 1c       	adc	r13, r1
     d86:	cc 1a       	sub	r12, r28
     d88:	dd 0a       	sbc	r13, r29
     d8a:	ce 01       	movw	r24, r28
     d8c:	b7 01       	movw	r22, r14
     d8e:	a6 01       	movw	r20, r12
     d90:	21 e0       	ldi	r18, 0x01	; 1
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	82 01       	movw	r16, r4
     d96:	0e 94 b1 05 	call	0xb62	; 0xb62 <_ZN3tft9rectangleEjjjjj>
     d9a:	6f c0       	rjmp	.+222    	; 0xe7a <_ZN3tft4lineEjjjjj+0x1a2>
     d9c:	36 01       	movw	r6, r12
     d9e:	6c 1a       	sub	r6, r28
     da0:	7d 0a       	sbc	r7, r29
     da2:	77 fe       	sbrs	r7, 7
     da4:	04 c0       	rjmp	.+8      	; 0xdae <_ZN3tft4lineEjjjjj+0xd6>
     da6:	70 94       	com	r7
     da8:	61 94       	neg	r6
     daa:	71 08       	sbc	r7, r1
     dac:	73 94       	inc	r7
     dae:	45 01       	movw	r8, r10
     db0:	8e 18       	sub	r8, r14
     db2:	9f 08       	sbc	r9, r15
     db4:	97 fe       	sbrs	r9, 7
     db6:	04 c0       	rjmp	.+8      	; 0xdc0 <_ZN3tft4lineEjjjjj+0xe8>
     db8:	90 94       	com	r9
     dba:	81 94       	neg	r8
     dbc:	91 08       	sbc	r9, r1
     dbe:	93 94       	inc	r9
     dc0:	68 14       	cp	r6, r8
     dc2:	79 04       	cpc	r7, r9
     dc4:	70 f5       	brcc	.+92     	; 0xe22 <_ZN3tft4lineEjjjjj+0x14a>
     dc6:	ae 14       	cp	r10, r14
     dc8:	bf 04       	cpc	r11, r15
     dca:	30 f4       	brcc	.+12     	; 0xdd8 <_ZN3tft4lineEjjjjj+0x100>
     dcc:	c6 01       	movw	r24, r12
     dce:	6e 01       	movw	r12, r28
     dd0:	ec 01       	movw	r28, r24
     dd2:	c5 01       	movw	r24, r10
     dd4:	57 01       	movw	r10, r14
     dd6:	7c 01       	movw	r14, r24
     dd8:	00 e0       	ldi	r16, 0x00	; 0
     dda:	10 e0       	ldi	r17, 0x00	; 0
     ddc:	1e c0       	rjmp	.+60     	; 0xe1a <_ZN3tft4lineEjjjjj+0x142>
     dde:	cc 16       	cp	r12, r28
     de0:	dd 06       	cpc	r13, r29
     de2:	18 f0       	brcs	.+6      	; 0xdea <_ZN3tft4lineEjjjjj+0x112>
     de4:	21 e0       	ldi	r18, 0x01	; 1
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	02 c0       	rjmp	.+4      	; 0xdee <_ZN3tft4lineEjjjjj+0x116>
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	3f ef       	ldi	r19, 0xFF	; 255
     dee:	c8 01       	movw	r24, r16
     df0:	b4 01       	movw	r22, r8
     df2:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
     df6:	26 9f       	mul	r18, r22
     df8:	c0 01       	movw	r24, r0
     dfa:	27 9f       	mul	r18, r23
     dfc:	90 0d       	add	r25, r0
     dfe:	36 9f       	mul	r19, r22
     e00:	90 0d       	add	r25, r0
     e02:	11 24       	eor	r1, r1
     e04:	8c 0f       	add	r24, r28
     e06:	9d 1f       	adc	r25, r29
     e08:	b7 01       	movw	r22, r14
     e0a:	a2 01       	movw	r20, r4
     e0c:	0e 94 6f 05 	call	0xade	; 0xade <_ZN3tftL5pointEjjj>
     e10:	08 94       	sec
     e12:	e1 1c       	adc	r14, r1
     e14:	f1 1c       	adc	r15, r1
     e16:	06 0d       	add	r16, r6
     e18:	17 1d       	adc	r17, r7
     e1a:	ae 14       	cp	r10, r14
     e1c:	bf 04       	cpc	r11, r15
     e1e:	f8 f6       	brcc	.-66     	; 0xdde <_ZN3tft4lineEjjjjj+0x106>
     e20:	2c c0       	rjmp	.+88     	; 0xe7a <_ZN3tft4lineEjjjjj+0x1a2>
     e22:	cc 16       	cp	r12, r28
     e24:	dd 06       	cpc	r13, r29
     e26:	30 f4       	brcc	.+12     	; 0xe34 <_ZN3tft4lineEjjjjj+0x15c>
     e28:	c6 01       	movw	r24, r12
     e2a:	6e 01       	movw	r12, r28
     e2c:	ec 01       	movw	r28, r24
     e2e:	c5 01       	movw	r24, r10
     e30:	57 01       	movw	r10, r14
     e32:	7c 01       	movw	r14, r24
     e34:	00 e0       	ldi	r16, 0x00	; 0
     e36:	10 e0       	ldi	r17, 0x00	; 0
     e38:	1d c0       	rjmp	.+58     	; 0xe74 <_ZN3tft4lineEjjjjj+0x19c>
     e3a:	ae 14       	cp	r10, r14
     e3c:	bf 04       	cpc	r11, r15
     e3e:	18 f0       	brcs	.+6      	; 0xe46 <_ZN3tft4lineEjjjjj+0x16e>
     e40:	21 e0       	ldi	r18, 0x01	; 1
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	02 c0       	rjmp	.+4      	; 0xe4a <_ZN3tft4lineEjjjjj+0x172>
     e46:	2f ef       	ldi	r18, 0xFF	; 255
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	c8 01       	movw	r24, r16
     e4c:	b3 01       	movw	r22, r6
     e4e:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
     e52:	cb 01       	movw	r24, r22
     e54:	28 9f       	mul	r18, r24
     e56:	b0 01       	movw	r22, r0
     e58:	29 9f       	mul	r18, r25
     e5a:	70 0d       	add	r23, r0
     e5c:	38 9f       	mul	r19, r24
     e5e:	70 0d       	add	r23, r0
     e60:	11 24       	eor	r1, r1
     e62:	6e 0d       	add	r22, r14
     e64:	7f 1d       	adc	r23, r15
     e66:	ce 01       	movw	r24, r28
     e68:	a2 01       	movw	r20, r4
     e6a:	0e 94 6f 05 	call	0xade	; 0xade <_ZN3tftL5pointEjjj>
     e6e:	21 96       	adiw	r28, 0x01	; 1
     e70:	08 0d       	add	r16, r8
     e72:	19 1d       	adc	r17, r9
     e74:	cc 16       	cp	r12, r28
     e76:	dd 06       	cpc	r13, r29
     e78:	00 f7       	brcc	.-64     	; 0xe3a <_ZN3tft4lineEjjjjj+0x162>
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	7f 90       	pop	r7
     e94:	6f 90       	pop	r6
     e96:	5f 90       	pop	r5
     e98:	4f 90       	pop	r4
     e9a:	08 95       	ret

00000e9c <_ZN3tft9setOrientEh>:

void tft::setOrient(uint8_t o)
     e9c:	40 e4       	ldi	r20, 0x40	; 64
     e9e:	51 e0       	ldi	r21, 0x01	; 1
     ea0:	50 93 c6 02 	sts	0x02C6, r21
     ea4:	40 93 c5 02 	sts	0x02C5, r20
{
	width = TFT_SIZE_WIDTH;
	height = TFT_SIZE_HEIGHT;
     ea8:	20 ef       	ldi	r18, 0xF0	; 240
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	30 93 c8 02 	sts	0x02C8, r19
     eb0:	20 93 c7 02 	sts	0x02C7, r18
	if (o & Portrait)
     eb4:	80 ff       	sbrs	r24, 0
     eb6:	08 c0       	rjmp	.+16     	; 0xec8 <_ZN3tft9setOrientEh+0x2c>
     eb8:	30 93 c6 02 	sts	0x02C6, r19
     ebc:	20 93 c5 02 	sts	0x02C5, r18
     ec0:	50 93 c8 02 	sts	0x02C8, r21
     ec4:	40 93 c7 02 	sts	0x02C7, r20
		swap(width, height);
	x = 0;
     ec8:	10 92 c2 02 	sts	0x02C2, r1
     ecc:	10 92 c1 02 	sts	0x02C1, r1
	y = 0;
     ed0:	10 92 c4 02 	sts	0x02C4, r1
     ed4:	10 92 c3 02 	sts	0x02C3, r1
	orient = o;
     ed8:	80 93 bf 02 	sts	0x02BF, r24
	tfthw::setOrient(o);
     edc:	0e 94 18 05 	call	0xa30	; 0xa30 <_ZN5tfthwL9setOrientEh>
}
     ee0:	08 95       	ret

00000ee2 <_ZN3tft4initEv>:
     ee2:	1f 93       	push	r17
{
	uint8_t c;
	uint16_t r;

	if (TFT_WCTRL == PORTC || TFT_WDATA == PORTC) {
     ee4:	92 b1       	in	r25, 0x02	; 2
     ee6:	88 b1       	in	r24, 0x08	; 8
     ee8:	98 17       	cp	r25, r24
     eea:	21 f0       	breq	.+8      	; 0xef4 <_ZN3tft4initEv+0x12>
     eec:	98 b1       	in	r25, 0x08	; 8
     eee:	88 b1       	in	r24, 0x08	; 8
     ef0:	98 17       	cp	r25, r24
     ef2:	31 f4       	brne	.+12     	; 0xf00 <_ZN3tft4initEv+0x1e>
		MCUCR |= 0x80;			// Disable JTAG
     ef4:	85 b7       	in	r24, 0x35	; 53
     ef6:	80 68       	ori	r24, 0x80	; 128
     ef8:	85 bf       	out	0x35, r24	; 53
		MCUCR |= 0x80;
     efa:	85 b7       	in	r24, 0x35	; 53
     efc:	80 68       	ori	r24, 0x80	; 128
     efe:	85 bf       	out	0x35, r24	; 53
	}

	TFT_PCTRL = 0xFF & ~TFT_FMK;
     f00:	8f e7       	ldi	r24, 0x7F	; 127
     f02:	81 b9       	out	0x01, r24	; 1
	TFT_WCTRL = 0xFF & ~TFT_BLC;	// Disable background light
     f04:	8d ef       	ldi	r24, 0xFD	; 253
     f06:	82 b9       	out	0x02, r24	; 2
     f08:	17 b8       	out	0x07, r1	; 7
     f0a:	8f ef       	ldi	r24, 0xFF	; 255
     f0c:	88 b9       	out	0x08, r24	; 8
	mode(true);			// Read mode

	TFT_WCTRL &= ~TFT_RST;	// Hardware reset
     f0e:	12 98       	cbi	0x02, 2	; 2
	TFT_WCTRL &= ~TFT_CS;
     f10:	10 98       	cbi	0x02, 0	; 2
	TFT_WCTRL |= TFT_WR;
     f12:	13 9a       	sbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_RD;
     f14:	15 9a       	sbi	0x02, 5	; 2
	TFT_WCTRL |= TFT_RS;
     f16:	14 9a       	sbi	0x02, 4	; 2
	TFT_WCTRL |= TFT_VSY;
     f18:	16 9a       	sbi	0x02, 6	; 2
     f1a:	88 e2       	ldi	r24, 0x28	; 40
     f1c:	8a 95       	dec	r24
     f1e:	f1 f7       	brne	.-4      	; 0xf1c <_ZN3tft4initEv+0x3a>
	_delay_us(10);		// Min: 10us
	TFT_WCTRL |= TFT_RST;
     f20:	12 9a       	sbi	0x02, 2	; 2
     f22:	80 eb       	ldi	r24, 0xB0	; 176
     f24:	94 e0       	ldi	r25, 0x04	; 4
     f26:	2c e2       	ldi	r18, 0x2C	; 44
     f28:	31 e0       	ldi	r19, 0x01	; 1
     f2a:	f9 01       	movw	r30, r18
     f2c:	31 97       	sbiw	r30, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <_ZN3tft4initEv+0x4a>
     f30:	01 97       	sbiw	r24, 0x01	; 1
     f32:	d9 f7       	brne	.-10     	; 0xf2a <_ZN3tft4initEv+0x48>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	87 b9       	out	0x07, r24	; 7
	_delay_ms(120);
	mode(false);		// Write mode
	cmd(0x28);		// Display OFF
     f38:	88 e2       	ldi	r24, 0x28	; 40
     f3a:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	cmd(0x11);		// Sleep Out
     f3e:	81 e1       	ldi	r24, 0x11	; 17
     f40:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     f44:	80 eb       	ldi	r24, 0xB0	; 176
     f46:	94 e0       	ldi	r25, 0x04	; 4
     f48:	2c e2       	ldi	r18, 0x2C	; 44
     f4a:	31 e0       	ldi	r19, 0x01	; 1
     f4c:	f9 01       	movw	r30, r18
     f4e:	31 97       	sbiw	r30, 0x01	; 1
     f50:	f1 f7       	brne	.-4      	; 0xf4e <_ZN3tft4initEv+0x6c>
     f52:	01 97       	sbiw	r24, 0x01	; 1
     f54:	d9 f7       	brne	.-10     	; 0xf4c <_ZN3tft4initEv+0x6a>
	_delay_ms(120);
	cmd(0x34);		// Tearing Effect Line OFF
     f56:	84 e3       	ldi	r24, 0x34	; 52
     f58:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	cmd(0x38);		// Idle Mode OFF
     f5c:	88 e3       	ldi	r24, 0x38	; 56
     f5e:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	cmd(0x13);		// Normal Display Mode ON
     f62:	83 e1       	ldi	r24, 0x13	; 19
     f64:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	cmd(0x20);		// Display Inversion OFF
     f68:	80 e2       	ldi	r24, 0x20	; 32
     f6a:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	cmd(0x3A);		// COLMOD: Pixel Format Set
     f6e:	8a e3       	ldi	r24, 0x3A	; 58
     f70:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     f74:	85 e5       	ldi	r24, 0x55	; 85
     f76:	88 b9       	out	0x08, r24	; 8
     f78:	13 98       	cbi	0x02, 3	; 2
     f7a:	13 9a       	sbi	0x02, 3	; 2
	data(0x55);		// 16 bits/pixel
	cmd(0x36);		// Memory Access Control
     f7c:	86 e3       	ldi	r24, 0x36	; 54
     f7e:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     f82:	88 e4       	ldi	r24, 0x48	; 72
     f84:	88 b9       	out	0x08, r24	; 8
     f86:	13 98       	cbi	0x02, 3	; 2
     f88:	13 9a       	sbi	0x02, 3	; 2
	data(0x48);		// Column Adress Order, BGR
	cmd(0x2C);		// Memory Write
     f8a:	8c e2       	ldi	r24, 0x2C	; 44
     f8c:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     f90:	80 e0       	ldi	r24, 0x00	; 0
     f92:	90 e0       	ldi	r25, 0x00	; 0
     f94:	0e c0       	rjmp	.+28     	; 0xfb2 <_ZN3tft4initEv+0xd0>
     f96:	18 b8       	out	0x08, r1	; 8
     f98:	13 98       	cbi	0x02, 3	; 2
     f9a:	13 9a       	sbi	0x02, 3	; 2
     f9c:	18 b8       	out	0x08, r1	; 8
     f9e:	13 98       	cbi	0x02, 3	; 2
     fa0:	13 9a       	sbi	0x02, 3	; 2
	for (r = 0; r < 320; r++)	// Black screen
		for (c = 0; c < 240; c++) {
     fa2:	2f 5f       	subi	r18, 0xFF	; 255
     fa4:	20 3f       	cpi	r18, 0xF0	; 240
     fa6:	b9 f7       	brne	.-18     	; 0xf96 <_ZN3tft4initEv+0xb4>
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	21 e0       	ldi	r18, 0x01	; 1
     fac:	80 34       	cpi	r24, 0x40	; 64
     fae:	92 07       	cpc	r25, r18
     fb0:	11 f0       	breq	.+4      	; 0xfb6 <_ZN3tft4initEv+0xd4>
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	f0 cf       	rjmp	.-32     	; 0xf96 <_ZN3tft4initEv+0xb4>
			data(0x00);
			data(0x00);
		}
	cmd(0xB1);		// Frame Rate control, normal
     fb6:	81 eb       	ldi	r24, 0xB1	; 177
     fb8:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     fbc:	18 b8       	out	0x08, r1	; 8
     fbe:	13 98       	cbi	0x02, 3	; 2
     fc0:	13 9a       	sbi	0x02, 3	; 2
     fc2:	18 e1       	ldi	r17, 0x18	; 24
     fc4:	18 b9       	out	0x08, r17	; 8
     fc6:	13 98       	cbi	0x02, 3	; 2
     fc8:	13 9a       	sbi	0x02, 3	; 2
	data(0x00);		// Faster
	data(0x18);
	cmd(0xB3);		// Frame Rate control, partial
     fca:	83 eb       	ldi	r24, 0xB3	; 179
     fcc:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     fd0:	18 b8       	out	0x08, r1	; 8
     fd2:	13 98       	cbi	0x02, 3	; 2
     fd4:	13 9a       	sbi	0x02, 3	; 2
     fd6:	18 b9       	out	0x08, r17	; 8
     fd8:	13 98       	cbi	0x02, 3	; 2
     fda:	13 9a       	sbi	0x02, 3	; 2
	data(0x00);		// Faster
	data(0x18);
	cmd(0x29);		// Display On
     fdc:	89 e2       	ldi	r24, 0x29	; 41
     fde:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
     fe2:	10 92 c2 02 	sts	0x02C2, r1
     fe6:	10 92 c1 02 	sts	0x02C1, r1
     fea:	10 92 c4 02 	sts	0x02C4, r1
     fee:	10 92 c3 02 	sts	0x02C3, r1
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	80 93 be 02 	sts	0x02BE, r24
     ff8:	0e 94 4e 07 	call	0xe9c	; 0xe9c <_ZN3tft9setOrientEh>
     ffc:	84 e0       	ldi	r24, 0x04	; 4
     ffe:	80 93 c0 02 	sts	0x02C0, r24
    1002:	8f ef       	ldi	r24, 0xFF	; 255
    1004:	9f ef       	ldi	r25, 0xFF	; 255
    1006:	90 93 ca 02 	sts	0x02CA, r25
    100a:	80 93 c9 02 	sts	0x02C9, r24
    100e:	10 92 cc 02 	sts	0x02CC, r1
    1012:	10 92 cb 02 	sts	0x02CB, r1
    1016:	1f 91       	pop	r17
    1018:	08 95       	ret

0000101a <_ZN3tft8drawCharEc>:

#ifdef TFT_VERTICAL_SCROLLING
uint16_t tft::vsTransform(uint16_t y)
{
#ifdef TFT_CHECKING
	if ((int16_t)y < 0)
		return y;
#endif
	if (y < topEdge() || y >= bottomEdge())
		return y;
	y -= topEdge();		// Relative to upperEdge
	y += upperEdge();	// Relative to 0
	if (y >= bottomEdge())	// Transform edge
		y -= vsHeight();
	return y;
}

uint16_t tft::vsTransformBack(uint16_t y)
{
#ifdef TFT_CHECKING
	if ((int16_t)y < 0)
		return y;
#endif
	if (y < topEdge() || y >= bottomEdge())
		return y;
	if (y < upperEdge())
		y += vsHeight();
	y -= upperEdge();	// Relative to upperEdge
	y += topEdge();		// Relative to 0
	return y;
}

void tft::setVerticalScrolling(const uint16_t vsp)
{
	tfthw::setVSStart(flipped() ? vsMaximum() - vsp : vsp);
	d.vsp = vsp;
}

void tft::setVerticalScrollingArea(const uint16_t tfa, const uint16_t bfa)
{
	uint16_t vsa = vsMaximum() - tfa - bfa;
	if (flipped())
		tfthw::setVSDefinition(bfa, vsa, tfa);
	else
		tfthw::setVSDefinition(tfa, vsa, bfa);
	d.tfa = tfa;
	d.bfa = bfa;
}
#endif

void tft::newline()
{
	using namespace tfthw;
	x = 0;
	y += FONT_HEIGHT * zoom;
	if (y + FONT_HEIGHT * zoom > height) {
#ifdef TFT_SCROLL
		shiftUp(FONT_HEIGHT * zoom);
		y -= FONT_HEIGHT * zoom;
#else
		clean();
#endif
	}
}

void tft::drawChar(char ch)
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	18 2f       	mov	r17, r24
{
#ifdef TFT_FONTS
#ifdef ASCII_STRIPPED
	drawImage2(font->ptr + ((uint8_t)ch - font->offset) * font->size, x, y, FONT_WIDTH, FONT_HEIGHT, true);
#else
	drawImage2Aligned(font->ptr + ((uint8_t)ch - font->offset) * font->size, x, y, FONT_WIDTH, FONT_HEIGHT, true);
#endif
#else
	using namespace tfthw;
#ifdef TFT_CHECKING
	if ((int16_t)x() >= (int16_t)width() || (int16_t)y() >= (int16_t)height())
		return;
#endif
	if ((int16_t)(x + FONT_WIDTH * zoom) < 0)
    102e:	20 91 c1 02 	lds	r18, 0x02C1
    1032:	30 91 c2 02 	lds	r19, 0x02C2
    1036:	e0 91 d8 01 	lds	r30, 0x01D8
    103a:	f0 91 d9 01 	lds	r31, 0x01D9
    103e:	50 81       	ld	r21, Z
    1040:	40 91 be 02 	lds	r20, 0x02BE
    1044:	45 9f       	mul	r20, r21
    1046:	c0 01       	movw	r24, r0
    1048:	11 24       	eor	r1, r1
    104a:	82 0f       	add	r24, r18
    104c:	93 1f       	adc	r25, r19
    104e:	97 fd       	sbrc	r25, 7
    1050:	5c c0       	rjmp	.+184    	; 0x110a <__stack+0xb>
		return;
	uint8_t h = FONT_HEIGHT * zoom, w = FONT_WIDTH * zoom;
    1052:	81 81       	ldd	r24, Z+1	; 0x01
    1054:	48 9f       	mul	r20, r24
    1056:	b0 2c       	mov	r11, r0
    1058:	11 24       	eor	r1, r1
    105a:	45 9f       	mul	r20, r21
    105c:	e0 2c       	mov	r14, r0
    105e:	11 24       	eor	r1, r1
#ifdef TFT_VERTICAL_SCROLLING
	// Display coordinate, start coordinate
	uint16_t xx = x;
	uint16_t yy = y;
	uint8_t xStart = 0, xStop = w;
	uint8_t yStart = 0, yStop = h;

	if (transform()) {
		if (landscape()) {
			yy = xx;
			yStop = xStop;
			swap(w, h);
		}

		uint16_t yt = vsTransformBack(yy);

#if 0
		if ((int16_t)yt < (int16_t)topEdge() && \
			(int16_t)(yt + h) >= (int16_t)topEdge()) {	// Top edge clipping
			yStart = topEdge() - yt;
			yy = upperEdge();
			yt = vsTransformBack(yy);
		} else if (yt < bottomEdge() && yt + h >= bottomEdge())	// Bottom edge clipping
			yStop = bottomEdge() - yt;
#endif

		// Top mask clipping
		if (yt < topMask()) {
			if (yt + yStop - yStart < topMask())
				return;
			yStart += topMask() - yt;
			yt = topMask();
			yy = vsTransform(yt);
		}

		// Bottom mask clipping
		uint16_t bMask = vsMaximum() - bottomMask();
		if (yt >= bMask)
			return;
		if (yt + yStop - yStart > bMask)
			yStop -= yt + yStop - yStart - bMask;

		if (landscape()) {
			swap(w, h);
			xx = yy;
			xStart = yStart;
			xStop = yStop;
			yy = y;
			yStart = 0;
			yStop = h;
		}
	}

	bool xTransform = transform() && !portrait() && xx < bottomEdge() && xx + xStop - xStart > bottomEdge();
	bool yTransform = transform() && portrait() && yy < bottomEdge() && yy + yStop - yStart > bottomEdge();
	uint8_t xEnd = xTransform ? bottomEdge() - xx : xStop;
draw:
	area(xx, yy, xEnd - xStart, h);
#else
	area(x, y, w, h);
    1060:	60 91 c3 02 	lds	r22, 0x02C3
    1064:	70 91 c4 02 	lds	r23, 0x02C4
    1068:	c9 01       	movw	r24, r18
    106a:	4e 2d       	mov	r20, r14
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	2b 2d       	mov	r18, r11
    1070:	30 e0       	ldi	r19, 0x00	; 0
    1072:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    1076:	8c e2       	ldi	r24, 0x2C	; 44
    1078:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
    107c:	ff 24       	eor	r15, r15
#endif
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	for (uint8_t yi = yStart; yi < yStop; yi++) {
		if (yTransform && yy + yi - yStart == bottomEdge()) {
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
#else
	for (uint8_t yi = 0; yi < h; yi++) {
#endif
		unsigned char c;
#ifdef TFT_VERTICAL_SCROLLING
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom) << (xStart / zoom);
		for (uint8_t xi = xStart; xi < xEnd; xi++) {
#else
		c = pgm_read_byte(font->ptr + ((uint8_t)ch - font->offset) * font->size + yi / zoom);
    107e:	c1 2e       	mov	r12, r17
    1080:	dd 24       	eor	r13, r13
    1082:	40 c0       	rjmp	.+128    	; 0x1104 <__stack+0x5>
    1084:	e0 91 d8 01 	lds	r30, 0x01D8
    1088:	f0 91 d9 01 	lds	r31, 0x01D9
    108c:	60 91 be 02 	lds	r22, 0x02BE
    1090:	8f 2d       	mov	r24, r15
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	70 e0       	ldi	r23, 0x00	; 0
    1096:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
    109a:	83 81       	ldd	r24, Z+3	; 0x03
    109c:	96 01       	movw	r18, r12
    109e:	28 1b       	sub	r18, r24
    10a0:	31 09       	sbc	r19, r1
    10a2:	82 81       	ldd	r24, Z+2	; 0x02
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	ac 01       	movw	r20, r24
    10a8:	24 9f       	mul	r18, r20
    10aa:	c0 01       	movw	r24, r0
    10ac:	25 9f       	mul	r18, r21
    10ae:	90 0d       	add	r25, r0
    10b0:	34 9f       	mul	r19, r20
    10b2:	90 0d       	add	r25, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	86 0f       	add	r24, r22
    10b8:	97 1f       	adc	r25, r23
    10ba:	04 80       	ldd	r0, Z+4	; 0x04
    10bc:	f5 81       	ldd	r31, Z+5	; 0x05
    10be:	e0 2d       	mov	r30, r0
    10c0:	e8 0f       	add	r30, r24
    10c2:	f9 1f       	adc	r31, r25
    10c4:	04 91       	lpm	r16, Z
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	c1 e0       	ldi	r28, 0x01	; 1
    10ca:	d0 e0       	ldi	r29, 0x00	; 0
    10cc:	18 c0       	rjmp	.+48     	; 0x10fe <_ZN3tft8drawCharEc+0xe4>
		for (uint8_t xi = 0; xi < w; xi++) {
#endif
			if (c & 0x80)
    10ce:	07 ff       	sbrs	r16, 7
    10d0:	05 c0       	rjmp	.+10     	; 0x10dc <_ZN3tft8drawCharEc+0xc2>
				write16(foreground);
    10d2:	80 91 c9 02 	lds	r24, 0x02C9
    10d6:	90 91 ca 02 	lds	r25, 0x02CA
    10da:	04 c0       	rjmp	.+8      	; 0x10e4 <_ZN3tft8drawCharEc+0xca>
			else
				write16(background);
    10dc:	80 91 cb 02 	lds	r24, 0x02CB
    10e0:	90 91 cc 02 	lds	r25, 0x02CC
    10e4:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
			if ((xi + 1) % zoom == 0)
    10e8:	60 91 be 02 	lds	r22, 0x02BE
    10ec:	ce 01       	movw	r24, r28
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	0e 94 49 0a 	call	0x1492	; 0x1492 <__divmodhi4>
    10f4:	89 2b       	or	r24, r25
    10f6:	09 f4       	brne	.+2      	; 0x10fa <_ZN3tft8drawCharEc+0xe0>
				c <<= 1;
    10f8:	00 0f       	add	r16, r16
    10fa:	1f 5f       	subi	r17, 0xFF	; 255
    10fc:	21 96       	adiw	r28, 0x01	; 1
    10fe:	1e 15       	cp	r17, r14
    1100:	30 f3       	brcs	.-52     	; 0x10ce <_ZN3tft8drawCharEc+0xb4>
    1102:	f3 94       	inc	r15
    1104:	fb 14       	cp	r15, r11
    1106:	08 f4       	brcc	.+2      	; 0x110a <__stack+0xb>
    1108:	bd cf       	rjmp	.-134    	; 0x1084 <_ZN3tft8drawCharEc+0x6a>
		}
	}
#ifdef TFT_VERTICAL_SCROLLING
	if (xTransform) {
		xx = topEdge();
		xStart = xEnd;
		xEnd = xStop;
		xTransform = false;
		goto draw;
	}
#endif
#endif
}
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	08 95       	ret

0000111e <_ZN3tft10drawImage2EPKhjjjjb>:

void tft::drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    111e:	9f 92       	push	r9
    1120:	af 92       	push	r10
    1122:	bf 92       	push	r11
    1124:	cf 92       	push	r12
    1126:	df 92       	push	r13
    1128:	ef 92       	push	r14
    112a:	ff 92       	push	r15
    112c:	0f 93       	push	r16
    112e:	1f 93       	push	r17
    1130:	cf 93       	push	r28
    1132:	df 93       	push	r29
    1134:	ec 01       	movw	r28, r24
    1136:	cb 01       	movw	r24, r22
    1138:	59 01       	movw	r10, r18
    113a:	68 01       	movw	r12, r16
    113c:	9e 2c       	mov	r9, r14
{
	using namespace tfthw;
	uint8_t i = 0, c = 0;
	// TODO: zooming support

#ifdef TFT_VERTICAL_SCROLLING
	uint16_t xt = 0, yt = 0, bMask;
	uint8_t xs = 0, xe = 0;

	if (!transform())
		goto disp;
	if (landscape())
		goto landscape;

	yt = vsTransformBack(y);

	// Top mask clipping
	if (yt < topMask()) {
		if (yt + h <= topMask())
			return;
		uint16_t s = topMask() - yt;
		h -= s;
		yt = topMask();
		ptr += s * w / 8;
		i = (s * w) % 8;
		c = *ptr << i;
	}

	// Bottom mask clipping
	bMask = vsMaximum() - bottomMask();
	if (yt >= bMask)
		return;
	if (yt + h > bMask)
		h -= yt + h - bMask;

	// TODO: topEdge & bottomEdge clipping may need to implemented

	y = vsTransform(yt);
	goto disp;

landscape:
	xt = vsTransformBack(x);

	// Top mask clipping
	if (xt < topMask()) {
		if (xt + w <= topMask())
			return;
		xs = topMask() - xt;
		xt = topMask();
	}

#if 0
	// Bottom mask clipping
	bMask = vsMaximum() - bottomMask();
	if (xt >= bMask)
		return;
	if (xt + w > bMask)
		xe = xt + w - bMask;
#endif

	// TODO: topEdge & bottomEdge clipping may need to implemented

	x = vsTransform(xt);
	w -= xs + xe;
#endif

#ifdef TFT_VERTICAL_SCROLLING
disp:
#endif
	area(x, y, w, h);
    113e:	ba 01       	movw	r22, r20
    1140:	a9 01       	movw	r20, r18
    1142:	98 01       	movw	r18, r16
    1144:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    1148:	8c e2       	ldi	r24, 0x2C	; 44
    114a:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
    114e:	20 e0       	ldi	r18, 0x00	; 0
    1150:	10 e0       	ldi	r17, 0x00	; 0
    1152:	ee 24       	eor	r14, r14
    1154:	28 c0       	rjmp	.+80     	; 0x11a6 <_ZN3tft10drawImage2EPKhjjjjb+0x88>
	memWrite();
#ifdef TFT_VERTICAL_SCROLLING
	//bool xTransform = transform() && !portrait() && x < bottomEdge() && x + w - xs - xe > bottomEdge();
	bool yTransform = transform() && portrait() && y < bottomEdge() && y + h > bottomEdge();
#endif
	for (uint8_t yy = 0; yy < h; yy++) {
#ifdef TFT_VERTICAL_SCROLLING
		if (yTransform && y + yy == bottomEdge()) {
			area(x, topEdge(), w, h);
			memWrite();
			yTransform = false;
		}
		uint8_t pi = i;
		for (uint8_t xx = 0; xx < xs; xx++) {
			if (i % 8 == 0)
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
			i++;
		}
		if (xs) {
			//i += xs;
			//ptr += (i + 1) / 8;
			i = pi + xs;
			i %= 8;
			if (i)
				c <<= i;
		}
#endif
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    1156:	02 2f       	mov	r16, r18
    1158:	0f 5f       	subi	r16, 0xFF	; 255
    115a:	22 23       	and	r18, r18
    115c:	51 f4       	brne	.+20     	; 0x1172 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    115e:	ce 01       	movw	r24, r28
    1160:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    1162:	99 20       	and	r9, r9
    1164:	21 f0       	breq	.+8      	; 0x116e <_ZN3tft10drawImage2EPKhjjjjb+0x50>
    1166:	fe 01       	movw	r30, r28
    1168:	ec 01       	movw	r28, r24
    116a:	14 91       	lpm	r17, Z
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <_ZN3tft10drawImage2EPKhjjjjb+0x54>
    116e:	18 81       	ld	r17, Y
    1170:	ec 01       	movw	r28, r24
			if (c & 0x80)
    1172:	17 ff       	sbrs	r17, 7
    1174:	05 c0       	rjmp	.+10     	; 0x1180 <_ZN3tft10drawImage2EPKhjjjjb+0x62>
				write16(foreground);
    1176:	80 91 c9 02 	lds	r24, 0x02C9
    117a:	90 91 ca 02 	lds	r25, 0x02CA
    117e:	04 c0       	rjmp	.+8      	; 0x1188 <_ZN3tft10drawImage2EPKhjjjjb+0x6a>
			else
				write16(background);
    1180:	80 91 cb 02 	lds	r24, 0x02CB
    1184:	90 91 cc 02 	lds	r25, 0x02CC
    1188:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
			if (i == 8)
    118c:	08 30       	cpi	r16, 0x08	; 8
    118e:	11 f4       	brne	.+4      	; 0x1194 <_ZN3tft10drawImage2EPKhjjjjb+0x76>
    1190:	00 e0       	ldi	r16, 0x00	; 0
    1192:	01 c0       	rjmp	.+2      	; 0x1196 <_ZN3tft10drawImage2EPKhjjjjb+0x78>
				i = 0;
			else
				c <<= 1;
    1194:	11 0f       	add	r17, r17
    1196:	f3 94       	inc	r15
    1198:	20 2f       	mov	r18, r16
    119a:	8f 2d       	mov	r24, r15
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	8a 15       	cp	r24, r10
    11a0:	9b 05       	cpc	r25, r11
    11a2:	c8 f2       	brcs	.-78     	; 0x1156 <_ZN3tft10drawImage2EPKhjjjjb+0x38>
    11a4:	e3 94       	inc	r14
    11a6:	8e 2d       	mov	r24, r14
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	8c 15       	cp	r24, r12
    11ac:	9d 05       	cpc	r25, r13
    11ae:	10 f4       	brcc	.+4      	; 0x11b4 <_ZN3tft10drawImage2EPKhjjjjb+0x96>
    11b0:	ff 24       	eor	r15, r15
    11b2:	f3 cf       	rjmp	.-26     	; 0x119a <_ZN3tft10drawImage2EPKhjjjjb+0x7c>
		}
	}
}
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	08 95       	ret

000011cc <_ZN3tft17drawImage2AlignedEPKhjjjjb>:

void tft::drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem)
    11cc:	9f 92       	push	r9
    11ce:	af 92       	push	r10
    11d0:	bf 92       	push	r11
    11d2:	cf 92       	push	r12
    11d4:	df 92       	push	r13
    11d6:	ef 92       	push	r14
    11d8:	ff 92       	push	r15
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	cf 93       	push	r28
    11e0:	df 93       	push	r29
    11e2:	ec 01       	movw	r28, r24
    11e4:	cb 01       	movw	r24, r22
    11e6:	59 01       	movw	r10, r18
    11e8:	68 01       	movw	r12, r16
    11ea:	9e 2c       	mov	r9, r14
{
	using namespace tfthw;
	uint8_t i, c = 0;
	// TODO: zooming support
	// TODO: vertical scrolling support

	area(x, y, w, h);
    11ec:	ba 01       	movw	r22, r20
    11ee:	a9 01       	movw	r20, r18
    11f0:	98 01       	movw	r18, r16
    11f2:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    11f6:	8c e2       	ldi	r24, 0x2C	; 44
    11f8:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
    11fc:	10 e0       	ldi	r17, 0x00	; 0
    11fe:	ee 24       	eor	r14, r14
    1200:	28 c0       	rjmp	.+80     	; 0x1252 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x86>
	memWrite();
	for (uint8_t yy = 0; yy < h; yy++) {
		i = 0;
		for (uint8_t xx = 0; xx < w; xx++) {
			if (i++ == 0)
    1202:	02 2f       	mov	r16, r18
    1204:	0f 5f       	subi	r16, 0xFF	; 255
    1206:	22 23       	and	r18, r18
    1208:	51 f4       	brne	.+20     	; 0x121e <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    120a:	ce 01       	movw	r24, r28
    120c:	01 96       	adiw	r24, 0x01	; 1
				c = progMem ? pgm_read_byte(ptr++) : *ptr++;
    120e:	99 20       	and	r9, r9
    1210:	21 f0       	breq	.+8      	; 0x121a <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x4e>
    1212:	fe 01       	movw	r30, r28
    1214:	ec 01       	movw	r28, r24
    1216:	14 91       	lpm	r17, Z
    1218:	02 c0       	rjmp	.+4      	; 0x121e <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x52>
    121a:	18 81       	ld	r17, Y
    121c:	ec 01       	movw	r28, r24
			if (c & 0x80)
    121e:	17 ff       	sbrs	r17, 7
    1220:	05 c0       	rjmp	.+10     	; 0x122c <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x60>
				write16(foreground);
    1222:	80 91 c9 02 	lds	r24, 0x02C9
    1226:	90 91 ca 02 	lds	r25, 0x02CA
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x68>
			else
				write16(background);
    122c:	80 91 cb 02 	lds	r24, 0x02CB
    1230:	90 91 cc 02 	lds	r25, 0x02CC
    1234:	0e 94 0b 05 	call	0xa16	; 0xa16 <_ZN5tfthwL7write16Ej>
			if (i == 8)
    1238:	08 30       	cpi	r16, 0x08	; 8
    123a:	11 f4       	brne	.+4      	; 0x1240 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x74>
    123c:	00 e0       	ldi	r16, 0x00	; 0
    123e:	01 c0       	rjmp	.+2      	; 0x1242 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x76>
				i = 0;
			else
				c <<= 1;
    1240:	11 0f       	add	r17, r17
    1242:	f3 94       	inc	r15
    1244:	20 2f       	mov	r18, r16
    1246:	8f 2d       	mov	r24, r15
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	8a 15       	cp	r24, r10
    124c:	9b 05       	cpc	r25, r11
    124e:	c8 f2       	brcs	.-78     	; 0x1202 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x36>
    1250:	e3 94       	inc	r14
    1252:	8e 2d       	mov	r24, r14
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	8c 15       	cp	r24, r12
    1258:	9d 05       	cpc	r25, r13
    125a:	18 f4       	brcc	.+6      	; 0x1262 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x96>
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	ff 24       	eor	r15, r15
    1260:	f2 cf       	rjmp	.-28     	; 0x1246 <_ZN3tft17drawImage2AlignedEPKhjjjjb+0x7a>
		}
	}
}
    1262:	df 91       	pop	r29
    1264:	cf 91       	pop	r28
    1266:	1f 91       	pop	r17
    1268:	0f 91       	pop	r16
    126a:	ff 90       	pop	r15
    126c:	ef 90       	pop	r14
    126e:	df 90       	pop	r13
    1270:	cf 90       	pop	r12
    1272:	bf 90       	pop	r11
    1274:	af 90       	pop	r10
    1276:	9f 90       	pop	r9
    1278:	08 95       	ret

0000127a <_ZN3tft4fillEj>:

static int tftputchar(const char c, FILE *stream)
{
	tft::putChar(c);
	return 0;
}

FILE *tftout()
{
	static FILE *out = NULL;
	if (out == NULL)
		out = fdevopen(tftputchar, NULL);
	return out;
}

void tft::fill(uint16_t clr)
    127a:	0f 93       	push	r16
    127c:	1f 93       	push	r17
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	8c 01       	movw	r16, r24
{
	using namespace tfthw;
	uint8_t ch = clr / 0x0100, cl = clr % 0x0100;
	uint16_t x = width, y;
    1284:	c0 91 c5 02 	lds	r28, 0x02C5
    1288:	d0 91 c6 02 	lds	r29, 0x02C6

namespace tfthw
{
	static inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	static inline void all() {area(0, 0, tft::width, tft::height);}
    128c:	20 91 c7 02 	lds	r18, 0x02C7
    1290:	30 91 c8 02 	lds	r19, 0x02C8
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	60 e0       	ldi	r22, 0x00	; 0
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	ae 01       	movw	r20, r28
    129e:	0e 94 3f 05 	call	0xa7e	; 0xa7e <_ZN5tfthwL4areaEjjjj>
	static inline void setOrient(uint8_t o);
	static inline void setPage(const uint16_t start, const uint16_t end);
	static inline void setColumn(const uint16_t start, const uint16_t end);
	// 0x2c Write, 0x2e Read, 0x3c / 0x3e Continue, 0x00 NOP
	static inline void memWrite() {cmd(0x2c);}
    12a2:	8c e2       	ldi	r24, 0x2C	; 44
    12a4:	0e 94 12 05 	call	0xa24	; 0xa24 <_ZN5tfthwL3cmdEh>
	all();
	memWrite();
	while (x--) {
		y = height;
    12a8:	50 91 c7 02 	lds	r21, 0x02C7
    12ac:	40 91 c8 02 	lds	r20, 0x02C8
    12b0:	0c c0       	rjmp	.+24     	; 0x12ca <_ZN3tft4fillEj+0x50>
}

static inline void tfthw::data(uint8_t dat)
{
	TFT_WDATA = dat;
    12b2:	18 b9       	out	0x08, r17	; 8
	TFT_WCTRL &= ~TFT_WR;
    12b4:	13 98       	cbi	0x02, 3	; 2
	TFT_WCTRL |= TFT_WR;
    12b6:	13 9a       	sbi	0x02, 3	; 2
    12b8:	08 b9       	out	0x08, r16	; 8
    12ba:	13 98       	cbi	0x02, 3	; 2
    12bc:	13 9a       	sbi	0x02, 3	; 2
    12be:	21 50       	subi	r18, 0x01	; 1
    12c0:	30 40       	sbci	r19, 0x00	; 0
		while (y--) {
    12c2:	21 15       	cp	r18, r1
    12c4:	31 05       	cpc	r19, r1
    12c6:	a9 f7       	brne	.-22     	; 0x12b2 <_ZN3tft4fillEj+0x38>
    12c8:	21 97       	sbiw	r28, 0x01	; 1
    12ca:	20 97       	sbiw	r28, 0x00	; 0
    12cc:	21 f0       	breq	.+8      	; 0x12d6 <_ZN3tft4fillEj+0x5c>
    12ce:	85 2f       	mov	r24, r21
    12d0:	94 2f       	mov	r25, r20
    12d2:	9c 01       	movw	r18, r24
    12d4:	f6 cf       	rjmp	.-20     	; 0x12c2 <_ZN3tft4fillEj+0x48>
			data(ch);
			data(cl);
		}
	}
}
    12d6:	df 91       	pop	r29
    12d8:	cf 91       	pop	r28
    12da:	1f 91       	pop	r17
    12dc:	0f 91       	pop	r16
    12de:	08 95       	ret

000012e0 <_ZN3tft7newlineEv>:
    12e0:	10 92 c2 02 	sts	0x02C2, r1
    12e4:	10 92 c1 02 	sts	0x02C1, r1
    12e8:	e0 91 d8 01 	lds	r30, 0x01D8
    12ec:	f0 91 d9 01 	lds	r31, 0x01D9
    12f0:	20 91 be 02 	lds	r18, 0x02BE
    12f4:	81 81       	ldd	r24, Z+1	; 0x01
    12f6:	28 9f       	mul	r18, r24
    12f8:	90 01       	movw	r18, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	80 91 c3 02 	lds	r24, 0x02C3
    1300:	90 91 c4 02 	lds	r25, 0x02C4
    1304:	82 0f       	add	r24, r18
    1306:	93 1f       	adc	r25, r19
    1308:	90 93 c4 02 	sts	0x02C4, r25
    130c:	80 93 c3 02 	sts	0x02C3, r24
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	20 91 c7 02 	lds	r18, 0x02C7
    1318:	30 91 c8 02 	lds	r19, 0x02C8
    131c:	28 17       	cp	r18, r24
    131e:	39 07       	cpc	r19, r25
    1320:	70 f4       	brcc	.+28     	; 0x133e <_ZN3tft7newlineEv+0x5e>

	void line(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t c);
	void frame(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint8_t s, uint16_t c);
	void fill(uint16_t clr);
	static inline void clean() {fill(background); x = 0; y = 0;}
    1322:	80 91 cb 02 	lds	r24, 0x02CB
    1326:	90 91 cc 02 	lds	r25, 0x02CC
    132a:	0e 94 3d 09 	call	0x127a	; 0x127a <_ZN3tft4fillEj>
    132e:	10 92 c2 02 	sts	0x02C2, r1
    1332:	10 92 c1 02 	sts	0x02C1, r1
    1336:	10 92 c4 02 	sts	0x02C4, r1
    133a:	10 92 c3 02 	sts	0x02C3, r1
    133e:	08 95       	ret

00001340 <_ZN3tftL4nextEv>:
	void drawChar(char ch);
	void rectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t c);
	void drawImage2(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem = false);
	void drawImage2Aligned(const uint8_t *ptr, uint16_t x, uint16_t y, uint16_t w, uint16_t h, bool progMem = false);
	static inline void point(uint16_t x, uint16_t y, uint16_t c);
#ifdef TFT_READ_AVAILABLE
	void shiftUp(const uint16_t l);
#endif

	// Private functions
	void newline();
	static inline void next();
	static inline void tab();
}

namespace tfthw
{
	static inline void area(uint16_t x, uint16_t y, uint16_t w, uint16_t h);
	static inline void all() {area(0, 0, tft::width, tft::height);}
}

FILE *tftout();

// Defined as inline to execute faster

static inline void tft::putChar(const char c)
{
	switch (c) {
	case '\n':
		newline();
		break;
	case '\t':
		tab();
		break;
	default:
		if ((unsigned)c < ' ')
			break;
		drawChar(c);
		next();
	}
}

inline void tft::point(uint16_t x, uint16_t y, uint16_t c)
{
	using namespace tfthw;
	if (x >= width || y >= height)
		return;
	area(x, y, 1, 1);
	memWrite();
	write16(c);
}

inline void tfthw::area(uint16_t x, uint16_t y, uint16_t w, uint16_t h)
{
	using namespace tfthw;
	setColumn(x, x + w - 1);
	setPage(y, y + h - 1);
}

inline void tft::next()
    1340:	e0 91 d8 01 	lds	r30, 0x01D8
    1344:	f0 91 d9 01 	lds	r31, 0x01D9
    1348:	20 91 be 02 	lds	r18, 0x02BE
    134c:	80 81       	ld	r24, Z
    134e:	28 9f       	mul	r18, r24
    1350:	90 01       	movw	r18, r0
    1352:	11 24       	eor	r1, r1
    1354:	80 91 c1 02 	lds	r24, 0x02C1
    1358:	90 91 c2 02 	lds	r25, 0x02C2
    135c:	82 0f       	add	r24, r18
    135e:	93 1f       	adc	r25, r19
    1360:	90 93 c2 02 	sts	0x02C2, r25
    1364:	80 93 c1 02 	sts	0x02C1, r24
{
#ifdef TFT_VERTICAL_SCROLLING
	if (transform() && !portrait()) {
		uint16_t xt = vsTransformBack(x);
		x = vsTransform(xt + FONT_WIDTH * zoom);
	} else {
#endif
		x += FONT_WIDTH * zoom;
		if (x + FONT_WIDTH * zoom > width)
    1368:	82 0f       	add	r24, r18
    136a:	93 1f       	adc	r25, r19
    136c:	20 91 c5 02 	lds	r18, 0x02C5
    1370:	30 91 c6 02 	lds	r19, 0x02C6
    1374:	28 17       	cp	r18, r24
    1376:	39 07       	cpc	r19, r25
    1378:	10 f4       	brcc	.+4      	; 0x137e <_ZN3tftL4nextEv+0x3e>
			newline();
    137a:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN3tft7newlineEv>
    137e:	08 95       	ret

00001380 <_ZN3tftL7putCharEc>:
    1380:	cf 93       	push	r28
    1382:	df 93       	push	r29
    1384:	89 30       	cpi	r24, 0x09	; 9
    1386:	29 f0       	breq	.+10     	; 0x1392 <_ZN3tftL7putCharEc+0x12>
    1388:	8a 30       	cpi	r24, 0x0A	; 10
    138a:	b9 f5       	brne	.+110    	; 0x13fa <_ZN3tftL7putCharEc+0x7a>
    138c:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_ZN3tft7newlineEv>
    1390:	3a c0       	rjmp	.+116    	; 0x1406 <_ZN3tftL7putCharEc+0x86>
#ifdef TFT_VERTICAL_SCROLLING
	}
#endif
}

inline void tft::tab()
{
	if (x % (FONT_WIDTH * zoom))
    1392:	c0 91 c1 02 	lds	r28, 0x02C1
    1396:	d0 91 c2 02 	lds	r29, 0x02C2
    139a:	e0 91 d8 01 	lds	r30, 0x01D8
    139e:	f0 91 d9 01 	lds	r31, 0x01D9
    13a2:	60 91 be 02 	lds	r22, 0x02BE
    13a6:	80 81       	ld	r24, Z
    13a8:	68 9f       	mul	r22, r24
    13aa:	b0 01       	movw	r22, r0
    13ac:	11 24       	eor	r1, r1
    13ae:	ce 01       	movw	r24, r28
    13b0:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	31 f0       	breq	.+12     	; 0x13c4 <_ZN3tftL7putCharEc+0x44>
		x -= x % (FONT_WIDTH * zoom);
    13b8:	c8 1b       	sub	r28, r24
    13ba:	d9 0b       	sbc	r29, r25
    13bc:	d0 93 c2 02 	sts	0x02C2, r29
    13c0:	c0 93 c1 02 	sts	0x02C1, r28
	do
		next();
    13c4:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN3tftL4nextEv>
    13c8:	e0 91 d8 01 	lds	r30, 0x01D8
    13cc:	f0 91 d9 01 	lds	r31, 0x01D9
    13d0:	60 91 be 02 	lds	r22, 0x02BE
    13d4:	80 81       	ld	r24, Z
    13d6:	68 9f       	mul	r22, r24
    13d8:	b0 01       	movw	r22, r0
    13da:	11 24       	eor	r1, r1
    13dc:	80 91 c1 02 	lds	r24, 0x02C1
    13e0:	90 91 c2 02 	lds	r25, 0x02C2
    13e4:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
    13e8:	cb 01       	movw	r24, r22
    13ea:	60 91 c0 02 	lds	r22, 0x02C0
    13ee:	70 e0       	ldi	r23, 0x00	; 0
    13f0:	0e 94 35 0a 	call	0x146a	; 0x146a <__udivmodhi4>
    13f4:	89 2b       	or	r24, r25
    13f6:	31 f7       	brne	.-52     	; 0x13c4 <_ZN3tftL7putCharEc+0x44>
    13f8:	06 c0       	rjmp	.+12     	; 0x1406 <_ZN3tftL7putCharEc+0x86>
    13fa:	80 32       	cpi	r24, 0x20	; 32
    13fc:	20 f0       	brcs	.+8      	; 0x1406 <_ZN3tftL7putCharEc+0x86>
    13fe:	0e 94 0d 08 	call	0x101a	; 0x101a <_ZN3tft8drawCharEc>
    1402:	0e 94 a0 09 	call	0x1340	; 0x1340 <_ZN3tftL4nextEv>
    1406:	df 91       	pop	r29
    1408:	cf 91       	pop	r28
    140a:	08 95       	ret

0000140c <_ZL10tftputcharcP6__file>:
    140c:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN3tftL7putCharEc>
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	08 95       	ret

00001416 <_ZN3tft9putStringEPKcb>:
    1416:	1f 93       	push	r17
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	16 2f       	mov	r17, r22
    141e:	ec 01       	movw	r28, r24
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <_ZN3tft9putStringEPKcb+0x10>
    1422:	0e 94 c0 09 	call	0x1380	; 0x1380 <_ZN3tftL7putCharEc>
    1426:	11 23       	and	r17, r17
    1428:	19 f0       	breq	.+6      	; 0x1430 <_ZN3tft9putStringEPKcb+0x1a>
    142a:	fe 01       	movw	r30, r28
    142c:	84 91       	lpm	r24, Z
    142e:	01 c0       	rjmp	.+2      	; 0x1432 <_ZN3tft9putStringEPKcb+0x1c>
    1430:	88 81       	ld	r24, Y
    1432:	21 96       	adiw	r28, 0x01	; 1
    1434:	88 23       	and	r24, r24
    1436:	a9 f7       	brne	.-22     	; 0x1422 <_ZN3tft9putStringEPKcb+0xc>
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	1f 91       	pop	r17
    143e:	08 95       	ret

00001440 <_Z6tftoutv>:
    1440:	80 91 cd 02 	lds	r24, 0x02CD
    1444:	90 91 ce 02 	lds	r25, 0x02CE
    1448:	89 2b       	or	r24, r25
    144a:	51 f4       	brne	.+20     	; 0x1460 <_Z6tftoutv+0x20>
    144c:	86 e0       	ldi	r24, 0x06	; 6
    144e:	9a e0       	ldi	r25, 0x0A	; 10
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	0e 94 65 0a 	call	0x14ca	; 0x14ca <fdevopen>
    1458:	90 93 ce 02 	sts	0x02CE, r25
    145c:	80 93 cd 02 	sts	0x02CD, r24
    1460:	80 91 cd 02 	lds	r24, 0x02CD
    1464:	90 91 ce 02 	lds	r25, 0x02CE
    1468:	08 95       	ret

0000146a <__udivmodhi4>:
    146a:	aa 1b       	sub	r26, r26
    146c:	bb 1b       	sub	r27, r27
    146e:	51 e1       	ldi	r21, 0x11	; 17
    1470:	07 c0       	rjmp	.+14     	; 0x1480 <__udivmodhi4_ep>

00001472 <__udivmodhi4_loop>:
    1472:	aa 1f       	adc	r26, r26
    1474:	bb 1f       	adc	r27, r27
    1476:	a6 17       	cp	r26, r22
    1478:	b7 07       	cpc	r27, r23
    147a:	10 f0       	brcs	.+4      	; 0x1480 <__udivmodhi4_ep>
    147c:	a6 1b       	sub	r26, r22
    147e:	b7 0b       	sbc	r27, r23

00001480 <__udivmodhi4_ep>:
    1480:	88 1f       	adc	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	5a 95       	dec	r21
    1486:	a9 f7       	brne	.-22     	; 0x1472 <__udivmodhi4_loop>
    1488:	80 95       	com	r24
    148a:	90 95       	com	r25
    148c:	bc 01       	movw	r22, r24
    148e:	cd 01       	movw	r24, r26
    1490:	08 95       	ret

00001492 <__divmodhi4>:
    1492:	97 fb       	bst	r25, 7
    1494:	09 2e       	mov	r0, r25
    1496:	07 26       	eor	r0, r23
    1498:	0a d0       	rcall	.+20     	; 0x14ae <__divmodhi4_neg1>
    149a:	77 fd       	sbrc	r23, 7
    149c:	04 d0       	rcall	.+8      	; 0x14a6 <__divmodhi4_neg2>
    149e:	e5 df       	rcall	.-54     	; 0x146a <__udivmodhi4>
    14a0:	06 d0       	rcall	.+12     	; 0x14ae <__divmodhi4_neg1>
    14a2:	00 20       	and	r0, r0
    14a4:	1a f4       	brpl	.+6      	; 0x14ac <__divmodhi4_exit>

000014a6 <__divmodhi4_neg2>:
    14a6:	70 95       	com	r23
    14a8:	61 95       	neg	r22
    14aa:	7f 4f       	sbci	r23, 0xFF	; 255

000014ac <__divmodhi4_exit>:
    14ac:	08 95       	ret

000014ae <__divmodhi4_neg1>:
    14ae:	f6 f7       	brtc	.-4      	; 0x14ac <__divmodhi4_exit>
    14b0:	90 95       	com	r25
    14b2:	81 95       	neg	r24
    14b4:	9f 4f       	sbci	r25, 0xFF	; 255
    14b6:	08 95       	ret

000014b8 <memcpy>:
    14b8:	fb 01       	movw	r30, r22
    14ba:	dc 01       	movw	r26, r24
    14bc:	02 c0       	rjmp	.+4      	; 0x14c2 <memcpy+0xa>
    14be:	01 90       	ld	r0, Z+
    14c0:	0d 92       	st	X+, r0
    14c2:	41 50       	subi	r20, 0x01	; 1
    14c4:	50 40       	sbci	r21, 0x00	; 0
    14c6:	d8 f7       	brcc	.-10     	; 0x14be <memcpy+0x6>
    14c8:	08 95       	ret

000014ca <fdevopen>:
    14ca:	0f 93       	push	r16
    14cc:	1f 93       	push	r17
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	8c 01       	movw	r16, r24
    14d4:	eb 01       	movw	r28, r22
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	31 f4       	brne	.+12     	; 0x14e6 <fdevopen+0x1c>
    14da:	61 15       	cp	r22, r1
    14dc:	71 05       	cpc	r23, r1
    14de:	19 f4       	brne	.+6      	; 0x14e6 <fdevopen+0x1c>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	38 c0       	rjmp	.+112    	; 0x1556 <fdevopen+0x8c>
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	6e e0       	ldi	r22, 0x0E	; 14
    14ec:	70 e0       	ldi	r23, 0x00	; 0
    14ee:	0e 94 12 0b 	call	0x1624	; 0x1624 <calloc>
    14f2:	fc 01       	movw	r30, r24
    14f4:	9c 01       	movw	r18, r24
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	71 f1       	breq	.+92     	; 0x1556 <fdevopen+0x8c>
    14fa:	80 e8       	ldi	r24, 0x80	; 128
    14fc:	83 83       	std	Z+3, r24	; 0x03
    14fe:	20 97       	sbiw	r28, 0x00	; 0
    1500:	71 f0       	breq	.+28     	; 0x151e <fdevopen+0x54>
    1502:	d3 87       	std	Z+11, r29	; 0x0b
    1504:	c2 87       	std	Z+10, r28	; 0x0a
    1506:	81 e8       	ldi	r24, 0x81	; 129
    1508:	83 83       	std	Z+3, r24	; 0x03
    150a:	80 91 d0 02 	lds	r24, 0x02D0
    150e:	90 91 d1 02 	lds	r25, 0x02D1
    1512:	89 2b       	or	r24, r25
    1514:	21 f4       	brne	.+8      	; 0x151e <fdevopen+0x54>
    1516:	f0 93 d1 02 	sts	0x02D1, r31
    151a:	e0 93 d0 02 	sts	0x02D0, r30
    151e:	01 15       	cp	r16, r1
    1520:	11 05       	cpc	r17, r1
    1522:	c9 f0       	breq	.+50     	; 0x1556 <fdevopen+0x8c>
    1524:	11 87       	std	Z+9, r17	; 0x09
    1526:	00 87       	std	Z+8, r16	; 0x08
    1528:	83 81       	ldd	r24, Z+3	; 0x03
    152a:	82 60       	ori	r24, 0x02	; 2
    152c:	83 83       	std	Z+3, r24	; 0x03
    152e:	80 91 d2 02 	lds	r24, 0x02D2
    1532:	90 91 d3 02 	lds	r25, 0x02D3
    1536:	89 2b       	or	r24, r25
    1538:	71 f4       	brne	.+28     	; 0x1556 <fdevopen+0x8c>
    153a:	f0 93 d3 02 	sts	0x02D3, r31
    153e:	e0 93 d2 02 	sts	0x02D2, r30
    1542:	80 91 d4 02 	lds	r24, 0x02D4
    1546:	90 91 d5 02 	lds	r25, 0x02D5
    154a:	89 2b       	or	r24, r25
    154c:	21 f4       	brne	.+8      	; 0x1556 <fdevopen+0x8c>
    154e:	f0 93 d5 02 	sts	0x02D5, r31
    1552:	e0 93 d4 02 	sts	0x02D4, r30
    1556:	c9 01       	movw	r24, r18
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <fputc>:
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	8c 01       	movw	r16, r24
    156c:	eb 01       	movw	r28, r22
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	81 ff       	sbrs	r24, 1
    1572:	1b c0       	rjmp	.+54     	; 0x15aa <fputc+0x48>
    1574:	82 ff       	sbrs	r24, 2
    1576:	0d c0       	rjmp	.+26     	; 0x1592 <fputc+0x30>
    1578:	2e 81       	ldd	r18, Y+6	; 0x06
    157a:	3f 81       	ldd	r19, Y+7	; 0x07
    157c:	8c 81       	ldd	r24, Y+4	; 0x04
    157e:	9d 81       	ldd	r25, Y+5	; 0x05
    1580:	28 17       	cp	r18, r24
    1582:	39 07       	cpc	r19, r25
    1584:	64 f4       	brge	.+24     	; 0x159e <fputc+0x3c>
    1586:	e8 81       	ld	r30, Y
    1588:	f9 81       	ldd	r31, Y+1	; 0x01
    158a:	01 93       	st	Z+, r16
    158c:	f9 83       	std	Y+1, r31	; 0x01
    158e:	e8 83       	st	Y, r30
    1590:	06 c0       	rjmp	.+12     	; 0x159e <fputc+0x3c>
    1592:	e8 85       	ldd	r30, Y+8	; 0x08
    1594:	f9 85       	ldd	r31, Y+9	; 0x09
    1596:	80 2f       	mov	r24, r16
    1598:	09 95       	icall
    159a:	89 2b       	or	r24, r25
    159c:	31 f4       	brne	.+12     	; 0x15aa <fputc+0x48>
    159e:	8e 81       	ldd	r24, Y+6	; 0x06
    15a0:	9f 81       	ldd	r25, Y+7	; 0x07
    15a2:	01 96       	adiw	r24, 0x01	; 1
    15a4:	9f 83       	std	Y+7, r25	; 0x07
    15a6:	8e 83       	std	Y+6, r24	; 0x06
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <fputc+0x4c>
    15aa:	0f ef       	ldi	r16, 0xFF	; 255
    15ac:	1f ef       	ldi	r17, 0xFF	; 255
    15ae:	c8 01       	movw	r24, r16
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <puts>:
    15ba:	0f 93       	push	r16
    15bc:	1f 93       	push	r17
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
    15c2:	8c 01       	movw	r16, r24
    15c4:	e0 91 d2 02 	lds	r30, 0x02D2
    15c8:	f0 91 d3 02 	lds	r31, 0x02D3
    15cc:	83 81       	ldd	r24, Z+3	; 0x03
    15ce:	81 ff       	sbrs	r24, 1
    15d0:	21 c0       	rjmp	.+66     	; 0x1614 <puts+0x5a>
    15d2:	c0 e0       	ldi	r28, 0x00	; 0
    15d4:	d0 e0       	ldi	r29, 0x00	; 0
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <puts+0x38>
    15d8:	e0 91 d2 02 	lds	r30, 0x02D2
    15dc:	f0 91 d3 02 	lds	r31, 0x02D3
    15e0:	20 85       	ldd	r18, Z+8	; 0x08
    15e2:	31 85       	ldd	r19, Z+9	; 0x09
    15e4:	bf 01       	movw	r22, r30
    15e6:	f9 01       	movw	r30, r18
    15e8:	09 95       	icall
    15ea:	89 2b       	or	r24, r25
    15ec:	11 f0       	breq	.+4      	; 0x15f2 <puts+0x38>
    15ee:	cf ef       	ldi	r28, 0xFF	; 255
    15f0:	df ef       	ldi	r29, 0xFF	; 255
    15f2:	f8 01       	movw	r30, r16
    15f4:	81 91       	ld	r24, Z+
    15f6:	8f 01       	movw	r16, r30
    15f8:	88 23       	and	r24, r24
    15fa:	71 f7       	brne	.-36     	; 0x15d8 <puts+0x1e>
    15fc:	e0 91 d2 02 	lds	r30, 0x02D2
    1600:	f0 91 d3 02 	lds	r31, 0x02D3
    1604:	20 85       	ldd	r18, Z+8	; 0x08
    1606:	31 85       	ldd	r19, Z+9	; 0x09
    1608:	8a e0       	ldi	r24, 0x0A	; 10
    160a:	bf 01       	movw	r22, r30
    160c:	f9 01       	movw	r30, r18
    160e:	09 95       	icall
    1610:	89 2b       	or	r24, r25
    1612:	11 f0       	breq	.+4      	; 0x1618 <puts+0x5e>
    1614:	cf ef       	ldi	r28, 0xFF	; 255
    1616:	df ef       	ldi	r29, 0xFF	; 255
    1618:	ce 01       	movw	r24, r28
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	0f 91       	pop	r16
    1622:	08 95       	ret

00001624 <calloc>:
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	68 9f       	mul	r22, r24
    162e:	80 01       	movw	r16, r0
    1630:	69 9f       	mul	r22, r25
    1632:	10 0d       	add	r17, r0
    1634:	78 9f       	mul	r23, r24
    1636:	10 0d       	add	r17, r0
    1638:	11 24       	eor	r1, r1
    163a:	c8 01       	movw	r24, r16
    163c:	0e 94 2e 0b 	call	0x165c	; 0x165c <malloc>
    1640:	ec 01       	movw	r28, r24
    1642:	00 97       	sbiw	r24, 0x00	; 0
    1644:	29 f0       	breq	.+10     	; 0x1650 <calloc+0x2c>
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	70 e0       	ldi	r23, 0x00	; 0
    164a:	a8 01       	movw	r20, r16
    164c:	0e 94 33 0c 	call	0x1866	; 0x1866 <memset>
    1650:	ce 01       	movw	r24, r28
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	1f 91       	pop	r17
    1658:	0f 91       	pop	r16
    165a:	08 95       	ret

0000165c <malloc>:
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	bc 01       	movw	r22, r24
    1662:	82 30       	cpi	r24, 0x02	; 2
    1664:	91 05       	cpc	r25, r1
    1666:	10 f4       	brcc	.+4      	; 0x166c <malloc+0x10>
    1668:	62 e0       	ldi	r22, 0x02	; 2
    166a:	70 e0       	ldi	r23, 0x00	; 0
    166c:	a0 91 d8 02 	lds	r26, 0x02D8
    1670:	b0 91 d9 02 	lds	r27, 0x02D9
    1674:	ed 01       	movw	r28, r26
    1676:	e0 e0       	ldi	r30, 0x00	; 0
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	40 e0       	ldi	r20, 0x00	; 0
    167c:	50 e0       	ldi	r21, 0x00	; 0
    167e:	21 c0       	rjmp	.+66     	; 0x16c2 <malloc+0x66>
    1680:	88 81       	ld	r24, Y
    1682:	99 81       	ldd	r25, Y+1	; 0x01
    1684:	86 17       	cp	r24, r22
    1686:	97 07       	cpc	r25, r23
    1688:	69 f4       	brne	.+26     	; 0x16a4 <malloc+0x48>
    168a:	8a 81       	ldd	r24, Y+2	; 0x02
    168c:	9b 81       	ldd	r25, Y+3	; 0x03
    168e:	30 97       	sbiw	r30, 0x00	; 0
    1690:	19 f0       	breq	.+6      	; 0x1698 <malloc+0x3c>
    1692:	93 83       	std	Z+3, r25	; 0x03
    1694:	82 83       	std	Z+2, r24	; 0x02
    1696:	04 c0       	rjmp	.+8      	; 0x16a0 <malloc+0x44>
    1698:	90 93 d9 02 	sts	0x02D9, r25
    169c:	80 93 d8 02 	sts	0x02D8, r24
    16a0:	fe 01       	movw	r30, r28
    16a2:	34 c0       	rjmp	.+104    	; 0x170c <malloc+0xb0>
    16a4:	68 17       	cp	r22, r24
    16a6:	79 07       	cpc	r23, r25
    16a8:	38 f4       	brcc	.+14     	; 0x16b8 <malloc+0x5c>
    16aa:	41 15       	cp	r20, r1
    16ac:	51 05       	cpc	r21, r1
    16ae:	19 f0       	breq	.+6      	; 0x16b6 <malloc+0x5a>
    16b0:	84 17       	cp	r24, r20
    16b2:	95 07       	cpc	r25, r21
    16b4:	08 f4       	brcc	.+2      	; 0x16b8 <malloc+0x5c>
    16b6:	ac 01       	movw	r20, r24
    16b8:	fe 01       	movw	r30, r28
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	9b 81       	ldd	r25, Y+3	; 0x03
    16be:	9c 01       	movw	r18, r24
    16c0:	e9 01       	movw	r28, r18
    16c2:	20 97       	sbiw	r28, 0x00	; 0
    16c4:	e9 f6       	brne	.-70     	; 0x1680 <malloc+0x24>
    16c6:	41 15       	cp	r20, r1
    16c8:	51 05       	cpc	r21, r1
    16ca:	a9 f1       	breq	.+106    	; 0x1736 <malloc+0xda>
    16cc:	ca 01       	movw	r24, r20
    16ce:	86 1b       	sub	r24, r22
    16d0:	97 0b       	sbc	r25, r23
    16d2:	04 97       	sbiw	r24, 0x04	; 4
    16d4:	08 f4       	brcc	.+2      	; 0x16d8 <malloc+0x7c>
    16d6:	ba 01       	movw	r22, r20
    16d8:	e0 e0       	ldi	r30, 0x00	; 0
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	2a c0       	rjmp	.+84     	; 0x1732 <malloc+0xd6>
    16de:	8d 91       	ld	r24, X+
    16e0:	9c 91       	ld	r25, X
    16e2:	11 97       	sbiw	r26, 0x01	; 1
    16e4:	84 17       	cp	r24, r20
    16e6:	95 07       	cpc	r25, r21
    16e8:	f9 f4       	brne	.+62     	; 0x1728 <malloc+0xcc>
    16ea:	64 17       	cp	r22, r20
    16ec:	75 07       	cpc	r23, r21
    16ee:	81 f4       	brne	.+32     	; 0x1710 <malloc+0xb4>
    16f0:	12 96       	adiw	r26, 0x02	; 2
    16f2:	8d 91       	ld	r24, X+
    16f4:	9c 91       	ld	r25, X
    16f6:	13 97       	sbiw	r26, 0x03	; 3
    16f8:	30 97       	sbiw	r30, 0x00	; 0
    16fa:	19 f0       	breq	.+6      	; 0x1702 <malloc+0xa6>
    16fc:	93 83       	std	Z+3, r25	; 0x03
    16fe:	82 83       	std	Z+2, r24	; 0x02
    1700:	04 c0       	rjmp	.+8      	; 0x170a <malloc+0xae>
    1702:	90 93 d9 02 	sts	0x02D9, r25
    1706:	80 93 d8 02 	sts	0x02D8, r24
    170a:	fd 01       	movw	r30, r26
    170c:	32 96       	adiw	r30, 0x02	; 2
    170e:	4f c0       	rjmp	.+158    	; 0x17ae <malloc+0x152>
    1710:	ca 01       	movw	r24, r20
    1712:	86 1b       	sub	r24, r22
    1714:	97 0b       	sbc	r25, r23
    1716:	fd 01       	movw	r30, r26
    1718:	e8 0f       	add	r30, r24
    171a:	f9 1f       	adc	r31, r25
    171c:	61 93       	st	Z+, r22
    171e:	71 93       	st	Z+, r23
    1720:	02 97       	sbiw	r24, 0x02	; 2
    1722:	8d 93       	st	X+, r24
    1724:	9c 93       	st	X, r25
    1726:	43 c0       	rjmp	.+134    	; 0x17ae <malloc+0x152>
    1728:	fd 01       	movw	r30, r26
    172a:	82 81       	ldd	r24, Z+2	; 0x02
    172c:	93 81       	ldd	r25, Z+3	; 0x03
    172e:	9c 01       	movw	r18, r24
    1730:	d9 01       	movw	r26, r18
    1732:	10 97       	sbiw	r26, 0x00	; 0
    1734:	a1 f6       	brne	.-88     	; 0x16de <malloc+0x82>
    1736:	80 91 d6 02 	lds	r24, 0x02D6
    173a:	90 91 d7 02 	lds	r25, 0x02D7
    173e:	89 2b       	or	r24, r25
    1740:	41 f4       	brne	.+16     	; 0x1752 <malloc+0xf6>
    1742:	80 91 dc 01 	lds	r24, 0x01DC
    1746:	90 91 dd 01 	lds	r25, 0x01DD
    174a:	90 93 d7 02 	sts	0x02D7, r25
    174e:	80 93 d6 02 	sts	0x02D6, r24
    1752:	40 91 de 01 	lds	r20, 0x01DE
    1756:	50 91 df 01 	lds	r21, 0x01DF
    175a:	41 15       	cp	r20, r1
    175c:	51 05       	cpc	r21, r1
    175e:	41 f4       	brne	.+16     	; 0x1770 <malloc+0x114>
    1760:	4d b7       	in	r20, 0x3d	; 61
    1762:	5e b7       	in	r21, 0x3e	; 62
    1764:	80 91 da 01 	lds	r24, 0x01DA
    1768:	90 91 db 01 	lds	r25, 0x01DB
    176c:	48 1b       	sub	r20, r24
    176e:	59 0b       	sbc	r21, r25
    1770:	20 91 d6 02 	lds	r18, 0x02D6
    1774:	30 91 d7 02 	lds	r19, 0x02D7
    1778:	24 17       	cp	r18, r20
    177a:	35 07       	cpc	r19, r21
    177c:	b0 f4       	brcc	.+44     	; 0x17aa <malloc+0x14e>
    177e:	ca 01       	movw	r24, r20
    1780:	82 1b       	sub	r24, r18
    1782:	93 0b       	sbc	r25, r19
    1784:	86 17       	cp	r24, r22
    1786:	97 07       	cpc	r25, r23
    1788:	80 f0       	brcs	.+32     	; 0x17aa <malloc+0x14e>
    178a:	ab 01       	movw	r20, r22
    178c:	4e 5f       	subi	r20, 0xFE	; 254
    178e:	5f 4f       	sbci	r21, 0xFF	; 255
    1790:	84 17       	cp	r24, r20
    1792:	95 07       	cpc	r25, r21
    1794:	50 f0       	brcs	.+20     	; 0x17aa <malloc+0x14e>
    1796:	42 0f       	add	r20, r18
    1798:	53 1f       	adc	r21, r19
    179a:	50 93 d7 02 	sts	0x02D7, r21
    179e:	40 93 d6 02 	sts	0x02D6, r20
    17a2:	f9 01       	movw	r30, r18
    17a4:	61 93       	st	Z+, r22
    17a6:	71 93       	st	Z+, r23
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <malloc+0x152>
    17aa:	e0 e0       	ldi	r30, 0x00	; 0
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	cf 01       	movw	r24, r30
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <free>:
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	00 97       	sbiw	r24, 0x00	; 0
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <free+0xa>
    17be:	50 c0       	rjmp	.+160    	; 0x1860 <free+0xaa>
    17c0:	ec 01       	movw	r28, r24
    17c2:	22 97       	sbiw	r28, 0x02	; 2
    17c4:	1b 82       	std	Y+3, r1	; 0x03
    17c6:	1a 82       	std	Y+2, r1	; 0x02
    17c8:	a0 91 d8 02 	lds	r26, 0x02D8
    17cc:	b0 91 d9 02 	lds	r27, 0x02D9
    17d0:	10 97       	sbiw	r26, 0x00	; 0
    17d2:	09 f1       	breq	.+66     	; 0x1816 <free+0x60>
    17d4:	40 e0       	ldi	r20, 0x00	; 0
    17d6:	50 e0       	ldi	r21, 0x00	; 0
    17d8:	ac 17       	cp	r26, r28
    17da:	bd 07       	cpc	r27, r29
    17dc:	08 f1       	brcs	.+66     	; 0x1820 <free+0x6a>
    17de:	bb 83       	std	Y+3, r27	; 0x03
    17e0:	aa 83       	std	Y+2, r26	; 0x02
    17e2:	fe 01       	movw	r30, r28
    17e4:	21 91       	ld	r18, Z+
    17e6:	31 91       	ld	r19, Z+
    17e8:	e2 0f       	add	r30, r18
    17ea:	f3 1f       	adc	r31, r19
    17ec:	ae 17       	cp	r26, r30
    17ee:	bf 07       	cpc	r27, r31
    17f0:	79 f4       	brne	.+30     	; 0x1810 <free+0x5a>
    17f2:	8d 91       	ld	r24, X+
    17f4:	9c 91       	ld	r25, X
    17f6:	11 97       	sbiw	r26, 0x01	; 1
    17f8:	28 0f       	add	r18, r24
    17fa:	39 1f       	adc	r19, r25
    17fc:	2e 5f       	subi	r18, 0xFE	; 254
    17fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1800:	39 83       	std	Y+1, r19	; 0x01
    1802:	28 83       	st	Y, r18
    1804:	12 96       	adiw	r26, 0x02	; 2
    1806:	8d 91       	ld	r24, X+
    1808:	9c 91       	ld	r25, X
    180a:	13 97       	sbiw	r26, 0x03	; 3
    180c:	9b 83       	std	Y+3, r25	; 0x03
    180e:	8a 83       	std	Y+2, r24	; 0x02
    1810:	41 15       	cp	r20, r1
    1812:	51 05       	cpc	r21, r1
    1814:	71 f4       	brne	.+28     	; 0x1832 <free+0x7c>
    1816:	d0 93 d9 02 	sts	0x02D9, r29
    181a:	c0 93 d8 02 	sts	0x02D8, r28
    181e:	20 c0       	rjmp	.+64     	; 0x1860 <free+0xaa>
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	8d 91       	ld	r24, X+
    1824:	9c 91       	ld	r25, X
    1826:	13 97       	sbiw	r26, 0x03	; 3
    1828:	ad 01       	movw	r20, r26
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	11 f0       	breq	.+4      	; 0x1832 <free+0x7c>
    182e:	dc 01       	movw	r26, r24
    1830:	d3 cf       	rjmp	.-90     	; 0x17d8 <free+0x22>
    1832:	fa 01       	movw	r30, r20
    1834:	d3 83       	std	Z+3, r29	; 0x03
    1836:	c2 83       	std	Z+2, r28	; 0x02
    1838:	21 91       	ld	r18, Z+
    183a:	31 91       	ld	r19, Z+
    183c:	e2 0f       	add	r30, r18
    183e:	f3 1f       	adc	r31, r19
    1840:	ce 17       	cp	r28, r30
    1842:	df 07       	cpc	r29, r31
    1844:	69 f4       	brne	.+26     	; 0x1860 <free+0xaa>
    1846:	88 81       	ld	r24, Y
    1848:	99 81       	ldd	r25, Y+1	; 0x01
    184a:	28 0f       	add	r18, r24
    184c:	39 1f       	adc	r19, r25
    184e:	2e 5f       	subi	r18, 0xFE	; 254
    1850:	3f 4f       	sbci	r19, 0xFF	; 255
    1852:	fa 01       	movw	r30, r20
    1854:	31 83       	std	Z+1, r19	; 0x01
    1856:	20 83       	st	Z, r18
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	9b 81       	ldd	r25, Y+3	; 0x03
    185c:	93 83       	std	Z+3, r25	; 0x03
    185e:	82 83       	std	Z+2, r24	; 0x02
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	08 95       	ret

00001866 <memset>:
    1866:	dc 01       	movw	r26, r24
    1868:	01 c0       	rjmp	.+2      	; 0x186c <memset+0x6>
    186a:	6d 93       	st	X+, r22
    186c:	41 50       	subi	r20, 0x01	; 1
    186e:	50 40       	sbci	r21, 0x00	; 0
    1870:	e0 f7       	brcc	.-8      	; 0x186a <memset+0x4>
    1872:	08 95       	ret

00001874 <_exit>:
    1874:	f8 94       	cli

00001876 <__stop_program>:
    1876:	ff cf       	rjmp	.-2      	; 0x1876 <__stop_program>
